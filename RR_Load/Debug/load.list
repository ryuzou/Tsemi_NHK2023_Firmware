
RR_Load.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004590  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004768  08004768  00014768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047a8  080047a8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080047a8  080047a8  000147a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047b0  080047b0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047b0  080047b0  000147b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047b4  080047b4  000147b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080047b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  20000010  080047c8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  080047c8  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000146ab  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002303  00000000  00000000  000346eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b8  00000000  00000000  000369f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f0  00000000  00000000  00037ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001df3a  00000000  00000000  00038c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012f14  00000000  00000000  00056bd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7279  00000000  00000000  00069ae6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00130d5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c8c  00000000  00000000  00130db0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004750 	.word	0x08004750

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08004750 	.word	0x08004750

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int flag = 1;


void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin){ //リミットスイッチを押したとき
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == GPIO_PIN_1){
 8000526:	88fb      	ldrh	r3, [r7, #6]
 8000528:	2b02      	cmp	r3, #2
 800052a:	d112      	bne.n	8000552 <HAL_GPIO_EXTI_Callback+0x36>
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800052c:	2201      	movs	r2, #1
 800052e:	2140      	movs	r1, #64	; 0x40
 8000530:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000534:	f001 fa84 	bl	8001a40 <HAL_GPIO_WritePin>
		 __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 20);
 8000538:	4b14      	ldr	r3, [pc, #80]	; (800058c <HAL_GPIO_EXTI_Callback+0x70>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	2214      	movs	r2, #20
 800053e:	639a      	str	r2, [r3, #56]	; 0x38
		 __HAL_GPIO_EXTI_CLEAR_FLAG(GPIO_PIN_0);
 8000540:	4b13      	ldr	r3, [pc, #76]	; (8000590 <HAL_GPIO_EXTI_Callback+0x74>)
 8000542:	2201      	movs	r2, #1
 8000544:	615a      	str	r2, [r3, #20]
		 __HAL_GPIO_EXTI_CLEAR_FLAG(GPIO_PIN_1);
 8000546:	4b12      	ldr	r3, [pc, #72]	; (8000590 <HAL_GPIO_EXTI_Callback+0x74>)
 8000548:	2202      	movs	r2, #2
 800054a:	615a      	str	r2, [r3, #20]
		 HAL_Delay(10);
 800054c:	200a      	movs	r0, #10
 800054e:	f000 fc65 	bl	8000e1c <HAL_Delay>
	}

	if (GPIO_Pin == GPIO_PIN_0){
 8000552:	88fb      	ldrh	r3, [r7, #6]
 8000554:	2b01      	cmp	r3, #1
 8000556:	d115      	bne.n	8000584 <HAL_GPIO_EXTI_Callback+0x68>
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	2140      	movs	r1, #64	; 0x40
 800055c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000560:	f001 fa6e 	bl	8001a40 <HAL_GPIO_WritePin>
		 HAL_Delay(100);
 8000564:	2064      	movs	r0, #100	; 0x64
 8000566:	f000 fc59 	bl	8000e1c <HAL_Delay>
		 __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 99);
 800056a:	4b08      	ldr	r3, [pc, #32]	; (800058c <HAL_GPIO_EXTI_Callback+0x70>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	2263      	movs	r2, #99	; 0x63
 8000570:	639a      	str	r2, [r3, #56]	; 0x38
		 __HAL_GPIO_EXTI_CLEAR_FLAG(GPIO_PIN_0);
 8000572:	4b07      	ldr	r3, [pc, #28]	; (8000590 <HAL_GPIO_EXTI_Callback+0x74>)
 8000574:	2201      	movs	r2, #1
 8000576:	615a      	str	r2, [r3, #20]
		 __HAL_GPIO_EXTI_CLEAR_FLAG(GPIO_PIN_1);
 8000578:	4b05      	ldr	r3, [pc, #20]	; (8000590 <HAL_GPIO_EXTI_Callback+0x74>)
 800057a:	2202      	movs	r2, #2
 800057c:	615a      	str	r2, [r3, #20]
		 HAL_Delay(10);
 800057e:	200a      	movs	r0, #10
 8000580:	f000 fc4c 	bl	8000e1c <HAL_Delay>
	}
}
 8000584:	bf00      	nop
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20000090 	.word	0x20000090
 8000590:	40010400 	.word	0x40010400

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 fbcf 	bl	8000d3a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f82e 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 f980 	bl	80008a4 <MX_GPIO_Init>
  MX_TIM3_Init();
 80005a4:	f000 f8bc 	bl	8000720 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80005a8:	f000 f930 	bl	800080c <MX_USART2_UART_Init>
  MX_FDCAN1_Init();
 80005ac:	f000 f872 	bl	8000694 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  __HAL_GPIO_EXTI_CLEAR_FLAG(GPIO_PIN_0);
 80005b0:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <main+0x5c>)
 80005b2:	2201      	movs	r2, #1
 80005b4:	615a      	str	r2, [r3, #20]
  __HAL_GPIO_EXTI_CLEAR_FLAG(GPIO_PIN_1);
 80005b6:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <main+0x5c>)
 80005b8:	2202      	movs	r2, #2
 80005ba:	615a      	str	r2, [r3, #20]

  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 99);
 80005bc:	4b0d      	ldr	r3, [pc, #52]	; (80005f4 <main+0x60>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2263      	movs	r2, #99	; 0x63
 80005c2:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2140      	movs	r1, #64	; 0x40
 80005c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005cc:	f001 fa38 	bl	8001a40 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80005d0:	2104      	movs	r1, #4
 80005d2:	4808      	ldr	r0, [pc, #32]	; (80005f4 <main+0x60>)
 80005d4:	f002 fae4 	bl	8002ba0 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(flag == 1){ //装填動作
 80005d8:	4b07      	ldr	r3, [pc, #28]	; (80005f8 <main+0x64>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d1fb      	bne.n	80005d8 <main+0x44>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 20);
 80005e0:	4b04      	ldr	r3, [pc, #16]	; (80005f4 <main+0x60>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2214      	movs	r2, #20
 80005e6:	639a      	str	r2, [r3, #56]	; 0x38
		  flag = 0;
 80005e8:	4b03      	ldr	r3, [pc, #12]	; (80005f8 <main+0x64>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
	  if(flag == 1){ //装填動作
 80005ee:	e7f3      	b.n	80005d8 <main+0x44>
 80005f0:	40010400 	.word	0x40010400
 80005f4:	20000090 	.word	0x20000090
 80005f8:	20000000 	.word	0x20000000

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b094      	sub	sp, #80	; 0x50
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0318 	add.w	r3, r7, #24
 8000606:	2238      	movs	r2, #56	; 0x38
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f004 f898 	bl	8004740 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800061e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000622:	f001 fa3d 	bl	8001aa0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000626:	2302      	movs	r3, #2
 8000628:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800062a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800062e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000630:	2340      	movs	r3, #64	; 0x40
 8000632:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000634:	2302      	movs	r3, #2
 8000636:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000638:	2302      	movs	r3, #2
 800063a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800063c:	2301      	movs	r3, #1
 800063e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000640:	230a      	movs	r3, #10
 8000642:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000644:	2302      	movs	r3, #2
 8000646:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000648:	2302      	movs	r3, #2
 800064a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800064c:	2302      	movs	r3, #2
 800064e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000650:	f107 0318 	add.w	r3, r7, #24
 8000654:	4618      	mov	r0, r3
 8000656:	f001 fac7 	bl	8001be8 <HAL_RCC_OscConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000660:	f000 f9a2 	bl	80009a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000664:	230f      	movs	r3, #15
 8000666:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000668:	2303      	movs	r3, #3
 800066a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	2102      	movs	r1, #2
 800067c:	4618      	mov	r0, r3
 800067e:	f001 fdcb 	bl	8002218 <HAL_RCC_ClockConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000688:	f000 f98e 	bl	80009a8 <Error_Handler>
  }
}
 800068c:	bf00      	nop
 800068e:	3750      	adds	r7, #80	; 0x50
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000698:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <MX_FDCAN1_Init+0x84>)
 800069a:	4a20      	ldr	r2, [pc, #128]	; (800071c <MX_FDCAN1_Init+0x88>)
 800069c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800069e:	4b1e      	ldr	r3, [pc, #120]	; (8000718 <MX_FDCAN1_Init+0x84>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80006a4:	4b1c      	ldr	r3, [pc, #112]	; (8000718 <MX_FDCAN1_Init+0x84>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80006aa:	4b1b      	ldr	r3, [pc, #108]	; (8000718 <MX_FDCAN1_Init+0x84>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80006b0:	4b19      	ldr	r3, [pc, #100]	; (8000718 <MX_FDCAN1_Init+0x84>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80006b6:	4b18      	ldr	r3, [pc, #96]	; (8000718 <MX_FDCAN1_Init+0x84>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80006bc:	4b16      	ldr	r3, [pc, #88]	; (8000718 <MX_FDCAN1_Init+0x84>)
 80006be:	2200      	movs	r2, #0
 80006c0:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 80006c2:	4b15      	ldr	r3, [pc, #84]	; (8000718 <MX_FDCAN1_Init+0x84>)
 80006c4:	2210      	movs	r2, #16
 80006c6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80006c8:	4b13      	ldr	r3, [pc, #76]	; (8000718 <MX_FDCAN1_Init+0x84>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80006ce:	4b12      	ldr	r3, [pc, #72]	; (8000718 <MX_FDCAN1_Init+0x84>)
 80006d0:	2202      	movs	r2, #2
 80006d2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80006d4:	4b10      	ldr	r3, [pc, #64]	; (8000718 <MX_FDCAN1_Init+0x84>)
 80006d6:	2202      	movs	r2, #2
 80006d8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80006da:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_FDCAN1_Init+0x84>)
 80006dc:	2201      	movs	r2, #1
 80006de:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80006e0:	4b0d      	ldr	r3, [pc, #52]	; (8000718 <MX_FDCAN1_Init+0x84>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_FDCAN1_Init+0x84>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80006ec:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <MX_FDCAN1_Init+0x84>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_FDCAN1_Init+0x84>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80006f8:	4b07      	ldr	r3, [pc, #28]	; (8000718 <MX_FDCAN1_Init+0x84>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_FDCAN1_Init+0x84>)
 8000700:	2200      	movs	r2, #0
 8000702:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000704:	4804      	ldr	r0, [pc, #16]	; (8000718 <MX_FDCAN1_Init+0x84>)
 8000706:	f000 fcbb 	bl	8001080 <HAL_FDCAN_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000710:	f000 f94a 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	2000002c 	.word	0x2000002c
 800071c:	40006400 	.word	0x40006400

08000720 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08e      	sub	sp, #56	; 0x38
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000726:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000734:	f107 031c 	add.w	r3, r7, #28
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000740:	463b      	mov	r3, r7
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]
 800074e:	615a      	str	r2, [r3, #20]
 8000750:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000752:	4b2c      	ldr	r3, [pc, #176]	; (8000804 <MX_TIM3_Init+0xe4>)
 8000754:	4a2c      	ldr	r2, [pc, #176]	; (8000808 <MX_TIM3_Init+0xe8>)
 8000756:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8000758:	4b2a      	ldr	r3, [pc, #168]	; (8000804 <MX_TIM3_Init+0xe4>)
 800075a:	224f      	movs	r2, #79	; 0x4f
 800075c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800075e:	4b29      	ldr	r3, [pc, #164]	; (8000804 <MX_TIM3_Init+0xe4>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000764:	4b27      	ldr	r3, [pc, #156]	; (8000804 <MX_TIM3_Init+0xe4>)
 8000766:	2263      	movs	r2, #99	; 0x63
 8000768:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800076a:	4b26      	ldr	r3, [pc, #152]	; (8000804 <MX_TIM3_Init+0xe4>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000770:	4b24      	ldr	r3, [pc, #144]	; (8000804 <MX_TIM3_Init+0xe4>)
 8000772:	2200      	movs	r2, #0
 8000774:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000776:	4823      	ldr	r0, [pc, #140]	; (8000804 <MX_TIM3_Init+0xe4>)
 8000778:	f002 f95a 	bl	8002a30 <HAL_TIM_Base_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000782:	f000 f911 	bl	80009a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800078c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000790:	4619      	mov	r1, r3
 8000792:	481c      	ldr	r0, [pc, #112]	; (8000804 <MX_TIM3_Init+0xe4>)
 8000794:	f002 fc18 	bl	8002fc8 <HAL_TIM_ConfigClockSource>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800079e:	f000 f903 	bl	80009a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007a2:	4818      	ldr	r0, [pc, #96]	; (8000804 <MX_TIM3_Init+0xe4>)
 80007a4:	f002 f99b 	bl	8002ade <HAL_TIM_PWM_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80007ae:	f000 f8fb 	bl	80009a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b6:	2300      	movs	r3, #0
 80007b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	4619      	mov	r1, r3
 80007c0:	4810      	ldr	r0, [pc, #64]	; (8000804 <MX_TIM3_Init+0xe4>)
 80007c2:	f003 f943 	bl	8003a4c <HAL_TIMEx_MasterConfigSynchronization>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80007cc:	f000 f8ec 	bl	80009a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007d0:	2360      	movs	r3, #96	; 0x60
 80007d2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007d8:	2300      	movs	r3, #0
 80007da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007dc:	2300      	movs	r3, #0
 80007de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007e0:	463b      	mov	r3, r7
 80007e2:	2204      	movs	r2, #4
 80007e4:	4619      	mov	r1, r3
 80007e6:	4807      	ldr	r0, [pc, #28]	; (8000804 <MX_TIM3_Init+0xe4>)
 80007e8:	f002 fada 	bl	8002da0 <HAL_TIM_PWM_ConfigChannel>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80007f2:	f000 f8d9 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80007f6:	4803      	ldr	r0, [pc, #12]	; (8000804 <MX_TIM3_Init+0xe4>)
 80007f8:	f000 f98a 	bl	8000b10 <HAL_TIM_MspPostInit>

}
 80007fc:	bf00      	nop
 80007fe:	3738      	adds	r7, #56	; 0x38
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000090 	.word	0x20000090
 8000808:	40000400 	.word	0x40000400

0800080c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000810:	4b22      	ldr	r3, [pc, #136]	; (800089c <MX_USART2_UART_Init+0x90>)
 8000812:	4a23      	ldr	r2, [pc, #140]	; (80008a0 <MX_USART2_UART_Init+0x94>)
 8000814:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000816:	4b21      	ldr	r3, [pc, #132]	; (800089c <MX_USART2_UART_Init+0x90>)
 8000818:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800081c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800081e:	4b1f      	ldr	r3, [pc, #124]	; (800089c <MX_USART2_UART_Init+0x90>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000824:	4b1d      	ldr	r3, [pc, #116]	; (800089c <MX_USART2_UART_Init+0x90>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800082a:	4b1c      	ldr	r3, [pc, #112]	; (800089c <MX_USART2_UART_Init+0x90>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000830:	4b1a      	ldr	r3, [pc, #104]	; (800089c <MX_USART2_UART_Init+0x90>)
 8000832:	220c      	movs	r2, #12
 8000834:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000836:	4b19      	ldr	r3, [pc, #100]	; (800089c <MX_USART2_UART_Init+0x90>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800083c:	4b17      	ldr	r3, [pc, #92]	; (800089c <MX_USART2_UART_Init+0x90>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000842:	4b16      	ldr	r3, [pc, #88]	; (800089c <MX_USART2_UART_Init+0x90>)
 8000844:	2200      	movs	r2, #0
 8000846:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <MX_USART2_UART_Init+0x90>)
 800084a:	2200      	movs	r2, #0
 800084c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800084e:	4b13      	ldr	r3, [pc, #76]	; (800089c <MX_USART2_UART_Init+0x90>)
 8000850:	2200      	movs	r2, #0
 8000852:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000854:	4811      	ldr	r0, [pc, #68]	; (800089c <MX_USART2_UART_Init+0x90>)
 8000856:	f003 f97b 	bl	8003b50 <HAL_UART_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000860:	f000 f8a2 	bl	80009a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000864:	2100      	movs	r1, #0
 8000866:	480d      	ldr	r0, [pc, #52]	; (800089c <MX_USART2_UART_Init+0x90>)
 8000868:	f003 fe7c 	bl	8004564 <HAL_UARTEx_SetTxFifoThreshold>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000872:	f000 f899 	bl	80009a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000876:	2100      	movs	r1, #0
 8000878:	4808      	ldr	r0, [pc, #32]	; (800089c <MX_USART2_UART_Init+0x90>)
 800087a:	f003 feb1 	bl	80045e0 <HAL_UARTEx_SetRxFifoThreshold>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000884:	f000 f890 	bl	80009a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000888:	4804      	ldr	r0, [pc, #16]	; (800089c <MX_USART2_UART_Init+0x90>)
 800088a:	f003 fe32 	bl	80044f2 <HAL_UARTEx_DisableFifoMode>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000894:	f000 f888 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}
 800089c:	200000dc 	.word	0x200000dc
 80008a0:	40004400 	.word	0x40004400

080008a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b088      	sub	sp, #32
 80008a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008aa:	f107 030c 	add.w	r3, r7, #12
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
 80008b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	4b39      	ldr	r3, [pc, #228]	; (80009a0 <MX_GPIO_Init+0xfc>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008be:	4a38      	ldr	r2, [pc, #224]	; (80009a0 <MX_GPIO_Init+0xfc>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c6:	4b36      	ldr	r3, [pc, #216]	; (80009a0 <MX_GPIO_Init+0xfc>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d2:	4b33      	ldr	r3, [pc, #204]	; (80009a0 <MX_GPIO_Init+0xfc>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d6:	4a32      	ldr	r2, [pc, #200]	; (80009a0 <MX_GPIO_Init+0xfc>)
 80008d8:	f043 0302 	orr.w	r3, r3, #2
 80008dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008de:	4b30      	ldr	r3, [pc, #192]	; (80009a0 <MX_GPIO_Init+0xfc>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e2:	f003 0302 	and.w	r3, r3, #2
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2140      	movs	r1, #64	; 0x40
 80008ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f2:	f001 f8a5 	bl	8001a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008fc:	4829      	ldr	r0, [pc, #164]	; (80009a4 <MX_GPIO_Init+0x100>)
 80008fe:	f001 f89f 	bl	8001a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000902:	2301      	movs	r3, #1
 8000904:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000906:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800090a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800090c:	2302      	movs	r3, #2
 800090e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000910:	f107 030c 	add.w	r3, r7, #12
 8000914:	4619      	mov	r1, r3
 8000916:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091a:	f000 ff0f 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800091e:	2302      	movs	r3, #2
 8000920:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000922:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000926:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092c:	f107 030c 	add.w	r3, r7, #12
 8000930:	4619      	mov	r1, r3
 8000932:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000936:	f000 ff01 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800093a:	2340      	movs	r3, #64	; 0x40
 800093c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093e:	2301      	movs	r3, #1
 8000940:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	4619      	mov	r1, r3
 8000950:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000954:	f000 fef2 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000958:	f44f 7380 	mov.w	r3, #256	; 0x100
 800095c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095e:	2301      	movs	r3, #1
 8000960:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 030c 	add.w	r3, r7, #12
 800096e:	4619      	mov	r1, r3
 8000970:	480c      	ldr	r0, [pc, #48]	; (80009a4 <MX_GPIO_Init+0x100>)
 8000972:	f000 fee3 	bl	800173c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8000976:	2200      	movs	r2, #0
 8000978:	2101      	movs	r1, #1
 800097a:	2006      	movs	r0, #6
 800097c:	f000 fb4b 	bl	8001016 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000980:	2006      	movs	r0, #6
 8000982:	f000 fb62 	bl	800104a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8000986:	2200      	movs	r2, #0
 8000988:	2101      	movs	r1, #1
 800098a:	2007      	movs	r0, #7
 800098c:	f000 fb43 	bl	8001016 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000990:	2007      	movs	r0, #7
 8000992:	f000 fb5a 	bl	800104a <HAL_NVIC_EnableIRQ>

}
 8000996:	bf00      	nop
 8000998:	3720      	adds	r7, #32
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40021000 	.word	0x40021000
 80009a4:	48000400 	.word	0x48000400

080009a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ac:	b672      	cpsid	i
}
 80009ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <Error_Handler+0x8>
	...

080009b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ba:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <HAL_MspInit+0x44>)
 80009bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009be:	4a0e      	ldr	r2, [pc, #56]	; (80009f8 <HAL_MspInit+0x44>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	6613      	str	r3, [r2, #96]	; 0x60
 80009c6:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <HAL_MspInit+0x44>)
 80009c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d2:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <HAL_MspInit+0x44>)
 80009d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d6:	4a08      	ldr	r2, [pc, #32]	; (80009f8 <HAL_MspInit+0x44>)
 80009d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009dc:	6593      	str	r3, [r2, #88]	; 0x58
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <HAL_MspInit+0x44>)
 80009e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	40021000 	.word	0x40021000

080009fc <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b09a      	sub	sp, #104	; 0x68
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a14:	f107 0310 	add.w	r3, r7, #16
 8000a18:	2244      	movs	r2, #68	; 0x44
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f003 fe8f 	bl	8004740 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a28      	ldr	r2, [pc, #160]	; (8000ac8 <HAL_FDCAN_MspInit+0xcc>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d149      	bne.n	8000ac0 <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000a2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a30:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000a32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a36:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a38:	f107 0310 	add.w	r3, r7, #16
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f001 fe07 	bl	8002650 <HAL_RCCEx_PeriphCLKConfig>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000a48:	f7ff ffae 	bl	80009a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000a4c:	4b1f      	ldr	r3, [pc, #124]	; (8000acc <HAL_FDCAN_MspInit+0xd0>)
 8000a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a50:	4a1e      	ldr	r2, [pc, #120]	; (8000acc <HAL_FDCAN_MspInit+0xd0>)
 8000a52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a56:	6593      	str	r3, [r2, #88]	; 0x58
 8000a58:	4b1c      	ldr	r3, [pc, #112]	; (8000acc <HAL_FDCAN_MspInit+0xd0>)
 8000a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a64:	4b19      	ldr	r3, [pc, #100]	; (8000acc <HAL_FDCAN_MspInit+0xd0>)
 8000a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a68:	4a18      	ldr	r2, [pc, #96]	; (8000acc <HAL_FDCAN_MspInit+0xd0>)
 8000a6a:	f043 0301 	orr.w	r3, r3, #1
 8000a6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a70:	4b16      	ldr	r3, [pc, #88]	; (8000acc <HAL_FDCAN_MspInit+0xd0>)
 8000a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a74:	f003 0301 	and.w	r3, r3, #1
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a7c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a80:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a82:	2302      	movs	r3, #2
 8000a84:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000a8e:	2309      	movs	r3, #9
 8000a90:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a92:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a96:	4619      	mov	r1, r3
 8000a98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a9c:	f000 fe4e 	bl	800173c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	2015      	movs	r0, #21
 8000aa6:	f000 fab6 	bl	8001016 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000aaa:	2015      	movs	r0, #21
 8000aac:	f000 facd 	bl	800104a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	2016      	movs	r0, #22
 8000ab6:	f000 faae 	bl	8001016 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000aba:	2016      	movs	r0, #22
 8000abc:	f000 fac5 	bl	800104a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000ac0:	bf00      	nop
 8000ac2:	3768      	adds	r7, #104	; 0x68
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40006400 	.word	0x40006400
 8000acc:	40021000 	.word	0x40021000

08000ad0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <HAL_TIM_Base_MspInit+0x38>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d10b      	bne.n	8000afa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <HAL_TIM_Base_MspInit+0x3c>)
 8000ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ae6:	4a09      	ldr	r2, [pc, #36]	; (8000b0c <HAL_TIM_Base_MspInit+0x3c>)
 8000ae8:	f043 0302 	orr.w	r3, r3, #2
 8000aec:	6593      	str	r3, [r2, #88]	; 0x58
 8000aee:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <HAL_TIM_Base_MspInit+0x3c>)
 8000af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000afa:	bf00      	nop
 8000afc:	3714      	adds	r7, #20
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	40000400 	.word	0x40000400
 8000b0c:	40021000 	.word	0x40021000

08000b10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b088      	sub	sp, #32
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 030c 	add.w	r3, r7, #12
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a11      	ldr	r2, [pc, #68]	; (8000b74 <HAL_TIM_MspPostInit+0x64>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d11c      	bne.n	8000b6c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <HAL_TIM_MspPostInit+0x68>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b36:	4a10      	ldr	r2, [pc, #64]	; (8000b78 <HAL_TIM_MspPostInit+0x68>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <HAL_TIM_MspPostInit+0x68>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	60bb      	str	r3, [r7, #8]
 8000b48:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b4a:	2380      	movs	r3, #128	; 0x80
 8000b4c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5e:	f107 030c 	add.w	r3, r7, #12
 8000b62:	4619      	mov	r1, r3
 8000b64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b68:	f000 fde8 	bl	800173c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000b6c:	bf00      	nop
 8000b6e:	3720      	adds	r7, #32
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40000400 	.word	0x40000400
 8000b78:	40021000 	.word	0x40021000

08000b7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b09a      	sub	sp, #104	; 0x68
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b94:	f107 0310 	add.w	r3, r7, #16
 8000b98:	2244      	movs	r2, #68	; 0x44
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f003 fdcf 	bl	8004740 <memset>
  if(huart->Instance==USART2)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a1f      	ldr	r2, [pc, #124]	; (8000c24 <HAL_UART_MspInit+0xa8>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d136      	bne.n	8000c1a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bac:	2302      	movs	r3, #2
 8000bae:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bb4:	f107 0310 	add.w	r3, r7, #16
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f001 fd49 	bl	8002650 <HAL_RCCEx_PeriphCLKConfig>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bc4:	f7ff fef0 	bl	80009a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bc8:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <HAL_UART_MspInit+0xac>)
 8000bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bcc:	4a16      	ldr	r2, [pc, #88]	; (8000c28 <HAL_UART_MspInit+0xac>)
 8000bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd2:	6593      	str	r3, [r2, #88]	; 0x58
 8000bd4:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <HAL_UART_MspInit+0xac>)
 8000bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be0:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <HAL_UART_MspInit+0xac>)
 8000be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be4:	4a10      	ldr	r2, [pc, #64]	; (8000c28 <HAL_UART_MspInit+0xac>)
 8000be6:	f043 0301 	orr.w	r3, r3, #1
 8000bea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bec:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <HAL_UART_MspInit+0xac>)
 8000bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf0:	f003 0301 	and.w	r3, r3, #1
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bf8:	230c      	movs	r3, #12
 8000bfa:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c04:	2300      	movs	r3, #0
 8000c06:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c08:	2307      	movs	r3, #7
 8000c0a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c10:	4619      	mov	r1, r3
 8000c12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c16:	f000 fd91 	bl	800173c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c1a:	bf00      	nop
 8000c1c:	3768      	adds	r7, #104	; 0x68
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40004400 	.word	0x40004400
 8000c28:	40021000 	.word	0x40021000

08000c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <NMI_Handler+0x4>

08000c32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <HardFault_Handler+0x4>

08000c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <MemManage_Handler+0x4>

08000c3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <BusFault_Handler+0x4>

08000c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <UsageFault_Handler+0x4>

08000c4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c78:	f000 f8b2 	bl	8000de0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000c84:	2001      	movs	r0, #1
 8000c86:	f000 fef3 	bl	8001a70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000c92:	2002      	movs	r0, #2
 8000c94:	f000 feec 	bl	8001a70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000ca0:	4802      	ldr	r0, [pc, #8]	; (8000cac <FDCAN1_IT0_IRQHandler+0x10>)
 8000ca2:	f000 fb47 	bl	8001334 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	2000002c 	.word	0x2000002c

08000cb0 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000cb4:	4802      	ldr	r0, [pc, #8]	; (8000cc0 <FDCAN1_IT1_IRQHandler+0x10>)
 8000cb6:	f000 fb3d 	bl	8001334 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	2000002c 	.word	0x2000002c

08000cc4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <SystemInit+0x20>)
 8000cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cce:	4a05      	ldr	r2, [pc, #20]	; (8000ce4 <SystemInit+0x20>)
 8000cd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ce8:	480d      	ldr	r0, [pc, #52]	; (8000d20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cec:	480d      	ldr	r0, [pc, #52]	; (8000d24 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cee:	490e      	ldr	r1, [pc, #56]	; (8000d28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cf0:	4a0e      	ldr	r2, [pc, #56]	; (8000d2c <LoopForever+0xe>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000cf4:	e002      	b.n	8000cfc <LoopCopyDataInit>

08000cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfa:	3304      	adds	r3, #4

08000cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d00:	d3f9      	bcc.n	8000cf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d02:	4a0b      	ldr	r2, [pc, #44]	; (8000d30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d04:	4c0b      	ldr	r4, [pc, #44]	; (8000d34 <LoopForever+0x16>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d08:	e001      	b.n	8000d0e <LoopFillZerobss>

08000d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d0c:	3204      	adds	r2, #4

08000d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d10:	d3fb      	bcc.n	8000d0a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d12:	f7ff ffd7 	bl	8000cc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d16:	f003 fcef 	bl	80046f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d1a:	f7ff fc3b 	bl	8000594 <main>

08000d1e <LoopForever>:

LoopForever:
    b LoopForever
 8000d1e:	e7fe      	b.n	8000d1e <LoopForever>
  ldr   r0, =_estack
 8000d20:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000d24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d28:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d2c:	080047b8 	.word	0x080047b8
  ldr r2, =_sbss
 8000d30:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d34:	20000170 	.word	0x20000170

08000d38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d38:	e7fe      	b.n	8000d38 <ADC1_2_IRQHandler>

08000d3a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d40:	2300      	movs	r3, #0
 8000d42:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d44:	2003      	movs	r0, #3
 8000d46:	f000 f95b 	bl	8001000 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f000 f80e 	bl	8000d6c <HAL_InitTick>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d002      	beq.n	8000d5c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	71fb      	strb	r3, [r7, #7]
 8000d5a:	e001      	b.n	8000d60 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d5c:	f7ff fe2a 	bl	80009b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d60:	79fb      	ldrb	r3, [r7, #7]

}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d74:	2300      	movs	r3, #0
 8000d76:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d78:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <HAL_InitTick+0x68>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d022      	beq.n	8000dc6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d80:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <HAL_InitTick+0x6c>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <HAL_InitTick+0x68>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d94:	4618      	mov	r0, r3
 8000d96:	f000 f966 	bl	8001066 <HAL_SYSTICK_Config>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d10f      	bne.n	8000dc0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b0f      	cmp	r3, #15
 8000da4:	d809      	bhi.n	8000dba <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da6:	2200      	movs	r2, #0
 8000da8:	6879      	ldr	r1, [r7, #4]
 8000daa:	f04f 30ff 	mov.w	r0, #4294967295
 8000dae:	f000 f932 	bl	8001016 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000db2:	4a0a      	ldr	r2, [pc, #40]	; (8000ddc <HAL_InitTick+0x70>)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6013      	str	r3, [r2, #0]
 8000db8:	e007      	b.n	8000dca <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	73fb      	strb	r3, [r7, #15]
 8000dbe:	e004      	b.n	8000dca <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	73fb      	strb	r3, [r7, #15]
 8000dc4:	e001      	b.n	8000dca <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	2000000c 	.word	0x2000000c
 8000dd8:	20000004 	.word	0x20000004
 8000ddc:	20000008 	.word	0x20000008

08000de0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de4:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <HAL_IncTick+0x1c>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <HAL_IncTick+0x20>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4413      	add	r3, r2
 8000dee:	4a03      	ldr	r2, [pc, #12]	; (8000dfc <HAL_IncTick+0x1c>)
 8000df0:	6013      	str	r3, [r2, #0]
}
 8000df2:	bf00      	nop
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	2000016c 	.word	0x2000016c
 8000e00:	2000000c 	.word	0x2000000c

08000e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return uwTick;
 8000e08:	4b03      	ldr	r3, [pc, #12]	; (8000e18 <HAL_GetTick+0x14>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	2000016c 	.word	0x2000016c

08000e1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e24:	f7ff ffee 	bl	8000e04 <HAL_GetTick>
 8000e28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e34:	d004      	beq.n	8000e40 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e36:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <HAL_Delay+0x40>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	68fa      	ldr	r2, [r7, #12]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e40:	bf00      	nop
 8000e42:	f7ff ffdf 	bl	8000e04 <HAL_GetTick>
 8000e46:	4602      	mov	r2, r0
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	68fa      	ldr	r2, [r7, #12]
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d8f7      	bhi.n	8000e42 <HAL_Delay+0x26>
  {
  }
}
 8000e52:	bf00      	nop
 8000e54:	bf00      	nop
 8000e56:	3710      	adds	r7, #16
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	2000000c 	.word	0x2000000c

08000e60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e76:	68ba      	ldr	r2, [r7, #8]
 8000e78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e92:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	60d3      	str	r3, [r2, #12]
}
 8000e98:	bf00      	nop
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	0a1b      	lsrs	r3, r3, #8
 8000eb2:	f003 0307 	and.w	r3, r3, #7
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	db0b      	blt.n	8000eee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	f003 021f 	and.w	r2, r3, #31
 8000edc:	4907      	ldr	r1, [pc, #28]	; (8000efc <__NVIC_EnableIRQ+0x38>)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	095b      	lsrs	r3, r3, #5
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e000e100 	.word	0xe000e100

08000f00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	6039      	str	r1, [r7, #0]
 8000f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	db0a      	blt.n	8000f2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	490c      	ldr	r1, [pc, #48]	; (8000f4c <__NVIC_SetPriority+0x4c>)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	0112      	lsls	r2, r2, #4
 8000f20:	b2d2      	uxtb	r2, r2
 8000f22:	440b      	add	r3, r1
 8000f24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f28:	e00a      	b.n	8000f40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	4908      	ldr	r1, [pc, #32]	; (8000f50 <__NVIC_SetPriority+0x50>)
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	f003 030f 	and.w	r3, r3, #15
 8000f36:	3b04      	subs	r3, #4
 8000f38:	0112      	lsls	r2, r2, #4
 8000f3a:	b2d2      	uxtb	r2, r2
 8000f3c:	440b      	add	r3, r1
 8000f3e:	761a      	strb	r2, [r3, #24]
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000e100 	.word	0xe000e100
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b089      	sub	sp, #36	; 0x24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	f1c3 0307 	rsb	r3, r3, #7
 8000f6e:	2b04      	cmp	r3, #4
 8000f70:	bf28      	it	cs
 8000f72:	2304      	movcs	r3, #4
 8000f74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3304      	adds	r3, #4
 8000f7a:	2b06      	cmp	r3, #6
 8000f7c:	d902      	bls.n	8000f84 <NVIC_EncodePriority+0x30>
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3b03      	subs	r3, #3
 8000f82:	e000      	b.n	8000f86 <NVIC_EncodePriority+0x32>
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f88:	f04f 32ff 	mov.w	r2, #4294967295
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43da      	mvns	r2, r3
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	401a      	ands	r2, r3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa6:	43d9      	mvns	r1, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fac:	4313      	orrs	r3, r2
         );
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3724      	adds	r7, #36	; 0x24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
	...

08000fbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fcc:	d301      	bcc.n	8000fd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e00f      	b.n	8000ff2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <SysTick_Config+0x40>)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fda:	210f      	movs	r1, #15
 8000fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe0:	f7ff ff8e 	bl	8000f00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe4:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <SysTick_Config+0x40>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fea:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <SysTick_Config+0x40>)
 8000fec:	2207      	movs	r2, #7
 8000fee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	e000e010 	.word	0xe000e010

08001000 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f7ff ff29 	bl	8000e60 <__NVIC_SetPriorityGrouping>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b086      	sub	sp, #24
 800101a:	af00      	add	r7, sp, #0
 800101c:	4603      	mov	r3, r0
 800101e:	60b9      	str	r1, [r7, #8]
 8001020:	607a      	str	r2, [r7, #4]
 8001022:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001024:	f7ff ff40 	bl	8000ea8 <__NVIC_GetPriorityGrouping>
 8001028:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	68b9      	ldr	r1, [r7, #8]
 800102e:	6978      	ldr	r0, [r7, #20]
 8001030:	f7ff ff90 	bl	8000f54 <NVIC_EncodePriority>
 8001034:	4602      	mov	r2, r0
 8001036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103a:	4611      	mov	r1, r2
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ff5f 	bl	8000f00 <__NVIC_SetPriority>
}
 8001042:	bf00      	nop
 8001044:	3718      	adds	r7, #24
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	4603      	mov	r3, r0
 8001052:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ff33 	bl	8000ec4 <__NVIC_EnableIRQ>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff ffa4 	bl	8000fbc <SysTick_Config>
 8001074:	4603      	mov	r3, r0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d101      	bne.n	8001092 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e147      	b.n	8001322 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b00      	cmp	r3, #0
 800109c:	d106      	bne.n	80010ac <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff fca8 	bl	80009fc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	699a      	ldr	r2, [r3, #24]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f022 0210 	bic.w	r2, r2, #16
 80010ba:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010bc:	f7ff fea2 	bl	8000e04 <HAL_GetTick>
 80010c0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80010c2:	e012      	b.n	80010ea <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80010c4:	f7ff fe9e 	bl	8000e04 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b0a      	cmp	r3, #10
 80010d0:	d90b      	bls.n	80010ea <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010d6:	f043 0201 	orr.w	r2, r3, #1
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2203      	movs	r2, #3
 80010e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e11b      	b.n	8001322 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	f003 0308 	and.w	r3, r3, #8
 80010f4:	2b08      	cmp	r3, #8
 80010f6:	d0e5      	beq.n	80010c4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	699a      	ldr	r2, [r3, #24]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f042 0201 	orr.w	r2, r2, #1
 8001106:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001108:	f7ff fe7c 	bl	8000e04 <HAL_GetTick>
 800110c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800110e:	e012      	b.n	8001136 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001110:	f7ff fe78 	bl	8000e04 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	2b0a      	cmp	r3, #10
 800111c:	d90b      	bls.n	8001136 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001122:	f043 0201 	orr.w	r2, r3, #1
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2203      	movs	r2, #3
 800112e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e0f5      	b.n	8001322 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	2b00      	cmp	r3, #0
 8001142:	d0e5      	beq.n	8001110 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	699a      	ldr	r2, [r3, #24]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f042 0202 	orr.w	r2, r2, #2
 8001152:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a74      	ldr	r2, [pc, #464]	; (800132c <HAL_FDCAN_Init+0x2ac>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d103      	bne.n	8001166 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800115e:	4a74      	ldr	r2, [pc, #464]	; (8001330 <HAL_FDCAN_Init+0x2b0>)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	7c1b      	ldrb	r3, [r3, #16]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d108      	bne.n	8001180 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	699a      	ldr	r2, [r3, #24]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800117c:	619a      	str	r2, [r3, #24]
 800117e:	e007      	b.n	8001190 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	699a      	ldr	r2, [r3, #24]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800118e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	7c5b      	ldrb	r3, [r3, #17]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d108      	bne.n	80011aa <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	699a      	ldr	r2, [r3, #24]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80011a6:	619a      	str	r2, [r3, #24]
 80011a8:	e007      	b.n	80011ba <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	699a      	ldr	r2, [r3, #24]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80011b8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	7c9b      	ldrb	r3, [r3, #18]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d108      	bne.n	80011d4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	699a      	ldr	r2, [r3, #24]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80011d0:	619a      	str	r2, [r3, #24]
 80011d2:	e007      	b.n	80011e4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	699a      	ldr	r2, [r3, #24]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80011e2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	689a      	ldr	r2, [r3, #8]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	430a      	orrs	r2, r1
 80011f8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	699a      	ldr	r2, [r3, #24]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001208:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	691a      	ldr	r2, [r3, #16]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f022 0210 	bic.w	r2, r2, #16
 8001218:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d108      	bne.n	8001234 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	699a      	ldr	r2, [r3, #24]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f042 0204 	orr.w	r2, r2, #4
 8001230:	619a      	str	r2, [r3, #24]
 8001232:	e02c      	b.n	800128e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d028      	beq.n	800128e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	2b02      	cmp	r3, #2
 8001242:	d01c      	beq.n	800127e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	699a      	ldr	r2, [r3, #24]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001252:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	691a      	ldr	r2, [r3, #16]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f042 0210 	orr.w	r2, r2, #16
 8001262:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	2b03      	cmp	r3, #3
 800126a:	d110      	bne.n	800128e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	699a      	ldr	r2, [r3, #24]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f042 0220 	orr.w	r2, r2, #32
 800127a:	619a      	str	r2, [r3, #24]
 800127c:	e007      	b.n	800128e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	699a      	ldr	r2, [r3, #24]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f042 0220 	orr.w	r2, r2, #32
 800128c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	3b01      	subs	r3, #1
 8001294:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	69db      	ldr	r3, [r3, #28]
 800129a:	3b01      	subs	r3, #1
 800129c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800129e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a1b      	ldr	r3, [r3, #32]
 80012a4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80012a6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80012b6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012b8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80012c2:	d115      	bne.n	80012f0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ce:	3b01      	subs	r3, #1
 80012d0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012d2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d8:	3b01      	subs	r3, #1
 80012da:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80012dc:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e4:	3b01      	subs	r3, #1
 80012e6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80012ec:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012ee:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	430a      	orrs	r2, r1
 8001302:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f000 f9c2 	bl	8001690 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2201      	movs	r2, #1
 800131c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40006400 	.word	0x40006400
 8001330:	40006500 	.word	0x40006500

08001334 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08a      	sub	sp, #40	; 0x28
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001342:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001346:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800134e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001350:	4013      	ands	r3, r2
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001366:	6a3a      	ldr	r2, [r7, #32]
 8001368:	4013      	ands	r3, r2
 800136a:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001372:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001376:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800137e:	69fa      	ldr	r2, [r7, #28]
 8001380:	4013      	ands	r3, r2
 8001382:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800138a:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 800138e:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013a2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80013a6:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ae:	697a      	ldr	r2, [r7, #20]
 80013b0:	4013      	ands	r3, r2
 80013b2:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d00d      	beq.n	80013de <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d006      	beq.n	80013de <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2240      	movs	r2, #64	; 0x40
 80013d6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f000 f939 	bl	8001650 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d01b      	beq.n	8001424 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d014      	beq.n	8001424 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001402:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	4013      	ands	r3, r2
 8001410:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f44f 7280 	mov.w	r2, #256	; 0x100
 800141a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800141c:	6939      	ldr	r1, [r7, #16]
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f000 f8f7 	bl	8001612 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001426:	2b00      	cmp	r3, #0
 8001428:	d007      	beq.n	800143a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001430:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001432:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f000 f8b6 	bl	80015a6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800143a:	6a3b      	ldr	r3, [r7, #32]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d007      	beq.n	8001450 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6a3a      	ldr	r2, [r7, #32]
 8001446:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001448:	6a39      	ldr	r1, [r7, #32]
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f000 f8b6 	bl	80015bc <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d007      	beq.n	8001466 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	69fa      	ldr	r2, [r7, #28]
 800145c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800145e:	69f9      	ldr	r1, [r7, #28]
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f000 f8b6 	bl	80015d2 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800146c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001470:	2b00      	cmp	r3, #0
 8001472:	d00e      	beq.n	8001492 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800147a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800147e:	2b00      	cmp	r3, #0
 8001480:	d007      	beq.n	8001492 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f44f 7200 	mov.w	r2, #512	; 0x200
 800148a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f000 f8ab 	bl	80015e8 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800149c:	2b00      	cmp	r3, #0
 800149e:	d01a      	beq.n	80014d6 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d013      	beq.n	80014d6 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80014b6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80014c0:	68fa      	ldr	r2, [r7, #12]
 80014c2:	4013      	ands	r3, r2
 80014c4:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2280      	movs	r2, #128	; 0x80
 80014cc:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80014ce:	68f9      	ldr	r1, [r7, #12]
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f000 f893 	bl	80015fc <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d00e      	beq.n	8001502 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d007      	beq.n	8001502 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014fa:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f000 f893 	bl	8001628 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001508:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d00e      	beq.n	800152e <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001516:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d007      	beq.n	800152e <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001526:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f000 f887 	bl	800163c <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001534:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d011      	beq.n	8001560 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001542:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d00a      	beq.n	8001560 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001552:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001558:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d007      	beq.n	8001576 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	697a      	ldr	r2, [r7, #20]
 800156c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800156e:	6979      	ldr	r1, [r7, #20]
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f000 f881 	bl	8001678 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d009      	beq.n	8001590 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	431a      	orrs	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001594:	2b00      	cmp	r3, #0
 8001596:	d002      	beq.n	800159e <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f000 f863 	bl	8001664 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800159e:	bf00      	nop
 80015a0:	3728      	adds	r7, #40	; 0x28
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
 80015ae:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
 80015da:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
 800161a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
	...

08001690 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001698:	4b27      	ldr	r3, [pc, #156]	; (8001738 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800169a:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016aa:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016b2:	041a      	lsls	r2, r3, #16
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	430a      	orrs	r2, r1
 80016ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016d0:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016d8:	061a      	lsls	r2, r3, #24
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	430a      	orrs	r2, r1
 80016e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	e005      	b.n	800171e <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	3304      	adds	r3, #4
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001724:	68fa      	ldr	r2, [r7, #12]
 8001726:	429a      	cmp	r2, r3
 8001728:	d3f3      	bcc.n	8001712 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800172a:	bf00      	nop
 800172c:	bf00      	nop
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	4000a400 	.word	0x4000a400

0800173c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800173c:	b480      	push	{r7}
 800173e:	b087      	sub	sp, #28
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800174a:	e15a      	b.n	8001a02 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	2101      	movs	r1, #1
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	fa01 f303 	lsl.w	r3, r1, r3
 8001758:	4013      	ands	r3, r2
 800175a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 814c 	beq.w	80019fc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 0303 	and.w	r3, r3, #3
 800176c:	2b01      	cmp	r3, #1
 800176e:	d005      	beq.n	800177c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001778:	2b02      	cmp	r3, #2
 800177a:	d130      	bne.n	80017de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	2203      	movs	r2, #3
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	4013      	ands	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	68da      	ldr	r2, [r3, #12]
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017b2:	2201      	movs	r2, #1
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43db      	mvns	r3, r3
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	4013      	ands	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	091b      	lsrs	r3, r3, #4
 80017c8:	f003 0201 	and.w	r2, r3, #1
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f003 0303 	and.w	r3, r3, #3
 80017e6:	2b03      	cmp	r3, #3
 80017e8:	d017      	beq.n	800181a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	2203      	movs	r2, #3
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43db      	mvns	r3, r3
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	4013      	ands	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	689a      	ldr	r2, [r3, #8]
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	4313      	orrs	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 0303 	and.w	r3, r3, #3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d123      	bne.n	800186e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	08da      	lsrs	r2, r3, #3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3208      	adds	r2, #8
 800182e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001832:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	220f      	movs	r2, #15
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	4013      	ands	r3, r2
 8001848:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	691a      	ldr	r2, [r3, #16]
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4313      	orrs	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	08da      	lsrs	r2, r3, #3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3208      	adds	r2, #8
 8001868:	6939      	ldr	r1, [r7, #16]
 800186a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	2203      	movs	r2, #3
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43db      	mvns	r3, r3
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	4013      	ands	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f003 0203 	and.w	r2, r3, #3
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f000 80a6 	beq.w	80019fc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b0:	4b5b      	ldr	r3, [pc, #364]	; (8001a20 <HAL_GPIO_Init+0x2e4>)
 80018b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018b4:	4a5a      	ldr	r2, [pc, #360]	; (8001a20 <HAL_GPIO_Init+0x2e4>)
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	6613      	str	r3, [r2, #96]	; 0x60
 80018bc:	4b58      	ldr	r3, [pc, #352]	; (8001a20 <HAL_GPIO_Init+0x2e4>)
 80018be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018c8:	4a56      	ldr	r2, [pc, #344]	; (8001a24 <HAL_GPIO_Init+0x2e8>)
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	089b      	lsrs	r3, r3, #2
 80018ce:	3302      	adds	r3, #2
 80018d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	f003 0303 	and.w	r3, r3, #3
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	220f      	movs	r2, #15
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	4013      	ands	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018f2:	d01f      	beq.n	8001934 <HAL_GPIO_Init+0x1f8>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a4c      	ldr	r2, [pc, #304]	; (8001a28 <HAL_GPIO_Init+0x2ec>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d019      	beq.n	8001930 <HAL_GPIO_Init+0x1f4>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a4b      	ldr	r2, [pc, #300]	; (8001a2c <HAL_GPIO_Init+0x2f0>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d013      	beq.n	800192c <HAL_GPIO_Init+0x1f0>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a4a      	ldr	r2, [pc, #296]	; (8001a30 <HAL_GPIO_Init+0x2f4>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d00d      	beq.n	8001928 <HAL_GPIO_Init+0x1ec>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a49      	ldr	r2, [pc, #292]	; (8001a34 <HAL_GPIO_Init+0x2f8>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d007      	beq.n	8001924 <HAL_GPIO_Init+0x1e8>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a48      	ldr	r2, [pc, #288]	; (8001a38 <HAL_GPIO_Init+0x2fc>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d101      	bne.n	8001920 <HAL_GPIO_Init+0x1e4>
 800191c:	2305      	movs	r3, #5
 800191e:	e00a      	b.n	8001936 <HAL_GPIO_Init+0x1fa>
 8001920:	2306      	movs	r3, #6
 8001922:	e008      	b.n	8001936 <HAL_GPIO_Init+0x1fa>
 8001924:	2304      	movs	r3, #4
 8001926:	e006      	b.n	8001936 <HAL_GPIO_Init+0x1fa>
 8001928:	2303      	movs	r3, #3
 800192a:	e004      	b.n	8001936 <HAL_GPIO_Init+0x1fa>
 800192c:	2302      	movs	r3, #2
 800192e:	e002      	b.n	8001936 <HAL_GPIO_Init+0x1fa>
 8001930:	2301      	movs	r3, #1
 8001932:	e000      	b.n	8001936 <HAL_GPIO_Init+0x1fa>
 8001934:	2300      	movs	r3, #0
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	f002 0203 	and.w	r2, r2, #3
 800193c:	0092      	lsls	r2, r2, #2
 800193e:	4093      	lsls	r3, r2
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	4313      	orrs	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001946:	4937      	ldr	r1, [pc, #220]	; (8001a24 <HAL_GPIO_Init+0x2e8>)
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	089b      	lsrs	r3, r3, #2
 800194c:	3302      	adds	r3, #2
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001954:	4b39      	ldr	r3, [pc, #228]	; (8001a3c <HAL_GPIO_Init+0x300>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	43db      	mvns	r3, r3
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	4013      	ands	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d003      	beq.n	8001978 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	4313      	orrs	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001978:	4a30      	ldr	r2, [pc, #192]	; (8001a3c <HAL_GPIO_Init+0x300>)
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800197e:	4b2f      	ldr	r3, [pc, #188]	; (8001a3c <HAL_GPIO_Init+0x300>)
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	43db      	mvns	r3, r3
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	4013      	ands	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	4313      	orrs	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019a2:	4a26      	ldr	r2, [pc, #152]	; (8001a3c <HAL_GPIO_Init+0x300>)
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80019a8:	4b24      	ldr	r3, [pc, #144]	; (8001a3c <HAL_GPIO_Init+0x300>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	43db      	mvns	r3, r3
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	4013      	ands	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019cc:	4a1b      	ldr	r2, [pc, #108]	; (8001a3c <HAL_GPIO_Init+0x300>)
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019d2:	4b1a      	ldr	r3, [pc, #104]	; (8001a3c <HAL_GPIO_Init+0x300>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	43db      	mvns	r3, r3
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	4013      	ands	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019f6:	4a11      	ldr	r2, [pc, #68]	; (8001a3c <HAL_GPIO_Init+0x300>)
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	3301      	adds	r3, #1
 8001a00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	fa22 f303 	lsr.w	r3, r2, r3
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f47f ae9d 	bne.w	800174c <HAL_GPIO_Init+0x10>
  }
}
 8001a12:	bf00      	nop
 8001a14:	bf00      	nop
 8001a16:	371c      	adds	r7, #28
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	40021000 	.word	0x40021000
 8001a24:	40010000 	.word	0x40010000
 8001a28:	48000400 	.word	0x48000400
 8001a2c:	48000800 	.word	0x48000800
 8001a30:	48000c00 	.word	0x48000c00
 8001a34:	48001000 	.word	0x48001000
 8001a38:	48001400 	.word	0x48001400
 8001a3c:	40010400 	.word	0x40010400

08001a40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	807b      	strh	r3, [r7, #2]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a50:	787b      	ldrb	r3, [r7, #1]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d003      	beq.n	8001a5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a56:	887a      	ldrh	r2, [r7, #2]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a5c:	e002      	b.n	8001a64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a5e:	887a      	ldrh	r2, [r7, #2]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a7a:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a7c:	695a      	ldr	r2, [r3, #20]
 8001a7e:	88fb      	ldrh	r3, [r7, #6]
 8001a80:	4013      	ands	r3, r2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d006      	beq.n	8001a94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a86:	4a05      	ldr	r2, [pc, #20]	; (8001a9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a88:	88fb      	ldrh	r3, [r7, #6]
 8001a8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a8c:	88fb      	ldrh	r3, [r7, #6]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe fd44 	bl	800051c <HAL_GPIO_EXTI_Callback>
  }
}
 8001a94:	bf00      	nop
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40010400 	.word	0x40010400

08001aa0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d141      	bne.n	8001b32 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001aae:	4b4b      	ldr	r3, [pc, #300]	; (8001bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aba:	d131      	bne.n	8001b20 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001abc:	4b47      	ldr	r3, [pc, #284]	; (8001bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ac2:	4a46      	ldr	r2, [pc, #280]	; (8001bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ac8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001acc:	4b43      	ldr	r3, [pc, #268]	; (8001bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ad4:	4a41      	ldr	r2, [pc, #260]	; (8001bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ada:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001adc:	4b40      	ldr	r3, [pc, #256]	; (8001be0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2232      	movs	r2, #50	; 0x32
 8001ae2:	fb02 f303 	mul.w	r3, r2, r3
 8001ae6:	4a3f      	ldr	r2, [pc, #252]	; (8001be4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8001aec:	0c9b      	lsrs	r3, r3, #18
 8001aee:	3301      	adds	r3, #1
 8001af0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001af2:	e002      	b.n	8001afa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001afa:	4b38      	ldr	r3, [pc, #224]	; (8001bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b06:	d102      	bne.n	8001b0e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1f2      	bne.n	8001af4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b0e:	4b33      	ldr	r3, [pc, #204]	; (8001bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b1a:	d158      	bne.n	8001bce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e057      	b.n	8001bd0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b20:	4b2e      	ldr	r3, [pc, #184]	; (8001bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b26:	4a2d      	ldr	r2, [pc, #180]	; (8001bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b30:	e04d      	b.n	8001bce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b38:	d141      	bne.n	8001bbe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b3a:	4b28      	ldr	r3, [pc, #160]	; (8001bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b46:	d131      	bne.n	8001bac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b48:	4b24      	ldr	r3, [pc, #144]	; (8001bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b4e:	4a23      	ldr	r2, [pc, #140]	; (8001bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b58:	4b20      	ldr	r3, [pc, #128]	; (8001bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b60:	4a1e      	ldr	r2, [pc, #120]	; (8001bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b68:	4b1d      	ldr	r3, [pc, #116]	; (8001be0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2232      	movs	r2, #50	; 0x32
 8001b6e:	fb02 f303 	mul.w	r3, r2, r3
 8001b72:	4a1c      	ldr	r2, [pc, #112]	; (8001be4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b74:	fba2 2303 	umull	r2, r3, r2, r3
 8001b78:	0c9b      	lsrs	r3, r3, #18
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b7e:	e002      	b.n	8001b86 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b86:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b92:	d102      	bne.n	8001b9a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1f2      	bne.n	8001b80 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b9a:	4b10      	ldr	r3, [pc, #64]	; (8001bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ba6:	d112      	bne.n	8001bce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e011      	b.n	8001bd0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bac:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bb2:	4a0a      	ldr	r2, [pc, #40]	; (8001bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001bbc:	e007      	b.n	8001bce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bbe:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bc6:	4a05      	ldr	r2, [pc, #20]	; (8001bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bcc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	40007000 	.word	0x40007000
 8001be0:	20000004 	.word	0x20000004
 8001be4:	431bde83 	.word	0x431bde83

08001be8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b088      	sub	sp, #32
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e306      	b.n	8002208 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d075      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c06:	4b97      	ldr	r3, [pc, #604]	; (8001e64 <HAL_RCC_OscConfig+0x27c>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 030c 	and.w	r3, r3, #12
 8001c0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c10:	4b94      	ldr	r3, [pc, #592]	; (8001e64 <HAL_RCC_OscConfig+0x27c>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	f003 0303 	and.w	r3, r3, #3
 8001c18:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	2b0c      	cmp	r3, #12
 8001c1e:	d102      	bne.n	8001c26 <HAL_RCC_OscConfig+0x3e>
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	2b03      	cmp	r3, #3
 8001c24:	d002      	beq.n	8001c2c <HAL_RCC_OscConfig+0x44>
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	2b08      	cmp	r3, #8
 8001c2a:	d10b      	bne.n	8001c44 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c2c:	4b8d      	ldr	r3, [pc, #564]	; (8001e64 <HAL_RCC_OscConfig+0x27c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d05b      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x108>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d157      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e2e1      	b.n	8002208 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c4c:	d106      	bne.n	8001c5c <HAL_RCC_OscConfig+0x74>
 8001c4e:	4b85      	ldr	r3, [pc, #532]	; (8001e64 <HAL_RCC_OscConfig+0x27c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a84      	ldr	r2, [pc, #528]	; (8001e64 <HAL_RCC_OscConfig+0x27c>)
 8001c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	e01d      	b.n	8001c98 <HAL_RCC_OscConfig+0xb0>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c64:	d10c      	bne.n	8001c80 <HAL_RCC_OscConfig+0x98>
 8001c66:	4b7f      	ldr	r3, [pc, #508]	; (8001e64 <HAL_RCC_OscConfig+0x27c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a7e      	ldr	r2, [pc, #504]	; (8001e64 <HAL_RCC_OscConfig+0x27c>)
 8001c6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	4b7c      	ldr	r3, [pc, #496]	; (8001e64 <HAL_RCC_OscConfig+0x27c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a7b      	ldr	r2, [pc, #492]	; (8001e64 <HAL_RCC_OscConfig+0x27c>)
 8001c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c7c:	6013      	str	r3, [r2, #0]
 8001c7e:	e00b      	b.n	8001c98 <HAL_RCC_OscConfig+0xb0>
 8001c80:	4b78      	ldr	r3, [pc, #480]	; (8001e64 <HAL_RCC_OscConfig+0x27c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a77      	ldr	r2, [pc, #476]	; (8001e64 <HAL_RCC_OscConfig+0x27c>)
 8001c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c8a:	6013      	str	r3, [r2, #0]
 8001c8c:	4b75      	ldr	r3, [pc, #468]	; (8001e64 <HAL_RCC_OscConfig+0x27c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a74      	ldr	r2, [pc, #464]	; (8001e64 <HAL_RCC_OscConfig+0x27c>)
 8001c92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d013      	beq.n	8001cc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca0:	f7ff f8b0 	bl	8000e04 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca8:	f7ff f8ac 	bl	8000e04 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b64      	cmp	r3, #100	; 0x64
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e2a6      	b.n	8002208 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cba:	4b6a      	ldr	r3, [pc, #424]	; (8001e64 <HAL_RCC_OscConfig+0x27c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0f0      	beq.n	8001ca8 <HAL_RCC_OscConfig+0xc0>
 8001cc6:	e014      	b.n	8001cf2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc8:	f7ff f89c 	bl	8000e04 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cd0:	f7ff f898 	bl	8000e04 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b64      	cmp	r3, #100	; 0x64
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e292      	b.n	8002208 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ce2:	4b60      	ldr	r3, [pc, #384]	; (8001e64 <HAL_RCC_OscConfig+0x27c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f0      	bne.n	8001cd0 <HAL_RCC_OscConfig+0xe8>
 8001cee:	e000      	b.n	8001cf2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d075      	beq.n	8001dea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cfe:	4b59      	ldr	r3, [pc, #356]	; (8001e64 <HAL_RCC_OscConfig+0x27c>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 030c 	and.w	r3, r3, #12
 8001d06:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d08:	4b56      	ldr	r3, [pc, #344]	; (8001e64 <HAL_RCC_OscConfig+0x27c>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	f003 0303 	and.w	r3, r3, #3
 8001d10:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	2b0c      	cmp	r3, #12
 8001d16:	d102      	bne.n	8001d1e <HAL_RCC_OscConfig+0x136>
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d002      	beq.n	8001d24 <HAL_RCC_OscConfig+0x13c>
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	2b04      	cmp	r3, #4
 8001d22:	d11f      	bne.n	8001d64 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d24:	4b4f      	ldr	r3, [pc, #316]	; (8001e64 <HAL_RCC_OscConfig+0x27c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d005      	beq.n	8001d3c <HAL_RCC_OscConfig+0x154>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d101      	bne.n	8001d3c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e265      	b.n	8002208 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d3c:	4b49      	ldr	r3, [pc, #292]	; (8001e64 <HAL_RCC_OscConfig+0x27c>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	061b      	lsls	r3, r3, #24
 8001d4a:	4946      	ldr	r1, [pc, #280]	; (8001e64 <HAL_RCC_OscConfig+0x27c>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d50:	4b45      	ldr	r3, [pc, #276]	; (8001e68 <HAL_RCC_OscConfig+0x280>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff f809 	bl	8000d6c <HAL_InitTick>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d043      	beq.n	8001de8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e251      	b.n	8002208 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d023      	beq.n	8001db4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d6c:	4b3d      	ldr	r3, [pc, #244]	; (8001e64 <HAL_RCC_OscConfig+0x27c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a3c      	ldr	r2, [pc, #240]	; (8001e64 <HAL_RCC_OscConfig+0x27c>)
 8001d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d78:	f7ff f844 	bl	8000e04 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d80:	f7ff f840 	bl	8000e04 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e23a      	b.n	8002208 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d92:	4b34      	ldr	r3, [pc, #208]	; (8001e64 <HAL_RCC_OscConfig+0x27c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0f0      	beq.n	8001d80 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9e:	4b31      	ldr	r3, [pc, #196]	; (8001e64 <HAL_RCC_OscConfig+0x27c>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	061b      	lsls	r3, r3, #24
 8001dac:	492d      	ldr	r1, [pc, #180]	; (8001e64 <HAL_RCC_OscConfig+0x27c>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	604b      	str	r3, [r1, #4]
 8001db2:	e01a      	b.n	8001dea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001db4:	4b2b      	ldr	r3, [pc, #172]	; (8001e64 <HAL_RCC_OscConfig+0x27c>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a2a      	ldr	r2, [pc, #168]	; (8001e64 <HAL_RCC_OscConfig+0x27c>)
 8001dba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001dbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc0:	f7ff f820 	bl	8000e04 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc8:	f7ff f81c 	bl	8000e04 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e216      	b.n	8002208 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dda:	4b22      	ldr	r3, [pc, #136]	; (8001e64 <HAL_RCC_OscConfig+0x27c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f0      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x1e0>
 8001de6:	e000      	b.n	8001dea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001de8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0308 	and.w	r3, r3, #8
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d041      	beq.n	8001e7a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d01c      	beq.n	8001e38 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dfe:	4b19      	ldr	r3, [pc, #100]	; (8001e64 <HAL_RCC_OscConfig+0x27c>)
 8001e00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e04:	4a17      	ldr	r2, [pc, #92]	; (8001e64 <HAL_RCC_OscConfig+0x27c>)
 8001e06:	f043 0301 	orr.w	r3, r3, #1
 8001e0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e0e:	f7fe fff9 	bl	8000e04 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e16:	f7fe fff5 	bl	8000e04 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e1ef      	b.n	8002208 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e28:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <HAL_RCC_OscConfig+0x27c>)
 8001e2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0ef      	beq.n	8001e16 <HAL_RCC_OscConfig+0x22e>
 8001e36:	e020      	b.n	8001e7a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e38:	4b0a      	ldr	r3, [pc, #40]	; (8001e64 <HAL_RCC_OscConfig+0x27c>)
 8001e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e3e:	4a09      	ldr	r2, [pc, #36]	; (8001e64 <HAL_RCC_OscConfig+0x27c>)
 8001e40:	f023 0301 	bic.w	r3, r3, #1
 8001e44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e48:	f7fe ffdc 	bl	8000e04 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e4e:	e00d      	b.n	8001e6c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e50:	f7fe ffd8 	bl	8000e04 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d906      	bls.n	8001e6c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e1d2      	b.n	8002208 <HAL_RCC_OscConfig+0x620>
 8001e62:	bf00      	nop
 8001e64:	40021000 	.word	0x40021000
 8001e68:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e6c:	4b8c      	ldr	r3, [pc, #560]	; (80020a0 <HAL_RCC_OscConfig+0x4b8>)
 8001e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1ea      	bne.n	8001e50 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0304 	and.w	r3, r3, #4
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f000 80a6 	beq.w	8001fd4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e8c:	4b84      	ldr	r3, [pc, #528]	; (80020a0 <HAL_RCC_OscConfig+0x4b8>)
 8001e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_RCC_OscConfig+0x2b4>
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e000      	b.n	8001e9e <HAL_RCC_OscConfig+0x2b6>
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00d      	beq.n	8001ebe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ea2:	4b7f      	ldr	r3, [pc, #508]	; (80020a0 <HAL_RCC_OscConfig+0x4b8>)
 8001ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea6:	4a7e      	ldr	r2, [pc, #504]	; (80020a0 <HAL_RCC_OscConfig+0x4b8>)
 8001ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eac:	6593      	str	r3, [r2, #88]	; 0x58
 8001eae:	4b7c      	ldr	r3, [pc, #496]	; (80020a0 <HAL_RCC_OscConfig+0x4b8>)
 8001eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ebe:	4b79      	ldr	r3, [pc, #484]	; (80020a4 <HAL_RCC_OscConfig+0x4bc>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d118      	bne.n	8001efc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001eca:	4b76      	ldr	r3, [pc, #472]	; (80020a4 <HAL_RCC_OscConfig+0x4bc>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a75      	ldr	r2, [pc, #468]	; (80020a4 <HAL_RCC_OscConfig+0x4bc>)
 8001ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ed6:	f7fe ff95 	bl	8000e04 <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ede:	f7fe ff91 	bl	8000e04 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e18b      	b.n	8002208 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ef0:	4b6c      	ldr	r3, [pc, #432]	; (80020a4 <HAL_RCC_OscConfig+0x4bc>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d0f0      	beq.n	8001ede <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d108      	bne.n	8001f16 <HAL_RCC_OscConfig+0x32e>
 8001f04:	4b66      	ldr	r3, [pc, #408]	; (80020a0 <HAL_RCC_OscConfig+0x4b8>)
 8001f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f0a:	4a65      	ldr	r2, [pc, #404]	; (80020a0 <HAL_RCC_OscConfig+0x4b8>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f14:	e024      	b.n	8001f60 <HAL_RCC_OscConfig+0x378>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	2b05      	cmp	r3, #5
 8001f1c:	d110      	bne.n	8001f40 <HAL_RCC_OscConfig+0x358>
 8001f1e:	4b60      	ldr	r3, [pc, #384]	; (80020a0 <HAL_RCC_OscConfig+0x4b8>)
 8001f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f24:	4a5e      	ldr	r2, [pc, #376]	; (80020a0 <HAL_RCC_OscConfig+0x4b8>)
 8001f26:	f043 0304 	orr.w	r3, r3, #4
 8001f2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f2e:	4b5c      	ldr	r3, [pc, #368]	; (80020a0 <HAL_RCC_OscConfig+0x4b8>)
 8001f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f34:	4a5a      	ldr	r2, [pc, #360]	; (80020a0 <HAL_RCC_OscConfig+0x4b8>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f3e:	e00f      	b.n	8001f60 <HAL_RCC_OscConfig+0x378>
 8001f40:	4b57      	ldr	r3, [pc, #348]	; (80020a0 <HAL_RCC_OscConfig+0x4b8>)
 8001f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f46:	4a56      	ldr	r2, [pc, #344]	; (80020a0 <HAL_RCC_OscConfig+0x4b8>)
 8001f48:	f023 0301 	bic.w	r3, r3, #1
 8001f4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f50:	4b53      	ldr	r3, [pc, #332]	; (80020a0 <HAL_RCC_OscConfig+0x4b8>)
 8001f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f56:	4a52      	ldr	r2, [pc, #328]	; (80020a0 <HAL_RCC_OscConfig+0x4b8>)
 8001f58:	f023 0304 	bic.w	r3, r3, #4
 8001f5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d016      	beq.n	8001f96 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f68:	f7fe ff4c 	bl	8000e04 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f6e:	e00a      	b.n	8001f86 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f70:	f7fe ff48 	bl	8000e04 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e140      	b.n	8002208 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f86:	4b46      	ldr	r3, [pc, #280]	; (80020a0 <HAL_RCC_OscConfig+0x4b8>)
 8001f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0ed      	beq.n	8001f70 <HAL_RCC_OscConfig+0x388>
 8001f94:	e015      	b.n	8001fc2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f96:	f7fe ff35 	bl	8000e04 <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f9c:	e00a      	b.n	8001fb4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f9e:	f7fe ff31 	bl	8000e04 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e129      	b.n	8002208 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fb4:	4b3a      	ldr	r3, [pc, #232]	; (80020a0 <HAL_RCC_OscConfig+0x4b8>)
 8001fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1ed      	bne.n	8001f9e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001fc2:	7ffb      	ldrb	r3, [r7, #31]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d105      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fc8:	4b35      	ldr	r3, [pc, #212]	; (80020a0 <HAL_RCC_OscConfig+0x4b8>)
 8001fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fcc:	4a34      	ldr	r2, [pc, #208]	; (80020a0 <HAL_RCC_OscConfig+0x4b8>)
 8001fce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fd2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0320 	and.w	r3, r3, #32
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d03c      	beq.n	800205a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d01c      	beq.n	8002022 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001fe8:	4b2d      	ldr	r3, [pc, #180]	; (80020a0 <HAL_RCC_OscConfig+0x4b8>)
 8001fea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fee:	4a2c      	ldr	r2, [pc, #176]	; (80020a0 <HAL_RCC_OscConfig+0x4b8>)
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff8:	f7fe ff04 	bl	8000e04 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002000:	f7fe ff00 	bl	8000e04 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e0fa      	b.n	8002208 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002012:	4b23      	ldr	r3, [pc, #140]	; (80020a0 <HAL_RCC_OscConfig+0x4b8>)
 8002014:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0ef      	beq.n	8002000 <HAL_RCC_OscConfig+0x418>
 8002020:	e01b      	b.n	800205a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002022:	4b1f      	ldr	r3, [pc, #124]	; (80020a0 <HAL_RCC_OscConfig+0x4b8>)
 8002024:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002028:	4a1d      	ldr	r2, [pc, #116]	; (80020a0 <HAL_RCC_OscConfig+0x4b8>)
 800202a:	f023 0301 	bic.w	r3, r3, #1
 800202e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002032:	f7fe fee7 	bl	8000e04 <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800203a:	f7fe fee3 	bl	8000e04 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e0dd      	b.n	8002208 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800204c:	4b14      	ldr	r3, [pc, #80]	; (80020a0 <HAL_RCC_OscConfig+0x4b8>)
 800204e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1ef      	bne.n	800203a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 80d1 	beq.w	8002206 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002064:	4b0e      	ldr	r3, [pc, #56]	; (80020a0 <HAL_RCC_OscConfig+0x4b8>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f003 030c 	and.w	r3, r3, #12
 800206c:	2b0c      	cmp	r3, #12
 800206e:	f000 808b 	beq.w	8002188 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	2b02      	cmp	r3, #2
 8002078:	d15e      	bne.n	8002138 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800207a:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <HAL_RCC_OscConfig+0x4b8>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a08      	ldr	r2, [pc, #32]	; (80020a0 <HAL_RCC_OscConfig+0x4b8>)
 8002080:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002084:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002086:	f7fe febd 	bl	8000e04 <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800208c:	e00c      	b.n	80020a8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800208e:	f7fe feb9 	bl	8000e04 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d905      	bls.n	80020a8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e0b3      	b.n	8002208 <HAL_RCC_OscConfig+0x620>
 80020a0:	40021000 	.word	0x40021000
 80020a4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020a8:	4b59      	ldr	r3, [pc, #356]	; (8002210 <HAL_RCC_OscConfig+0x628>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1ec      	bne.n	800208e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020b4:	4b56      	ldr	r3, [pc, #344]	; (8002210 <HAL_RCC_OscConfig+0x628>)
 80020b6:	68da      	ldr	r2, [r3, #12]
 80020b8:	4b56      	ldr	r3, [pc, #344]	; (8002214 <HAL_RCC_OscConfig+0x62c>)
 80020ba:	4013      	ands	r3, r2
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	6a11      	ldr	r1, [r2, #32]
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020c4:	3a01      	subs	r2, #1
 80020c6:	0112      	lsls	r2, r2, #4
 80020c8:	4311      	orrs	r1, r2
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80020ce:	0212      	lsls	r2, r2, #8
 80020d0:	4311      	orrs	r1, r2
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80020d6:	0852      	lsrs	r2, r2, #1
 80020d8:	3a01      	subs	r2, #1
 80020da:	0552      	lsls	r2, r2, #21
 80020dc:	4311      	orrs	r1, r2
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80020e2:	0852      	lsrs	r2, r2, #1
 80020e4:	3a01      	subs	r2, #1
 80020e6:	0652      	lsls	r2, r2, #25
 80020e8:	4311      	orrs	r1, r2
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80020ee:	06d2      	lsls	r2, r2, #27
 80020f0:	430a      	orrs	r2, r1
 80020f2:	4947      	ldr	r1, [pc, #284]	; (8002210 <HAL_RCC_OscConfig+0x628>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020f8:	4b45      	ldr	r3, [pc, #276]	; (8002210 <HAL_RCC_OscConfig+0x628>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a44      	ldr	r2, [pc, #272]	; (8002210 <HAL_RCC_OscConfig+0x628>)
 80020fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002102:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002104:	4b42      	ldr	r3, [pc, #264]	; (8002210 <HAL_RCC_OscConfig+0x628>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	4a41      	ldr	r2, [pc, #260]	; (8002210 <HAL_RCC_OscConfig+0x628>)
 800210a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800210e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002110:	f7fe fe78 	bl	8000e04 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002118:	f7fe fe74 	bl	8000e04 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e06e      	b.n	8002208 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800212a:	4b39      	ldr	r3, [pc, #228]	; (8002210 <HAL_RCC_OscConfig+0x628>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d0f0      	beq.n	8002118 <HAL_RCC_OscConfig+0x530>
 8002136:	e066      	b.n	8002206 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002138:	4b35      	ldr	r3, [pc, #212]	; (8002210 <HAL_RCC_OscConfig+0x628>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a34      	ldr	r2, [pc, #208]	; (8002210 <HAL_RCC_OscConfig+0x628>)
 800213e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002142:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002144:	4b32      	ldr	r3, [pc, #200]	; (8002210 <HAL_RCC_OscConfig+0x628>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	4a31      	ldr	r2, [pc, #196]	; (8002210 <HAL_RCC_OscConfig+0x628>)
 800214a:	f023 0303 	bic.w	r3, r3, #3
 800214e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002150:	4b2f      	ldr	r3, [pc, #188]	; (8002210 <HAL_RCC_OscConfig+0x628>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	4a2e      	ldr	r2, [pc, #184]	; (8002210 <HAL_RCC_OscConfig+0x628>)
 8002156:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800215a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800215e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002160:	f7fe fe50 	bl	8000e04 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002168:	f7fe fe4c 	bl	8000e04 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e046      	b.n	8002208 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800217a:	4b25      	ldr	r3, [pc, #148]	; (8002210 <HAL_RCC_OscConfig+0x628>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1f0      	bne.n	8002168 <HAL_RCC_OscConfig+0x580>
 8002186:	e03e      	b.n	8002206 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d101      	bne.n	8002194 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e039      	b.n	8002208 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002194:	4b1e      	ldr	r3, [pc, #120]	; (8002210 <HAL_RCC_OscConfig+0x628>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	f003 0203 	and.w	r2, r3, #3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a1b      	ldr	r3, [r3, #32]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d12c      	bne.n	8002202 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b2:	3b01      	subs	r3, #1
 80021b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d123      	bne.n	8002202 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d11b      	bne.n	8002202 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d113      	bne.n	8002202 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e4:	085b      	lsrs	r3, r3, #1
 80021e6:	3b01      	subs	r3, #1
 80021e8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d109      	bne.n	8002202 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f8:	085b      	lsrs	r3, r3, #1
 80021fa:	3b01      	subs	r3, #1
 80021fc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021fe:	429a      	cmp	r2, r3
 8002200:	d001      	beq.n	8002206 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e000      	b.n	8002208 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3720      	adds	r7, #32
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40021000 	.word	0x40021000
 8002214:	019f800c 	.word	0x019f800c

08002218 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002222:	2300      	movs	r3, #0
 8002224:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e11e      	b.n	800246e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002230:	4b91      	ldr	r3, [pc, #580]	; (8002478 <HAL_RCC_ClockConfig+0x260>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 030f 	and.w	r3, r3, #15
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	429a      	cmp	r2, r3
 800223c:	d910      	bls.n	8002260 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223e:	4b8e      	ldr	r3, [pc, #568]	; (8002478 <HAL_RCC_ClockConfig+0x260>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f023 020f 	bic.w	r2, r3, #15
 8002246:	498c      	ldr	r1, [pc, #560]	; (8002478 <HAL_RCC_ClockConfig+0x260>)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	4313      	orrs	r3, r2
 800224c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800224e:	4b8a      	ldr	r3, [pc, #552]	; (8002478 <HAL_RCC_ClockConfig+0x260>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	429a      	cmp	r2, r3
 800225a:	d001      	beq.n	8002260 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e106      	b.n	800246e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	2b00      	cmp	r3, #0
 800226a:	d073      	beq.n	8002354 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b03      	cmp	r3, #3
 8002272:	d129      	bne.n	80022c8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002274:	4b81      	ldr	r3, [pc, #516]	; (800247c <HAL_RCC_ClockConfig+0x264>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d101      	bne.n	8002284 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e0f4      	b.n	800246e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002284:	f000 f99e 	bl	80025c4 <RCC_GetSysClockFreqFromPLLSource>
 8002288:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	4a7c      	ldr	r2, [pc, #496]	; (8002480 <HAL_RCC_ClockConfig+0x268>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d93f      	bls.n	8002312 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002292:	4b7a      	ldr	r3, [pc, #488]	; (800247c <HAL_RCC_ClockConfig+0x264>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d009      	beq.n	80022b2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d033      	beq.n	8002312 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d12f      	bne.n	8002312 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80022b2:	4b72      	ldr	r3, [pc, #456]	; (800247c <HAL_RCC_ClockConfig+0x264>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022ba:	4a70      	ldr	r2, [pc, #448]	; (800247c <HAL_RCC_ClockConfig+0x264>)
 80022bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022c0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80022c2:	2380      	movs	r3, #128	; 0x80
 80022c4:	617b      	str	r3, [r7, #20]
 80022c6:	e024      	b.n	8002312 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d107      	bne.n	80022e0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022d0:	4b6a      	ldr	r3, [pc, #424]	; (800247c <HAL_RCC_ClockConfig+0x264>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d109      	bne.n	80022f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e0c6      	b.n	800246e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022e0:	4b66      	ldr	r3, [pc, #408]	; (800247c <HAL_RCC_ClockConfig+0x264>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e0be      	b.n	800246e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80022f0:	f000 f8ce 	bl	8002490 <HAL_RCC_GetSysClockFreq>
 80022f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	4a61      	ldr	r2, [pc, #388]	; (8002480 <HAL_RCC_ClockConfig+0x268>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d909      	bls.n	8002312 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80022fe:	4b5f      	ldr	r3, [pc, #380]	; (800247c <HAL_RCC_ClockConfig+0x264>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002306:	4a5d      	ldr	r2, [pc, #372]	; (800247c <HAL_RCC_ClockConfig+0x264>)
 8002308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800230c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800230e:	2380      	movs	r3, #128	; 0x80
 8002310:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002312:	4b5a      	ldr	r3, [pc, #360]	; (800247c <HAL_RCC_ClockConfig+0x264>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f023 0203 	bic.w	r2, r3, #3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	4957      	ldr	r1, [pc, #348]	; (800247c <HAL_RCC_ClockConfig+0x264>)
 8002320:	4313      	orrs	r3, r2
 8002322:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002324:	f7fe fd6e 	bl	8000e04 <HAL_GetTick>
 8002328:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232a:	e00a      	b.n	8002342 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800232c:	f7fe fd6a 	bl	8000e04 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	f241 3288 	movw	r2, #5000	; 0x1388
 800233a:	4293      	cmp	r3, r2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e095      	b.n	800246e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002342:	4b4e      	ldr	r3, [pc, #312]	; (800247c <HAL_RCC_ClockConfig+0x264>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 020c 	and.w	r2, r3, #12
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	429a      	cmp	r2, r3
 8002352:	d1eb      	bne.n	800232c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d023      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b00      	cmp	r3, #0
 800236a:	d005      	beq.n	8002378 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800236c:	4b43      	ldr	r3, [pc, #268]	; (800247c <HAL_RCC_ClockConfig+0x264>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	4a42      	ldr	r2, [pc, #264]	; (800247c <HAL_RCC_ClockConfig+0x264>)
 8002372:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002376:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0308 	and.w	r3, r3, #8
 8002380:	2b00      	cmp	r3, #0
 8002382:	d007      	beq.n	8002394 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002384:	4b3d      	ldr	r3, [pc, #244]	; (800247c <HAL_RCC_ClockConfig+0x264>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800238c:	4a3b      	ldr	r2, [pc, #236]	; (800247c <HAL_RCC_ClockConfig+0x264>)
 800238e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002392:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002394:	4b39      	ldr	r3, [pc, #228]	; (800247c <HAL_RCC_ClockConfig+0x264>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	4936      	ldr	r1, [pc, #216]	; (800247c <HAL_RCC_ClockConfig+0x264>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	608b      	str	r3, [r1, #8]
 80023a6:	e008      	b.n	80023ba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	2b80      	cmp	r3, #128	; 0x80
 80023ac:	d105      	bne.n	80023ba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80023ae:	4b33      	ldr	r3, [pc, #204]	; (800247c <HAL_RCC_ClockConfig+0x264>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	4a32      	ldr	r2, [pc, #200]	; (800247c <HAL_RCC_ClockConfig+0x264>)
 80023b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023b8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023ba:	4b2f      	ldr	r3, [pc, #188]	; (8002478 <HAL_RCC_ClockConfig+0x260>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d21d      	bcs.n	8002404 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c8:	4b2b      	ldr	r3, [pc, #172]	; (8002478 <HAL_RCC_ClockConfig+0x260>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f023 020f 	bic.w	r2, r3, #15
 80023d0:	4929      	ldr	r1, [pc, #164]	; (8002478 <HAL_RCC_ClockConfig+0x260>)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023d8:	f7fe fd14 	bl	8000e04 <HAL_GetTick>
 80023dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023de:	e00a      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e0:	f7fe fd10 	bl	8000e04 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e03b      	b.n	800246e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f6:	4b20      	ldr	r3, [pc, #128]	; (8002478 <HAL_RCC_ClockConfig+0x260>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 030f 	and.w	r3, r3, #15
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	429a      	cmp	r2, r3
 8002402:	d1ed      	bne.n	80023e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	2b00      	cmp	r3, #0
 800240e:	d008      	beq.n	8002422 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002410:	4b1a      	ldr	r3, [pc, #104]	; (800247c <HAL_RCC_ClockConfig+0x264>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	4917      	ldr	r1, [pc, #92]	; (800247c <HAL_RCC_ClockConfig+0x264>)
 800241e:	4313      	orrs	r3, r2
 8002420:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b00      	cmp	r3, #0
 800242c:	d009      	beq.n	8002442 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800242e:	4b13      	ldr	r3, [pc, #76]	; (800247c <HAL_RCC_ClockConfig+0x264>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	490f      	ldr	r1, [pc, #60]	; (800247c <HAL_RCC_ClockConfig+0x264>)
 800243e:	4313      	orrs	r3, r2
 8002440:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002442:	f000 f825 	bl	8002490 <HAL_RCC_GetSysClockFreq>
 8002446:	4602      	mov	r2, r0
 8002448:	4b0c      	ldr	r3, [pc, #48]	; (800247c <HAL_RCC_ClockConfig+0x264>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	091b      	lsrs	r3, r3, #4
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	490c      	ldr	r1, [pc, #48]	; (8002484 <HAL_RCC_ClockConfig+0x26c>)
 8002454:	5ccb      	ldrb	r3, [r1, r3]
 8002456:	f003 031f 	and.w	r3, r3, #31
 800245a:	fa22 f303 	lsr.w	r3, r2, r3
 800245e:	4a0a      	ldr	r2, [pc, #40]	; (8002488 <HAL_RCC_ClockConfig+0x270>)
 8002460:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002462:	4b0a      	ldr	r3, [pc, #40]	; (800248c <HAL_RCC_ClockConfig+0x274>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f7fe fc80 	bl	8000d6c <HAL_InitTick>
 800246c:	4603      	mov	r3, r0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3718      	adds	r7, #24
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40022000 	.word	0x40022000
 800247c:	40021000 	.word	0x40021000
 8002480:	04c4b400 	.word	0x04c4b400
 8002484:	08004768 	.word	0x08004768
 8002488:	20000004 	.word	0x20000004
 800248c:	20000008 	.word	0x20000008

08002490 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002490:	b480      	push	{r7}
 8002492:	b087      	sub	sp, #28
 8002494:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002496:	4b2c      	ldr	r3, [pc, #176]	; (8002548 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 030c 	and.w	r3, r3, #12
 800249e:	2b04      	cmp	r3, #4
 80024a0:	d102      	bne.n	80024a8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024a2:	4b2a      	ldr	r3, [pc, #168]	; (800254c <HAL_RCC_GetSysClockFreq+0xbc>)
 80024a4:	613b      	str	r3, [r7, #16]
 80024a6:	e047      	b.n	8002538 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80024a8:	4b27      	ldr	r3, [pc, #156]	; (8002548 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f003 030c 	and.w	r3, r3, #12
 80024b0:	2b08      	cmp	r3, #8
 80024b2:	d102      	bne.n	80024ba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024b4:	4b26      	ldr	r3, [pc, #152]	; (8002550 <HAL_RCC_GetSysClockFreq+0xc0>)
 80024b6:	613b      	str	r3, [r7, #16]
 80024b8:	e03e      	b.n	8002538 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80024ba:	4b23      	ldr	r3, [pc, #140]	; (8002548 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 030c 	and.w	r3, r3, #12
 80024c2:	2b0c      	cmp	r3, #12
 80024c4:	d136      	bne.n	8002534 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024c6:	4b20      	ldr	r3, [pc, #128]	; (8002548 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	f003 0303 	and.w	r3, r3, #3
 80024ce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024d0:	4b1d      	ldr	r3, [pc, #116]	; (8002548 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	091b      	lsrs	r3, r3, #4
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	3301      	adds	r3, #1
 80024dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2b03      	cmp	r3, #3
 80024e2:	d10c      	bne.n	80024fe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024e4:	4a1a      	ldr	r2, [pc, #104]	; (8002550 <HAL_RCC_GetSysClockFreq+0xc0>)
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ec:	4a16      	ldr	r2, [pc, #88]	; (8002548 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024ee:	68d2      	ldr	r2, [r2, #12]
 80024f0:	0a12      	lsrs	r2, r2, #8
 80024f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80024f6:	fb02 f303 	mul.w	r3, r2, r3
 80024fa:	617b      	str	r3, [r7, #20]
      break;
 80024fc:	e00c      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024fe:	4a13      	ldr	r2, [pc, #76]	; (800254c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	fbb2 f3f3 	udiv	r3, r2, r3
 8002506:	4a10      	ldr	r2, [pc, #64]	; (8002548 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002508:	68d2      	ldr	r2, [r2, #12]
 800250a:	0a12      	lsrs	r2, r2, #8
 800250c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002510:	fb02 f303 	mul.w	r3, r2, r3
 8002514:	617b      	str	r3, [r7, #20]
      break;
 8002516:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002518:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <HAL_RCC_GetSysClockFreq+0xb8>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	0e5b      	lsrs	r3, r3, #25
 800251e:	f003 0303 	and.w	r3, r3, #3
 8002522:	3301      	adds	r3, #1
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002530:	613b      	str	r3, [r7, #16]
 8002532:	e001      	b.n	8002538 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002534:	2300      	movs	r3, #0
 8002536:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002538:	693b      	ldr	r3, [r7, #16]
}
 800253a:	4618      	mov	r0, r3
 800253c:	371c      	adds	r7, #28
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	40021000 	.word	0x40021000
 800254c:	00f42400 	.word	0x00f42400
 8002550:	007a1200 	.word	0x007a1200

08002554 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002558:	4b03      	ldr	r3, [pc, #12]	; (8002568 <HAL_RCC_GetHCLKFreq+0x14>)
 800255a:	681b      	ldr	r3, [r3, #0]
}
 800255c:	4618      	mov	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	20000004 	.word	0x20000004

0800256c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002570:	f7ff fff0 	bl	8002554 <HAL_RCC_GetHCLKFreq>
 8002574:	4602      	mov	r2, r0
 8002576:	4b06      	ldr	r3, [pc, #24]	; (8002590 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	0a1b      	lsrs	r3, r3, #8
 800257c:	f003 0307 	and.w	r3, r3, #7
 8002580:	4904      	ldr	r1, [pc, #16]	; (8002594 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002582:	5ccb      	ldrb	r3, [r1, r3]
 8002584:	f003 031f 	and.w	r3, r3, #31
 8002588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800258c:	4618      	mov	r0, r3
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40021000 	.word	0x40021000
 8002594:	08004778 	.word	0x08004778

08002598 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800259c:	f7ff ffda 	bl	8002554 <HAL_RCC_GetHCLKFreq>
 80025a0:	4602      	mov	r2, r0
 80025a2:	4b06      	ldr	r3, [pc, #24]	; (80025bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	0adb      	lsrs	r3, r3, #11
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	4904      	ldr	r1, [pc, #16]	; (80025c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025ae:	5ccb      	ldrb	r3, [r1, r3]
 80025b0:	f003 031f 	and.w	r3, r3, #31
 80025b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40021000 	.word	0x40021000
 80025c0:	08004778 	.word	0x08004778

080025c4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b087      	sub	sp, #28
 80025c8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025ca:	4b1e      	ldr	r3, [pc, #120]	; (8002644 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025d4:	4b1b      	ldr	r3, [pc, #108]	; (8002644 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	091b      	lsrs	r3, r3, #4
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	3301      	adds	r3, #1
 80025e0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	2b03      	cmp	r3, #3
 80025e6:	d10c      	bne.n	8002602 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025e8:	4a17      	ldr	r2, [pc, #92]	; (8002648 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f0:	4a14      	ldr	r2, [pc, #80]	; (8002644 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025f2:	68d2      	ldr	r2, [r2, #12]
 80025f4:	0a12      	lsrs	r2, r2, #8
 80025f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025fa:	fb02 f303 	mul.w	r3, r2, r3
 80025fe:	617b      	str	r3, [r7, #20]
    break;
 8002600:	e00c      	b.n	800261c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002602:	4a12      	ldr	r2, [pc, #72]	; (800264c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	fbb2 f3f3 	udiv	r3, r2, r3
 800260a:	4a0e      	ldr	r2, [pc, #56]	; (8002644 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800260c:	68d2      	ldr	r2, [r2, #12]
 800260e:	0a12      	lsrs	r2, r2, #8
 8002610:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002614:	fb02 f303 	mul.w	r3, r2, r3
 8002618:	617b      	str	r3, [r7, #20]
    break;
 800261a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800261c:	4b09      	ldr	r3, [pc, #36]	; (8002644 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	0e5b      	lsrs	r3, r3, #25
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	3301      	adds	r3, #1
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	fbb2 f3f3 	udiv	r3, r2, r3
 8002634:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002636:	687b      	ldr	r3, [r7, #4]
}
 8002638:	4618      	mov	r0, r3
 800263a:	371c      	adds	r7, #28
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	40021000 	.word	0x40021000
 8002648:	007a1200 	.word	0x007a1200
 800264c:	00f42400 	.word	0x00f42400

08002650 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002658:	2300      	movs	r3, #0
 800265a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800265c:	2300      	movs	r3, #0
 800265e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002668:	2b00      	cmp	r3, #0
 800266a:	f000 8098 	beq.w	800279e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800266e:	2300      	movs	r3, #0
 8002670:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002672:	4b43      	ldr	r3, [pc, #268]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10d      	bne.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800267e:	4b40      	ldr	r3, [pc, #256]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002682:	4a3f      	ldr	r2, [pc, #252]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002688:	6593      	str	r3, [r2, #88]	; 0x58
 800268a:	4b3d      	ldr	r3, [pc, #244]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800268c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002692:	60bb      	str	r3, [r7, #8]
 8002694:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002696:	2301      	movs	r3, #1
 8002698:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800269a:	4b3a      	ldr	r3, [pc, #232]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a39      	ldr	r2, [pc, #228]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80026a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026a6:	f7fe fbad 	bl	8000e04 <HAL_GetTick>
 80026aa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026ac:	e009      	b.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ae:	f7fe fba9 	bl	8000e04 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d902      	bls.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	74fb      	strb	r3, [r7, #19]
        break;
 80026c0:	e005      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026c2:	4b30      	ldr	r3, [pc, #192]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0ef      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80026ce:	7cfb      	ldrb	r3, [r7, #19]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d159      	bne.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026d4:	4b2a      	ldr	r3, [pc, #168]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026de:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d01e      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d019      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026f0:	4b23      	ldr	r3, [pc, #140]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026fc:	4b20      	ldr	r3, [pc, #128]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002702:	4a1f      	ldr	r2, [pc, #124]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002708:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800270c:	4b1c      	ldr	r3, [pc, #112]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800270e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002712:	4a1b      	ldr	r2, [pc, #108]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002714:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002718:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800271c:	4a18      	ldr	r2, [pc, #96]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d016      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272e:	f7fe fb69 	bl	8000e04 <HAL_GetTick>
 8002732:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002734:	e00b      	b.n	800274e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002736:	f7fe fb65 	bl	8000e04 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	f241 3288 	movw	r2, #5000	; 0x1388
 8002744:	4293      	cmp	r3, r2
 8002746:	d902      	bls.n	800274e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	74fb      	strb	r3, [r7, #19]
            break;
 800274c:	e006      	b.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800274e:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0ec      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800275c:	7cfb      	ldrb	r3, [r7, #19]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10b      	bne.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002762:	4b07      	ldr	r3, [pc, #28]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002768:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002770:	4903      	ldr	r1, [pc, #12]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002772:	4313      	orrs	r3, r2
 8002774:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002778:	e008      	b.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800277a:	7cfb      	ldrb	r3, [r7, #19]
 800277c:	74bb      	strb	r3, [r7, #18]
 800277e:	e005      	b.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002780:	40021000 	.word	0x40021000
 8002784:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002788:	7cfb      	ldrb	r3, [r7, #19]
 800278a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800278c:	7c7b      	ldrb	r3, [r7, #17]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d105      	bne.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002792:	4ba6      	ldr	r3, [pc, #664]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002796:	4aa5      	ldr	r2, [pc, #660]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002798:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800279c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00a      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027aa:	4ba0      	ldr	r3, [pc, #640]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b0:	f023 0203 	bic.w	r2, r3, #3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	499c      	ldr	r1, [pc, #624]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00a      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027cc:	4b97      	ldr	r3, [pc, #604]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d2:	f023 020c 	bic.w	r2, r3, #12
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	4994      	ldr	r1, [pc, #592]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0304 	and.w	r3, r3, #4
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00a      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027ee:	4b8f      	ldr	r3, [pc, #572]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	498b      	ldr	r1, [pc, #556]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0308 	and.w	r3, r3, #8
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00a      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002810:	4b86      	ldr	r3, [pc, #536]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002816:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	4983      	ldr	r1, [pc, #524]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002820:	4313      	orrs	r3, r2
 8002822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0320 	and.w	r3, r3, #32
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00a      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002832:	4b7e      	ldr	r3, [pc, #504]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002838:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	497a      	ldr	r1, [pc, #488]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002842:	4313      	orrs	r3, r2
 8002844:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00a      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002854:	4b75      	ldr	r3, [pc, #468]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	4972      	ldr	r1, [pc, #456]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002864:	4313      	orrs	r3, r2
 8002866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00a      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002876:	4b6d      	ldr	r3, [pc, #436]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800287c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	69db      	ldr	r3, [r3, #28]
 8002884:	4969      	ldr	r1, [pc, #420]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002886:	4313      	orrs	r3, r2
 8002888:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00a      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002898:	4b64      	ldr	r3, [pc, #400]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800289a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	4961      	ldr	r1, [pc, #388]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00a      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028ba:	4b5c      	ldr	r3, [pc, #368]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	4958      	ldr	r1, [pc, #352]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d015      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028dc:	4b53      	ldr	r3, [pc, #332]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ea:	4950      	ldr	r1, [pc, #320]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028fa:	d105      	bne.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028fc:	4b4b      	ldr	r3, [pc, #300]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	4a4a      	ldr	r2, [pc, #296]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002902:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002906:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002910:	2b00      	cmp	r3, #0
 8002912:	d015      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002914:	4b45      	ldr	r3, [pc, #276]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800291a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002922:	4942      	ldr	r1, [pc, #264]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002924:	4313      	orrs	r3, r2
 8002926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002932:	d105      	bne.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002934:	4b3d      	ldr	r3, [pc, #244]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	4a3c      	ldr	r2, [pc, #240]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800293a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800293e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d015      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800294c:	4b37      	ldr	r3, [pc, #220]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800294e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002952:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	4934      	ldr	r1, [pc, #208]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800295c:	4313      	orrs	r3, r2
 800295e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800296a:	d105      	bne.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800296c:	4b2f      	ldr	r3, [pc, #188]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	4a2e      	ldr	r2, [pc, #184]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002972:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002976:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d015      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002984:	4b29      	ldr	r3, [pc, #164]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002992:	4926      	ldr	r1, [pc, #152]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002994:	4313      	orrs	r3, r2
 8002996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800299e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029a2:	d105      	bne.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029a4:	4b21      	ldr	r3, [pc, #132]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	4a20      	ldr	r2, [pc, #128]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029ae:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d015      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029bc:	4b1b      	ldr	r3, [pc, #108]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ca:	4918      	ldr	r1, [pc, #96]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029da:	d105      	bne.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029dc:	4b13      	ldr	r3, [pc, #76]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	4a12      	ldr	r2, [pc, #72]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029e6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d015      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80029f4:	4b0d      	ldr	r3, [pc, #52]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a02:	490a      	ldr	r1, [pc, #40]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a12:	d105      	bne.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002a14:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	4a04      	ldr	r2, [pc, #16]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a1e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002a20:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3718      	adds	r7, #24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40021000 	.word	0x40021000

08002a30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e049      	b.n	8002ad6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d106      	bne.n	8002a5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7fe f83a 	bl	8000ad0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3304      	adds	r3, #4
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4610      	mov	r0, r2
 8002a70:	f000 fba4 	bl	80031bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b082      	sub	sp, #8
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e049      	b.n	8002b84 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d106      	bne.n	8002b0a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 f841 	bl	8002b8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2202      	movs	r2, #2
 8002b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	3304      	adds	r3, #4
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4610      	mov	r0, r2
 8002b1e:	f000 fb4d 	bl	80031bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d109      	bne.n	8002bc4 <HAL_TIM_PWM_Start+0x24>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	bf14      	ite	ne
 8002bbc:	2301      	movne	r3, #1
 8002bbe:	2300      	moveq	r3, #0
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	e03c      	b.n	8002c3e <HAL_TIM_PWM_Start+0x9e>
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d109      	bne.n	8002bde <HAL_TIM_PWM_Start+0x3e>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	bf14      	ite	ne
 8002bd6:	2301      	movne	r3, #1
 8002bd8:	2300      	moveq	r3, #0
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	e02f      	b.n	8002c3e <HAL_TIM_PWM_Start+0x9e>
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d109      	bne.n	8002bf8 <HAL_TIM_PWM_Start+0x58>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	bf14      	ite	ne
 8002bf0:	2301      	movne	r3, #1
 8002bf2:	2300      	moveq	r3, #0
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	e022      	b.n	8002c3e <HAL_TIM_PWM_Start+0x9e>
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	2b0c      	cmp	r3, #12
 8002bfc:	d109      	bne.n	8002c12 <HAL_TIM_PWM_Start+0x72>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	bf14      	ite	ne
 8002c0a:	2301      	movne	r3, #1
 8002c0c:	2300      	moveq	r3, #0
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	e015      	b.n	8002c3e <HAL_TIM_PWM_Start+0x9e>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	2b10      	cmp	r3, #16
 8002c16:	d109      	bne.n	8002c2c <HAL_TIM_PWM_Start+0x8c>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	bf14      	ite	ne
 8002c24:	2301      	movne	r3, #1
 8002c26:	2300      	moveq	r3, #0
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	e008      	b.n	8002c3e <HAL_TIM_PWM_Start+0x9e>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	bf14      	ite	ne
 8002c38:	2301      	movne	r3, #1
 8002c3a:	2300      	moveq	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e097      	b.n	8002d76 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d104      	bne.n	8002c56 <HAL_TIM_PWM_Start+0xb6>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2202      	movs	r2, #2
 8002c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c54:	e023      	b.n	8002c9e <HAL_TIM_PWM_Start+0xfe>
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	2b04      	cmp	r3, #4
 8002c5a:	d104      	bne.n	8002c66 <HAL_TIM_PWM_Start+0xc6>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2202      	movs	r2, #2
 8002c60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c64:	e01b      	b.n	8002c9e <HAL_TIM_PWM_Start+0xfe>
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	2b08      	cmp	r3, #8
 8002c6a:	d104      	bne.n	8002c76 <HAL_TIM_PWM_Start+0xd6>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2202      	movs	r2, #2
 8002c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c74:	e013      	b.n	8002c9e <HAL_TIM_PWM_Start+0xfe>
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	2b0c      	cmp	r3, #12
 8002c7a:	d104      	bne.n	8002c86 <HAL_TIM_PWM_Start+0xe6>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2202      	movs	r2, #2
 8002c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c84:	e00b      	b.n	8002c9e <HAL_TIM_PWM_Start+0xfe>
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	2b10      	cmp	r3, #16
 8002c8a:	d104      	bne.n	8002c96 <HAL_TIM_PWM_Start+0xf6>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c94:	e003      	b.n	8002c9e <HAL_TIM_PWM_Start+0xfe>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2202      	movs	r2, #2
 8002c9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	6839      	ldr	r1, [r7, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f000 feaa 	bl	8003a00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a33      	ldr	r2, [pc, #204]	; (8002d80 <HAL_TIM_PWM_Start+0x1e0>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d013      	beq.n	8002cde <HAL_TIM_PWM_Start+0x13e>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a32      	ldr	r2, [pc, #200]	; (8002d84 <HAL_TIM_PWM_Start+0x1e4>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d00e      	beq.n	8002cde <HAL_TIM_PWM_Start+0x13e>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a30      	ldr	r2, [pc, #192]	; (8002d88 <HAL_TIM_PWM_Start+0x1e8>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d009      	beq.n	8002cde <HAL_TIM_PWM_Start+0x13e>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a2f      	ldr	r2, [pc, #188]	; (8002d8c <HAL_TIM_PWM_Start+0x1ec>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d004      	beq.n	8002cde <HAL_TIM_PWM_Start+0x13e>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a2d      	ldr	r2, [pc, #180]	; (8002d90 <HAL_TIM_PWM_Start+0x1f0>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d101      	bne.n	8002ce2 <HAL_TIM_PWM_Start+0x142>
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e000      	b.n	8002ce4 <HAL_TIM_PWM_Start+0x144>
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d007      	beq.n	8002cf8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cf6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a20      	ldr	r2, [pc, #128]	; (8002d80 <HAL_TIM_PWM_Start+0x1e0>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d018      	beq.n	8002d34 <HAL_TIM_PWM_Start+0x194>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d0a:	d013      	beq.n	8002d34 <HAL_TIM_PWM_Start+0x194>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a20      	ldr	r2, [pc, #128]	; (8002d94 <HAL_TIM_PWM_Start+0x1f4>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d00e      	beq.n	8002d34 <HAL_TIM_PWM_Start+0x194>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a1f      	ldr	r2, [pc, #124]	; (8002d98 <HAL_TIM_PWM_Start+0x1f8>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d009      	beq.n	8002d34 <HAL_TIM_PWM_Start+0x194>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a17      	ldr	r2, [pc, #92]	; (8002d84 <HAL_TIM_PWM_Start+0x1e4>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d004      	beq.n	8002d34 <HAL_TIM_PWM_Start+0x194>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a16      	ldr	r2, [pc, #88]	; (8002d88 <HAL_TIM_PWM_Start+0x1e8>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d115      	bne.n	8002d60 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689a      	ldr	r2, [r3, #8]
 8002d3a:	4b18      	ldr	r3, [pc, #96]	; (8002d9c <HAL_TIM_PWM_Start+0x1fc>)
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2b06      	cmp	r3, #6
 8002d44:	d015      	beq.n	8002d72 <HAL_TIM_PWM_Start+0x1d2>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d4c:	d011      	beq.n	8002d72 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f042 0201 	orr.w	r2, r2, #1
 8002d5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d5e:	e008      	b.n	8002d72 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0201 	orr.w	r2, r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	e000      	b.n	8002d74 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40012c00 	.word	0x40012c00
 8002d84:	40013400 	.word	0x40013400
 8002d88:	40014000 	.word	0x40014000
 8002d8c:	40014400 	.word	0x40014400
 8002d90:	40014800 	.word	0x40014800
 8002d94:	40000400 	.word	0x40000400
 8002d98:	40000800 	.word	0x40000800
 8002d9c:	00010007 	.word	0x00010007

08002da0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dac:	2300      	movs	r3, #0
 8002dae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d101      	bne.n	8002dbe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002dba:	2302      	movs	r3, #2
 8002dbc:	e0ff      	b.n	8002fbe <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b14      	cmp	r3, #20
 8002dca:	f200 80f0 	bhi.w	8002fae <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002dce:	a201      	add	r2, pc, #4	; (adr r2, 8002dd4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd4:	08002e29 	.word	0x08002e29
 8002dd8:	08002faf 	.word	0x08002faf
 8002ddc:	08002faf 	.word	0x08002faf
 8002de0:	08002faf 	.word	0x08002faf
 8002de4:	08002e69 	.word	0x08002e69
 8002de8:	08002faf 	.word	0x08002faf
 8002dec:	08002faf 	.word	0x08002faf
 8002df0:	08002faf 	.word	0x08002faf
 8002df4:	08002eab 	.word	0x08002eab
 8002df8:	08002faf 	.word	0x08002faf
 8002dfc:	08002faf 	.word	0x08002faf
 8002e00:	08002faf 	.word	0x08002faf
 8002e04:	08002eeb 	.word	0x08002eeb
 8002e08:	08002faf 	.word	0x08002faf
 8002e0c:	08002faf 	.word	0x08002faf
 8002e10:	08002faf 	.word	0x08002faf
 8002e14:	08002f2d 	.word	0x08002f2d
 8002e18:	08002faf 	.word	0x08002faf
 8002e1c:	08002faf 	.word	0x08002faf
 8002e20:	08002faf 	.word	0x08002faf
 8002e24:	08002f6d 	.word	0x08002f6d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68b9      	ldr	r1, [r7, #8]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f000 fa54 	bl	80032dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	699a      	ldr	r2, [r3, #24]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 0208 	orr.w	r2, r2, #8
 8002e42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	699a      	ldr	r2, [r3, #24]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0204 	bic.w	r2, r2, #4
 8002e52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6999      	ldr	r1, [r3, #24]
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	691a      	ldr	r2, [r3, #16]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	619a      	str	r2, [r3, #24]
      break;
 8002e66:	e0a5      	b.n	8002fb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68b9      	ldr	r1, [r7, #8]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f000 fac4 	bl	80033fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	699a      	ldr	r2, [r3, #24]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	699a      	ldr	r2, [r3, #24]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6999      	ldr	r1, [r3, #24]
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	021a      	lsls	r2, r3, #8
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	619a      	str	r2, [r3, #24]
      break;
 8002ea8:	e084      	b.n	8002fb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68b9      	ldr	r1, [r7, #8]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f000 fb2d 	bl	8003510 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	69da      	ldr	r2, [r3, #28]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f042 0208 	orr.w	r2, r2, #8
 8002ec4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	69da      	ldr	r2, [r3, #28]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0204 	bic.w	r2, r2, #4
 8002ed4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	69d9      	ldr	r1, [r3, #28]
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	691a      	ldr	r2, [r3, #16]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	61da      	str	r2, [r3, #28]
      break;
 8002ee8:	e064      	b.n	8002fb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68b9      	ldr	r1, [r7, #8]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f000 fb95 	bl	8003620 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	69da      	ldr	r2, [r3, #28]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	69da      	ldr	r2, [r3, #28]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	69d9      	ldr	r1, [r3, #28]
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	021a      	lsls	r2, r3, #8
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	61da      	str	r2, [r3, #28]
      break;
 8002f2a:	e043      	b.n	8002fb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68b9      	ldr	r1, [r7, #8]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 fbfe 	bl	8003734 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0208 	orr.w	r2, r2, #8
 8002f46:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0204 	bic.w	r2, r2, #4
 8002f56:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	691a      	ldr	r2, [r3, #16]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002f6a:	e023      	b.n	8002fb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68b9      	ldr	r1, [r7, #8]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f000 fc42 	bl	80037fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f86:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f96:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	021a      	lsls	r2, r3, #8
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002fac:	e002      	b.n	8002fb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	75fb      	strb	r3, [r7, #23]
      break;
 8002fb2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002fbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3718      	adds	r7, #24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop

08002fc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d101      	bne.n	8002fe4 <HAL_TIM_ConfigClockSource+0x1c>
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	e0de      	b.n	80031a2 <HAL_TIM_ConfigClockSource+0x1da>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2202      	movs	r2, #2
 8002ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003002:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003006:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800300e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a63      	ldr	r2, [pc, #396]	; (80031ac <HAL_TIM_ConfigClockSource+0x1e4>)
 800301e:	4293      	cmp	r3, r2
 8003020:	f000 80a9 	beq.w	8003176 <HAL_TIM_ConfigClockSource+0x1ae>
 8003024:	4a61      	ldr	r2, [pc, #388]	; (80031ac <HAL_TIM_ConfigClockSource+0x1e4>)
 8003026:	4293      	cmp	r3, r2
 8003028:	f200 80ae 	bhi.w	8003188 <HAL_TIM_ConfigClockSource+0x1c0>
 800302c:	4a60      	ldr	r2, [pc, #384]	; (80031b0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800302e:	4293      	cmp	r3, r2
 8003030:	f000 80a1 	beq.w	8003176 <HAL_TIM_ConfigClockSource+0x1ae>
 8003034:	4a5e      	ldr	r2, [pc, #376]	; (80031b0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003036:	4293      	cmp	r3, r2
 8003038:	f200 80a6 	bhi.w	8003188 <HAL_TIM_ConfigClockSource+0x1c0>
 800303c:	4a5d      	ldr	r2, [pc, #372]	; (80031b4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800303e:	4293      	cmp	r3, r2
 8003040:	f000 8099 	beq.w	8003176 <HAL_TIM_ConfigClockSource+0x1ae>
 8003044:	4a5b      	ldr	r2, [pc, #364]	; (80031b4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003046:	4293      	cmp	r3, r2
 8003048:	f200 809e 	bhi.w	8003188 <HAL_TIM_ConfigClockSource+0x1c0>
 800304c:	4a5a      	ldr	r2, [pc, #360]	; (80031b8 <HAL_TIM_ConfigClockSource+0x1f0>)
 800304e:	4293      	cmp	r3, r2
 8003050:	f000 8091 	beq.w	8003176 <HAL_TIM_ConfigClockSource+0x1ae>
 8003054:	4a58      	ldr	r2, [pc, #352]	; (80031b8 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003056:	4293      	cmp	r3, r2
 8003058:	f200 8096 	bhi.w	8003188 <HAL_TIM_ConfigClockSource+0x1c0>
 800305c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003060:	f000 8089 	beq.w	8003176 <HAL_TIM_ConfigClockSource+0x1ae>
 8003064:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003068:	f200 808e 	bhi.w	8003188 <HAL_TIM_ConfigClockSource+0x1c0>
 800306c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003070:	d03e      	beq.n	80030f0 <HAL_TIM_ConfigClockSource+0x128>
 8003072:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003076:	f200 8087 	bhi.w	8003188 <HAL_TIM_ConfigClockSource+0x1c0>
 800307a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800307e:	f000 8086 	beq.w	800318e <HAL_TIM_ConfigClockSource+0x1c6>
 8003082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003086:	d87f      	bhi.n	8003188 <HAL_TIM_ConfigClockSource+0x1c0>
 8003088:	2b70      	cmp	r3, #112	; 0x70
 800308a:	d01a      	beq.n	80030c2 <HAL_TIM_ConfigClockSource+0xfa>
 800308c:	2b70      	cmp	r3, #112	; 0x70
 800308e:	d87b      	bhi.n	8003188 <HAL_TIM_ConfigClockSource+0x1c0>
 8003090:	2b60      	cmp	r3, #96	; 0x60
 8003092:	d050      	beq.n	8003136 <HAL_TIM_ConfigClockSource+0x16e>
 8003094:	2b60      	cmp	r3, #96	; 0x60
 8003096:	d877      	bhi.n	8003188 <HAL_TIM_ConfigClockSource+0x1c0>
 8003098:	2b50      	cmp	r3, #80	; 0x50
 800309a:	d03c      	beq.n	8003116 <HAL_TIM_ConfigClockSource+0x14e>
 800309c:	2b50      	cmp	r3, #80	; 0x50
 800309e:	d873      	bhi.n	8003188 <HAL_TIM_ConfigClockSource+0x1c0>
 80030a0:	2b40      	cmp	r3, #64	; 0x40
 80030a2:	d058      	beq.n	8003156 <HAL_TIM_ConfigClockSource+0x18e>
 80030a4:	2b40      	cmp	r3, #64	; 0x40
 80030a6:	d86f      	bhi.n	8003188 <HAL_TIM_ConfigClockSource+0x1c0>
 80030a8:	2b30      	cmp	r3, #48	; 0x30
 80030aa:	d064      	beq.n	8003176 <HAL_TIM_ConfigClockSource+0x1ae>
 80030ac:	2b30      	cmp	r3, #48	; 0x30
 80030ae:	d86b      	bhi.n	8003188 <HAL_TIM_ConfigClockSource+0x1c0>
 80030b0:	2b20      	cmp	r3, #32
 80030b2:	d060      	beq.n	8003176 <HAL_TIM_ConfigClockSource+0x1ae>
 80030b4:	2b20      	cmp	r3, #32
 80030b6:	d867      	bhi.n	8003188 <HAL_TIM_ConfigClockSource+0x1c0>
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d05c      	beq.n	8003176 <HAL_TIM_ConfigClockSource+0x1ae>
 80030bc:	2b10      	cmp	r3, #16
 80030be:	d05a      	beq.n	8003176 <HAL_TIM_ConfigClockSource+0x1ae>
 80030c0:	e062      	b.n	8003188 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6818      	ldr	r0, [r3, #0]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	6899      	ldr	r1, [r3, #8]
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	f000 fc75 	bl	80039c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68ba      	ldr	r2, [r7, #8]
 80030ec:	609a      	str	r2, [r3, #8]
      break;
 80030ee:	e04f      	b.n	8003190 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6818      	ldr	r0, [r3, #0]
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	6899      	ldr	r1, [r3, #8]
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	f000 fc5e 	bl	80039c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689a      	ldr	r2, [r3, #8]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003112:	609a      	str	r2, [r3, #8]
      break;
 8003114:	e03c      	b.n	8003190 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6818      	ldr	r0, [r3, #0]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	6859      	ldr	r1, [r3, #4]
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	461a      	mov	r2, r3
 8003124:	f000 fbd0 	bl	80038c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2150      	movs	r1, #80	; 0x50
 800312e:	4618      	mov	r0, r3
 8003130:	f000 fc29 	bl	8003986 <TIM_ITRx_SetConfig>
      break;
 8003134:	e02c      	b.n	8003190 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6818      	ldr	r0, [r3, #0]
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	6859      	ldr	r1, [r3, #4]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	461a      	mov	r2, r3
 8003144:	f000 fbef 	bl	8003926 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2160      	movs	r1, #96	; 0x60
 800314e:	4618      	mov	r0, r3
 8003150:	f000 fc19 	bl	8003986 <TIM_ITRx_SetConfig>
      break;
 8003154:	e01c      	b.n	8003190 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6818      	ldr	r0, [r3, #0]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	6859      	ldr	r1, [r3, #4]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	461a      	mov	r2, r3
 8003164:	f000 fbb0 	bl	80038c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2140      	movs	r1, #64	; 0x40
 800316e:	4618      	mov	r0, r3
 8003170:	f000 fc09 	bl	8003986 <TIM_ITRx_SetConfig>
      break;
 8003174:	e00c      	b.n	8003190 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4619      	mov	r1, r3
 8003180:	4610      	mov	r0, r2
 8003182:	f000 fc00 	bl	8003986 <TIM_ITRx_SetConfig>
      break;
 8003186:	e003      	b.n	8003190 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	73fb      	strb	r3, [r7, #15]
      break;
 800318c:	e000      	b.n	8003190 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800318e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	00100070 	.word	0x00100070
 80031b0:	00100040 	.word	0x00100040
 80031b4:	00100030 	.word	0x00100030
 80031b8:	00100020 	.word	0x00100020

080031bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a3c      	ldr	r2, [pc, #240]	; (80032c0 <TIM_Base_SetConfig+0x104>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d00f      	beq.n	80031f4 <TIM_Base_SetConfig+0x38>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031da:	d00b      	beq.n	80031f4 <TIM_Base_SetConfig+0x38>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a39      	ldr	r2, [pc, #228]	; (80032c4 <TIM_Base_SetConfig+0x108>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d007      	beq.n	80031f4 <TIM_Base_SetConfig+0x38>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a38      	ldr	r2, [pc, #224]	; (80032c8 <TIM_Base_SetConfig+0x10c>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d003      	beq.n	80031f4 <TIM_Base_SetConfig+0x38>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a37      	ldr	r2, [pc, #220]	; (80032cc <TIM_Base_SetConfig+0x110>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d108      	bne.n	8003206 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	4313      	orrs	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a2d      	ldr	r2, [pc, #180]	; (80032c0 <TIM_Base_SetConfig+0x104>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d01b      	beq.n	8003246 <TIM_Base_SetConfig+0x8a>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003214:	d017      	beq.n	8003246 <TIM_Base_SetConfig+0x8a>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a2a      	ldr	r2, [pc, #168]	; (80032c4 <TIM_Base_SetConfig+0x108>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d013      	beq.n	8003246 <TIM_Base_SetConfig+0x8a>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a29      	ldr	r2, [pc, #164]	; (80032c8 <TIM_Base_SetConfig+0x10c>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d00f      	beq.n	8003246 <TIM_Base_SetConfig+0x8a>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a28      	ldr	r2, [pc, #160]	; (80032cc <TIM_Base_SetConfig+0x110>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d00b      	beq.n	8003246 <TIM_Base_SetConfig+0x8a>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a27      	ldr	r2, [pc, #156]	; (80032d0 <TIM_Base_SetConfig+0x114>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d007      	beq.n	8003246 <TIM_Base_SetConfig+0x8a>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a26      	ldr	r2, [pc, #152]	; (80032d4 <TIM_Base_SetConfig+0x118>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d003      	beq.n	8003246 <TIM_Base_SetConfig+0x8a>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a25      	ldr	r2, [pc, #148]	; (80032d8 <TIM_Base_SetConfig+0x11c>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d108      	bne.n	8003258 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800324c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	4313      	orrs	r3, r2
 8003256:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	4313      	orrs	r3, r2
 8003264:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a10      	ldr	r2, [pc, #64]	; (80032c0 <TIM_Base_SetConfig+0x104>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d00f      	beq.n	80032a4 <TIM_Base_SetConfig+0xe8>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a11      	ldr	r2, [pc, #68]	; (80032cc <TIM_Base_SetConfig+0x110>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d00b      	beq.n	80032a4 <TIM_Base_SetConfig+0xe8>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a10      	ldr	r2, [pc, #64]	; (80032d0 <TIM_Base_SetConfig+0x114>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d007      	beq.n	80032a4 <TIM_Base_SetConfig+0xe8>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a0f      	ldr	r2, [pc, #60]	; (80032d4 <TIM_Base_SetConfig+0x118>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d003      	beq.n	80032a4 <TIM_Base_SetConfig+0xe8>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a0e      	ldr	r2, [pc, #56]	; (80032d8 <TIM_Base_SetConfig+0x11c>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d103      	bne.n	80032ac <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	691a      	ldr	r2, [r3, #16]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	615a      	str	r2, [r3, #20]
}
 80032b2:	bf00      	nop
 80032b4:	3714      	adds	r7, #20
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	40012c00 	.word	0x40012c00
 80032c4:	40000400 	.word	0x40000400
 80032c8:	40000800 	.word	0x40000800
 80032cc:	40013400 	.word	0x40013400
 80032d0:	40014000 	.word	0x40014000
 80032d4:	40014400 	.word	0x40014400
 80032d8:	40014800 	.word	0x40014800

080032dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032dc:	b480      	push	{r7}
 80032de:	b087      	sub	sp, #28
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	f023 0201 	bic.w	r2, r3, #1
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800330a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800330e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f023 0303 	bic.w	r3, r3, #3
 8003316:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	4313      	orrs	r3, r2
 8003320:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f023 0302 	bic.w	r3, r3, #2
 8003328:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	4313      	orrs	r3, r2
 8003332:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a2c      	ldr	r2, [pc, #176]	; (80033e8 <TIM_OC1_SetConfig+0x10c>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d00f      	beq.n	800335c <TIM_OC1_SetConfig+0x80>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a2b      	ldr	r2, [pc, #172]	; (80033ec <TIM_OC1_SetConfig+0x110>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d00b      	beq.n	800335c <TIM_OC1_SetConfig+0x80>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a2a      	ldr	r2, [pc, #168]	; (80033f0 <TIM_OC1_SetConfig+0x114>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d007      	beq.n	800335c <TIM_OC1_SetConfig+0x80>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a29      	ldr	r2, [pc, #164]	; (80033f4 <TIM_OC1_SetConfig+0x118>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d003      	beq.n	800335c <TIM_OC1_SetConfig+0x80>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a28      	ldr	r2, [pc, #160]	; (80033f8 <TIM_OC1_SetConfig+0x11c>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d10c      	bne.n	8003376 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	f023 0308 	bic.w	r3, r3, #8
 8003362:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	4313      	orrs	r3, r2
 800336c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f023 0304 	bic.w	r3, r3, #4
 8003374:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a1b      	ldr	r2, [pc, #108]	; (80033e8 <TIM_OC1_SetConfig+0x10c>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d00f      	beq.n	800339e <TIM_OC1_SetConfig+0xc2>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a1a      	ldr	r2, [pc, #104]	; (80033ec <TIM_OC1_SetConfig+0x110>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d00b      	beq.n	800339e <TIM_OC1_SetConfig+0xc2>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a19      	ldr	r2, [pc, #100]	; (80033f0 <TIM_OC1_SetConfig+0x114>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d007      	beq.n	800339e <TIM_OC1_SetConfig+0xc2>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a18      	ldr	r2, [pc, #96]	; (80033f4 <TIM_OC1_SetConfig+0x118>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d003      	beq.n	800339e <TIM_OC1_SetConfig+0xc2>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a17      	ldr	r2, [pc, #92]	; (80033f8 <TIM_OC1_SetConfig+0x11c>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d111      	bne.n	80033c2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	4313      	orrs	r3, r2
 80033c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685a      	ldr	r2, [r3, #4]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	621a      	str	r2, [r3, #32]
}
 80033dc:	bf00      	nop
 80033de:	371c      	adds	r7, #28
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	40012c00 	.word	0x40012c00
 80033ec:	40013400 	.word	0x40013400
 80033f0:	40014000 	.word	0x40014000
 80033f4:	40014400 	.word	0x40014400
 80033f8:	40014800 	.word	0x40014800

080033fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b087      	sub	sp, #28
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	f023 0210 	bic.w	r2, r3, #16
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800342a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800342e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	021b      	lsls	r3, r3, #8
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	4313      	orrs	r3, r2
 8003442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f023 0320 	bic.w	r3, r3, #32
 800344a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	011b      	lsls	r3, r3, #4
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	4313      	orrs	r3, r2
 8003456:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a28      	ldr	r2, [pc, #160]	; (80034fc <TIM_OC2_SetConfig+0x100>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d003      	beq.n	8003468 <TIM_OC2_SetConfig+0x6c>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a27      	ldr	r2, [pc, #156]	; (8003500 <TIM_OC2_SetConfig+0x104>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d10d      	bne.n	8003484 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800346e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	011b      	lsls	r3, r3, #4
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	4313      	orrs	r3, r2
 800347a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003482:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a1d      	ldr	r2, [pc, #116]	; (80034fc <TIM_OC2_SetConfig+0x100>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d00f      	beq.n	80034ac <TIM_OC2_SetConfig+0xb0>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a1c      	ldr	r2, [pc, #112]	; (8003500 <TIM_OC2_SetConfig+0x104>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d00b      	beq.n	80034ac <TIM_OC2_SetConfig+0xb0>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a1b      	ldr	r2, [pc, #108]	; (8003504 <TIM_OC2_SetConfig+0x108>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d007      	beq.n	80034ac <TIM_OC2_SetConfig+0xb0>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a1a      	ldr	r2, [pc, #104]	; (8003508 <TIM_OC2_SetConfig+0x10c>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d003      	beq.n	80034ac <TIM_OC2_SetConfig+0xb0>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a19      	ldr	r2, [pc, #100]	; (800350c <TIM_OC2_SetConfig+0x110>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d113      	bne.n	80034d4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	621a      	str	r2, [r3, #32]
}
 80034ee:	bf00      	nop
 80034f0:	371c      	adds	r7, #28
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	40012c00 	.word	0x40012c00
 8003500:	40013400 	.word	0x40013400
 8003504:	40014000 	.word	0x40014000
 8003508:	40014400 	.word	0x40014400
 800350c:	40014800 	.word	0x40014800

08003510 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003510:	b480      	push	{r7}
 8003512:	b087      	sub	sp, #28
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800353e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f023 0303 	bic.w	r3, r3, #3
 800354a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	4313      	orrs	r3, r2
 8003554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800355c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	021b      	lsls	r3, r3, #8
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	4313      	orrs	r3, r2
 8003568:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a27      	ldr	r2, [pc, #156]	; (800360c <TIM_OC3_SetConfig+0xfc>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d003      	beq.n	800357a <TIM_OC3_SetConfig+0x6a>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a26      	ldr	r2, [pc, #152]	; (8003610 <TIM_OC3_SetConfig+0x100>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d10d      	bne.n	8003596 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003580:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	021b      	lsls	r3, r3, #8
 8003588:	697a      	ldr	r2, [r7, #20]
 800358a:	4313      	orrs	r3, r2
 800358c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003594:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a1c      	ldr	r2, [pc, #112]	; (800360c <TIM_OC3_SetConfig+0xfc>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d00f      	beq.n	80035be <TIM_OC3_SetConfig+0xae>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a1b      	ldr	r2, [pc, #108]	; (8003610 <TIM_OC3_SetConfig+0x100>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d00b      	beq.n	80035be <TIM_OC3_SetConfig+0xae>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a1a      	ldr	r2, [pc, #104]	; (8003614 <TIM_OC3_SetConfig+0x104>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d007      	beq.n	80035be <TIM_OC3_SetConfig+0xae>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a19      	ldr	r2, [pc, #100]	; (8003618 <TIM_OC3_SetConfig+0x108>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d003      	beq.n	80035be <TIM_OC3_SetConfig+0xae>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a18      	ldr	r2, [pc, #96]	; (800361c <TIM_OC3_SetConfig+0x10c>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d113      	bne.n	80035e6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	011b      	lsls	r3, r3, #4
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	011b      	lsls	r3, r3, #4
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	621a      	str	r2, [r3, #32]
}
 8003600:	bf00      	nop
 8003602:	371c      	adds	r7, #28
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr
 800360c:	40012c00 	.word	0x40012c00
 8003610:	40013400 	.word	0x40013400
 8003614:	40014000 	.word	0x40014000
 8003618:	40014400 	.word	0x40014400
 800361c:	40014800 	.word	0x40014800

08003620 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003620:	b480      	push	{r7}
 8003622:	b087      	sub	sp, #28
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800364e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800365a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	021b      	lsls	r3, r3, #8
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	4313      	orrs	r3, r2
 8003666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800366e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	031b      	lsls	r3, r3, #12
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	4313      	orrs	r3, r2
 800367a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a28      	ldr	r2, [pc, #160]	; (8003720 <TIM_OC4_SetConfig+0x100>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d003      	beq.n	800368c <TIM_OC4_SetConfig+0x6c>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a27      	ldr	r2, [pc, #156]	; (8003724 <TIM_OC4_SetConfig+0x104>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d10d      	bne.n	80036a8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003692:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	031b      	lsls	r3, r3, #12
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	4313      	orrs	r3, r2
 800369e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a1d      	ldr	r2, [pc, #116]	; (8003720 <TIM_OC4_SetConfig+0x100>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d00f      	beq.n	80036d0 <TIM_OC4_SetConfig+0xb0>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a1c      	ldr	r2, [pc, #112]	; (8003724 <TIM_OC4_SetConfig+0x104>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d00b      	beq.n	80036d0 <TIM_OC4_SetConfig+0xb0>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a1b      	ldr	r2, [pc, #108]	; (8003728 <TIM_OC4_SetConfig+0x108>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d007      	beq.n	80036d0 <TIM_OC4_SetConfig+0xb0>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a1a      	ldr	r2, [pc, #104]	; (800372c <TIM_OC4_SetConfig+0x10c>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d003      	beq.n	80036d0 <TIM_OC4_SetConfig+0xb0>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a19      	ldr	r2, [pc, #100]	; (8003730 <TIM_OC4_SetConfig+0x110>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d113      	bne.n	80036f8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036d6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80036de:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	695b      	ldr	r3, [r3, #20]
 80036e4:	019b      	lsls	r3, r3, #6
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	019b      	lsls	r3, r3, #6
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	621a      	str	r2, [r3, #32]
}
 8003712:	bf00      	nop
 8003714:	371c      	adds	r7, #28
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	40012c00 	.word	0x40012c00
 8003724:	40013400 	.word	0x40013400
 8003728:	40014000 	.word	0x40014000
 800372c:	40014400 	.word	0x40014400
 8003730:	40014800 	.word	0x40014800

08003734 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003734:	b480      	push	{r7}
 8003736:	b087      	sub	sp, #28
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800375a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	4313      	orrs	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003778:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	041b      	lsls	r3, r3, #16
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	4313      	orrs	r3, r2
 8003784:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a17      	ldr	r2, [pc, #92]	; (80037e8 <TIM_OC5_SetConfig+0xb4>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d00f      	beq.n	80037ae <TIM_OC5_SetConfig+0x7a>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a16      	ldr	r2, [pc, #88]	; (80037ec <TIM_OC5_SetConfig+0xb8>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d00b      	beq.n	80037ae <TIM_OC5_SetConfig+0x7a>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a15      	ldr	r2, [pc, #84]	; (80037f0 <TIM_OC5_SetConfig+0xbc>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d007      	beq.n	80037ae <TIM_OC5_SetConfig+0x7a>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a14      	ldr	r2, [pc, #80]	; (80037f4 <TIM_OC5_SetConfig+0xc0>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d003      	beq.n	80037ae <TIM_OC5_SetConfig+0x7a>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a13      	ldr	r2, [pc, #76]	; (80037f8 <TIM_OC5_SetConfig+0xc4>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d109      	bne.n	80037c2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	021b      	lsls	r3, r3, #8
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	4313      	orrs	r3, r2
 80037c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	621a      	str	r2, [r3, #32]
}
 80037dc:	bf00      	nop
 80037de:	371c      	adds	r7, #28
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	40012c00 	.word	0x40012c00
 80037ec:	40013400 	.word	0x40013400
 80037f0:	40014000 	.word	0x40014000
 80037f4:	40014400 	.word	0x40014400
 80037f8:	40014800 	.word	0x40014800

080037fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b087      	sub	sp, #28
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800382a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800382e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	021b      	lsls	r3, r3, #8
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	4313      	orrs	r3, r2
 800383a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003842:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	051b      	lsls	r3, r3, #20
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	4313      	orrs	r3, r2
 800384e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a18      	ldr	r2, [pc, #96]	; (80038b4 <TIM_OC6_SetConfig+0xb8>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d00f      	beq.n	8003878 <TIM_OC6_SetConfig+0x7c>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a17      	ldr	r2, [pc, #92]	; (80038b8 <TIM_OC6_SetConfig+0xbc>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d00b      	beq.n	8003878 <TIM_OC6_SetConfig+0x7c>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a16      	ldr	r2, [pc, #88]	; (80038bc <TIM_OC6_SetConfig+0xc0>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d007      	beq.n	8003878 <TIM_OC6_SetConfig+0x7c>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a15      	ldr	r2, [pc, #84]	; (80038c0 <TIM_OC6_SetConfig+0xc4>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d003      	beq.n	8003878 <TIM_OC6_SetConfig+0x7c>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a14      	ldr	r2, [pc, #80]	; (80038c4 <TIM_OC6_SetConfig+0xc8>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d109      	bne.n	800388c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800387e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	029b      	lsls	r3, r3, #10
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	4313      	orrs	r3, r2
 800388a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685a      	ldr	r2, [r3, #4]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	621a      	str	r2, [r3, #32]
}
 80038a6:	bf00      	nop
 80038a8:	371c      	adds	r7, #28
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	40012c00 	.word	0x40012c00
 80038b8:	40013400 	.word	0x40013400
 80038bc:	40014000 	.word	0x40014000
 80038c0:	40014400 	.word	0x40014400
 80038c4:	40014800 	.word	0x40014800

080038c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b087      	sub	sp, #28
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	f023 0201 	bic.w	r2, r3, #1
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	011b      	lsls	r3, r3, #4
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f023 030a 	bic.w	r3, r3, #10
 8003904:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	4313      	orrs	r3, r2
 800390c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	621a      	str	r2, [r3, #32]
}
 800391a:	bf00      	nop
 800391c:	371c      	adds	r7, #28
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003926:	b480      	push	{r7}
 8003928:	b087      	sub	sp, #28
 800392a:	af00      	add	r7, sp, #0
 800392c:	60f8      	str	r0, [r7, #12]
 800392e:	60b9      	str	r1, [r7, #8]
 8003930:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	f023 0210 	bic.w	r2, r3, #16
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6a1b      	ldr	r3, [r3, #32]
 8003948:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003950:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	031b      	lsls	r3, r3, #12
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	4313      	orrs	r3, r2
 800395a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003962:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	011b      	lsls	r3, r3, #4
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	4313      	orrs	r3, r2
 800396c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	621a      	str	r2, [r3, #32]
}
 800397a:	bf00      	nop
 800397c:	371c      	adds	r7, #28
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr

08003986 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003986:	b480      	push	{r7}
 8003988:	b085      	sub	sp, #20
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
 800398e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800399c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	f043 0307 	orr.w	r3, r3, #7
 80039ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	609a      	str	r2, [r3, #8]
}
 80039b4:	bf00      	nop
 80039b6:	3714      	adds	r7, #20
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b087      	sub	sp, #28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
 80039cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	021a      	lsls	r2, r3, #8
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	431a      	orrs	r2, r3
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	609a      	str	r2, [r3, #8]
}
 80039f4:	bf00      	nop
 80039f6:	371c      	adds	r7, #28
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b087      	sub	sp, #28
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	f003 031f 	and.w	r3, r3, #31
 8003a12:	2201      	movs	r2, #1
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6a1a      	ldr	r2, [r3, #32]
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	43db      	mvns	r3, r3
 8003a22:	401a      	ands	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6a1a      	ldr	r2, [r3, #32]
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	f003 031f 	and.w	r3, r3, #31
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	fa01 f303 	lsl.w	r3, r1, r3
 8003a38:	431a      	orrs	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	621a      	str	r2, [r3, #32]
}
 8003a3e:	bf00      	nop
 8003a40:	371c      	adds	r7, #28
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
	...

08003a4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d101      	bne.n	8003a64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a60:	2302      	movs	r3, #2
 8003a62:	e065      	b.n	8003b30 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a2c      	ldr	r2, [pc, #176]	; (8003b3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d004      	beq.n	8003a98 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a2b      	ldr	r2, [pc, #172]	; (8003b40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d108      	bne.n	8003aaa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003a9e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a1b      	ldr	r2, [pc, #108]	; (8003b3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d018      	beq.n	8003b04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ada:	d013      	beq.n	8003b04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a18      	ldr	r2, [pc, #96]	; (8003b44 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d00e      	beq.n	8003b04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a17      	ldr	r2, [pc, #92]	; (8003b48 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d009      	beq.n	8003b04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a12      	ldr	r2, [pc, #72]	; (8003b40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d004      	beq.n	8003b04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a13      	ldr	r2, [pc, #76]	; (8003b4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d10c      	bne.n	8003b1e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	68ba      	ldr	r2, [r7, #8]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3714      	adds	r7, #20
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	40012c00 	.word	0x40012c00
 8003b40:	40013400 	.word	0x40013400
 8003b44:	40000400 	.word	0x40000400
 8003b48:	40000800 	.word	0x40000800
 8003b4c:	40014000 	.word	0x40014000

08003b50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e042      	b.n	8003be8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d106      	bne.n	8003b7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f7fd f801 	bl	8000b7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2224      	movs	r2, #36	; 0x24
 8003b7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0201 	bic.w	r2, r2, #1
 8003b90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f82c 	bl	8003bf0 <UART_SetConfig>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d101      	bne.n	8003ba2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e022      	b.n	8003be8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d002      	beq.n	8003bb0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 faec 	bl	8004188 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689a      	ldr	r2, [r3, #8]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f042 0201 	orr.w	r2, r2, #1
 8003bde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 fb73 	bl	80042cc <UART_CheckIdleState>
 8003be6:	4603      	mov	r3, r0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bf4:	b08c      	sub	sp, #48	; 0x30
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	69db      	ldr	r3, [r3, #28]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	4bab      	ldr	r3, [pc, #684]	; (8003ecc <UART_SetConfig+0x2dc>)
 8003c20:	4013      	ands	r3, r2
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	6812      	ldr	r2, [r2, #0]
 8003c26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c28:	430b      	orrs	r3, r1
 8003c2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4aa0      	ldr	r2, [pc, #640]	; (8003ed0 <UART_SetConfig+0x2e0>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d004      	beq.n	8003c5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003c66:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	6812      	ldr	r2, [r2, #0]
 8003c6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c70:	430b      	orrs	r3, r1
 8003c72:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7a:	f023 010f 	bic.w	r1, r3, #15
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	430a      	orrs	r2, r1
 8003c88:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a91      	ldr	r2, [pc, #580]	; (8003ed4 <UART_SetConfig+0x2e4>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d125      	bne.n	8003ce0 <UART_SetConfig+0xf0>
 8003c94:	4b90      	ldr	r3, [pc, #576]	; (8003ed8 <UART_SetConfig+0x2e8>)
 8003c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9a:	f003 0303 	and.w	r3, r3, #3
 8003c9e:	2b03      	cmp	r3, #3
 8003ca0:	d81a      	bhi.n	8003cd8 <UART_SetConfig+0xe8>
 8003ca2:	a201      	add	r2, pc, #4	; (adr r2, 8003ca8 <UART_SetConfig+0xb8>)
 8003ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca8:	08003cb9 	.word	0x08003cb9
 8003cac:	08003cc9 	.word	0x08003cc9
 8003cb0:	08003cc1 	.word	0x08003cc1
 8003cb4:	08003cd1 	.word	0x08003cd1
 8003cb8:	2301      	movs	r3, #1
 8003cba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cbe:	e0d6      	b.n	8003e6e <UART_SetConfig+0x27e>
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cc6:	e0d2      	b.n	8003e6e <UART_SetConfig+0x27e>
 8003cc8:	2304      	movs	r3, #4
 8003cca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cce:	e0ce      	b.n	8003e6e <UART_SetConfig+0x27e>
 8003cd0:	2308      	movs	r3, #8
 8003cd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cd6:	e0ca      	b.n	8003e6e <UART_SetConfig+0x27e>
 8003cd8:	2310      	movs	r3, #16
 8003cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cde:	e0c6      	b.n	8003e6e <UART_SetConfig+0x27e>
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a7d      	ldr	r2, [pc, #500]	; (8003edc <UART_SetConfig+0x2ec>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d138      	bne.n	8003d5c <UART_SetConfig+0x16c>
 8003cea:	4b7b      	ldr	r3, [pc, #492]	; (8003ed8 <UART_SetConfig+0x2e8>)
 8003cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf0:	f003 030c 	and.w	r3, r3, #12
 8003cf4:	2b0c      	cmp	r3, #12
 8003cf6:	d82d      	bhi.n	8003d54 <UART_SetConfig+0x164>
 8003cf8:	a201      	add	r2, pc, #4	; (adr r2, 8003d00 <UART_SetConfig+0x110>)
 8003cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfe:	bf00      	nop
 8003d00:	08003d35 	.word	0x08003d35
 8003d04:	08003d55 	.word	0x08003d55
 8003d08:	08003d55 	.word	0x08003d55
 8003d0c:	08003d55 	.word	0x08003d55
 8003d10:	08003d45 	.word	0x08003d45
 8003d14:	08003d55 	.word	0x08003d55
 8003d18:	08003d55 	.word	0x08003d55
 8003d1c:	08003d55 	.word	0x08003d55
 8003d20:	08003d3d 	.word	0x08003d3d
 8003d24:	08003d55 	.word	0x08003d55
 8003d28:	08003d55 	.word	0x08003d55
 8003d2c:	08003d55 	.word	0x08003d55
 8003d30:	08003d4d 	.word	0x08003d4d
 8003d34:	2300      	movs	r3, #0
 8003d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d3a:	e098      	b.n	8003e6e <UART_SetConfig+0x27e>
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d42:	e094      	b.n	8003e6e <UART_SetConfig+0x27e>
 8003d44:	2304      	movs	r3, #4
 8003d46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d4a:	e090      	b.n	8003e6e <UART_SetConfig+0x27e>
 8003d4c:	2308      	movs	r3, #8
 8003d4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d52:	e08c      	b.n	8003e6e <UART_SetConfig+0x27e>
 8003d54:	2310      	movs	r3, #16
 8003d56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d5a:	e088      	b.n	8003e6e <UART_SetConfig+0x27e>
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a5f      	ldr	r2, [pc, #380]	; (8003ee0 <UART_SetConfig+0x2f0>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d125      	bne.n	8003db2 <UART_SetConfig+0x1c2>
 8003d66:	4b5c      	ldr	r3, [pc, #368]	; (8003ed8 <UART_SetConfig+0x2e8>)
 8003d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d6c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d70:	2b30      	cmp	r3, #48	; 0x30
 8003d72:	d016      	beq.n	8003da2 <UART_SetConfig+0x1b2>
 8003d74:	2b30      	cmp	r3, #48	; 0x30
 8003d76:	d818      	bhi.n	8003daa <UART_SetConfig+0x1ba>
 8003d78:	2b20      	cmp	r3, #32
 8003d7a:	d00a      	beq.n	8003d92 <UART_SetConfig+0x1a2>
 8003d7c:	2b20      	cmp	r3, #32
 8003d7e:	d814      	bhi.n	8003daa <UART_SetConfig+0x1ba>
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d002      	beq.n	8003d8a <UART_SetConfig+0x19a>
 8003d84:	2b10      	cmp	r3, #16
 8003d86:	d008      	beq.n	8003d9a <UART_SetConfig+0x1aa>
 8003d88:	e00f      	b.n	8003daa <UART_SetConfig+0x1ba>
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d90:	e06d      	b.n	8003e6e <UART_SetConfig+0x27e>
 8003d92:	2302      	movs	r3, #2
 8003d94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d98:	e069      	b.n	8003e6e <UART_SetConfig+0x27e>
 8003d9a:	2304      	movs	r3, #4
 8003d9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003da0:	e065      	b.n	8003e6e <UART_SetConfig+0x27e>
 8003da2:	2308      	movs	r3, #8
 8003da4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003da8:	e061      	b.n	8003e6e <UART_SetConfig+0x27e>
 8003daa:	2310      	movs	r3, #16
 8003dac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003db0:	e05d      	b.n	8003e6e <UART_SetConfig+0x27e>
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a4b      	ldr	r2, [pc, #300]	; (8003ee4 <UART_SetConfig+0x2f4>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d125      	bne.n	8003e08 <UART_SetConfig+0x218>
 8003dbc:	4b46      	ldr	r3, [pc, #280]	; (8003ed8 <UART_SetConfig+0x2e8>)
 8003dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003dc6:	2bc0      	cmp	r3, #192	; 0xc0
 8003dc8:	d016      	beq.n	8003df8 <UART_SetConfig+0x208>
 8003dca:	2bc0      	cmp	r3, #192	; 0xc0
 8003dcc:	d818      	bhi.n	8003e00 <UART_SetConfig+0x210>
 8003dce:	2b80      	cmp	r3, #128	; 0x80
 8003dd0:	d00a      	beq.n	8003de8 <UART_SetConfig+0x1f8>
 8003dd2:	2b80      	cmp	r3, #128	; 0x80
 8003dd4:	d814      	bhi.n	8003e00 <UART_SetConfig+0x210>
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d002      	beq.n	8003de0 <UART_SetConfig+0x1f0>
 8003dda:	2b40      	cmp	r3, #64	; 0x40
 8003ddc:	d008      	beq.n	8003df0 <UART_SetConfig+0x200>
 8003dde:	e00f      	b.n	8003e00 <UART_SetConfig+0x210>
 8003de0:	2300      	movs	r3, #0
 8003de2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003de6:	e042      	b.n	8003e6e <UART_SetConfig+0x27e>
 8003de8:	2302      	movs	r3, #2
 8003dea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dee:	e03e      	b.n	8003e6e <UART_SetConfig+0x27e>
 8003df0:	2304      	movs	r3, #4
 8003df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003df6:	e03a      	b.n	8003e6e <UART_SetConfig+0x27e>
 8003df8:	2308      	movs	r3, #8
 8003dfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dfe:	e036      	b.n	8003e6e <UART_SetConfig+0x27e>
 8003e00:	2310      	movs	r3, #16
 8003e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e06:	e032      	b.n	8003e6e <UART_SetConfig+0x27e>
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a30      	ldr	r2, [pc, #192]	; (8003ed0 <UART_SetConfig+0x2e0>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d12a      	bne.n	8003e68 <UART_SetConfig+0x278>
 8003e12:	4b31      	ldr	r3, [pc, #196]	; (8003ed8 <UART_SetConfig+0x2e8>)
 8003e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e20:	d01a      	beq.n	8003e58 <UART_SetConfig+0x268>
 8003e22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e26:	d81b      	bhi.n	8003e60 <UART_SetConfig+0x270>
 8003e28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e2c:	d00c      	beq.n	8003e48 <UART_SetConfig+0x258>
 8003e2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e32:	d815      	bhi.n	8003e60 <UART_SetConfig+0x270>
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d003      	beq.n	8003e40 <UART_SetConfig+0x250>
 8003e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e3c:	d008      	beq.n	8003e50 <UART_SetConfig+0x260>
 8003e3e:	e00f      	b.n	8003e60 <UART_SetConfig+0x270>
 8003e40:	2300      	movs	r3, #0
 8003e42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e46:	e012      	b.n	8003e6e <UART_SetConfig+0x27e>
 8003e48:	2302      	movs	r3, #2
 8003e4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e4e:	e00e      	b.n	8003e6e <UART_SetConfig+0x27e>
 8003e50:	2304      	movs	r3, #4
 8003e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e56:	e00a      	b.n	8003e6e <UART_SetConfig+0x27e>
 8003e58:	2308      	movs	r3, #8
 8003e5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e5e:	e006      	b.n	8003e6e <UART_SetConfig+0x27e>
 8003e60:	2310      	movs	r3, #16
 8003e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e66:	e002      	b.n	8003e6e <UART_SetConfig+0x27e>
 8003e68:	2310      	movs	r3, #16
 8003e6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a17      	ldr	r2, [pc, #92]	; (8003ed0 <UART_SetConfig+0x2e0>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	f040 80a8 	bne.w	8003fca <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e7e:	2b08      	cmp	r3, #8
 8003e80:	d834      	bhi.n	8003eec <UART_SetConfig+0x2fc>
 8003e82:	a201      	add	r2, pc, #4	; (adr r2, 8003e88 <UART_SetConfig+0x298>)
 8003e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e88:	08003ead 	.word	0x08003ead
 8003e8c:	08003eed 	.word	0x08003eed
 8003e90:	08003eb5 	.word	0x08003eb5
 8003e94:	08003eed 	.word	0x08003eed
 8003e98:	08003ebb 	.word	0x08003ebb
 8003e9c:	08003eed 	.word	0x08003eed
 8003ea0:	08003eed 	.word	0x08003eed
 8003ea4:	08003eed 	.word	0x08003eed
 8003ea8:	08003ec3 	.word	0x08003ec3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003eac:	f7fe fb5e 	bl	800256c <HAL_RCC_GetPCLK1Freq>
 8003eb0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003eb2:	e021      	b.n	8003ef8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003eb4:	4b0c      	ldr	r3, [pc, #48]	; (8003ee8 <UART_SetConfig+0x2f8>)
 8003eb6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003eb8:	e01e      	b.n	8003ef8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eba:	f7fe fae9 	bl	8002490 <HAL_RCC_GetSysClockFreq>
 8003ebe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ec0:	e01a      	b.n	8003ef8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ec2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ec6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ec8:	e016      	b.n	8003ef8 <UART_SetConfig+0x308>
 8003eca:	bf00      	nop
 8003ecc:	cfff69f3 	.word	0xcfff69f3
 8003ed0:	40008000 	.word	0x40008000
 8003ed4:	40013800 	.word	0x40013800
 8003ed8:	40021000 	.word	0x40021000
 8003edc:	40004400 	.word	0x40004400
 8003ee0:	40004800 	.word	0x40004800
 8003ee4:	40004c00 	.word	0x40004c00
 8003ee8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003eec:	2300      	movs	r3, #0
 8003eee:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003ef6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f000 812a 	beq.w	8004154 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	4a9e      	ldr	r2, [pc, #632]	; (8004180 <UART_SetConfig+0x590>)
 8003f06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f12:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	005b      	lsls	r3, r3, #1
 8003f1c:	4413      	add	r3, r2
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d305      	bcc.n	8003f30 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d903      	bls.n	8003f38 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003f36:	e10d      	b.n	8004154 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	60bb      	str	r3, [r7, #8]
 8003f3e:	60fa      	str	r2, [r7, #12]
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	4a8e      	ldr	r2, [pc, #568]	; (8004180 <UART_SetConfig+0x590>)
 8003f46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	603b      	str	r3, [r7, #0]
 8003f50:	607a      	str	r2, [r7, #4]
 8003f52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003f5a:	f7fc f95d 	bl	8000218 <__aeabi_uldivmod>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	460b      	mov	r3, r1
 8003f62:	4610      	mov	r0, r2
 8003f64:	4619      	mov	r1, r3
 8003f66:	f04f 0200 	mov.w	r2, #0
 8003f6a:	f04f 0300 	mov.w	r3, #0
 8003f6e:	020b      	lsls	r3, r1, #8
 8003f70:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003f74:	0202      	lsls	r2, r0, #8
 8003f76:	6979      	ldr	r1, [r7, #20]
 8003f78:	6849      	ldr	r1, [r1, #4]
 8003f7a:	0849      	lsrs	r1, r1, #1
 8003f7c:	2000      	movs	r0, #0
 8003f7e:	460c      	mov	r4, r1
 8003f80:	4605      	mov	r5, r0
 8003f82:	eb12 0804 	adds.w	r8, r2, r4
 8003f86:	eb43 0905 	adc.w	r9, r3, r5
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	469a      	mov	sl, r3
 8003f92:	4693      	mov	fp, r2
 8003f94:	4652      	mov	r2, sl
 8003f96:	465b      	mov	r3, fp
 8003f98:	4640      	mov	r0, r8
 8003f9a:	4649      	mov	r1, r9
 8003f9c:	f7fc f93c 	bl	8000218 <__aeabi_uldivmod>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003fa8:	6a3b      	ldr	r3, [r7, #32]
 8003faa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fae:	d308      	bcc.n	8003fc2 <UART_SetConfig+0x3d2>
 8003fb0:	6a3b      	ldr	r3, [r7, #32]
 8003fb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fb6:	d204      	bcs.n	8003fc2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6a3a      	ldr	r2, [r7, #32]
 8003fbe:	60da      	str	r2, [r3, #12]
 8003fc0:	e0c8      	b.n	8004154 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003fc8:	e0c4      	b.n	8004154 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	69db      	ldr	r3, [r3, #28]
 8003fce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fd2:	d167      	bne.n	80040a4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003fd4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003fd8:	2b08      	cmp	r3, #8
 8003fda:	d828      	bhi.n	800402e <UART_SetConfig+0x43e>
 8003fdc:	a201      	add	r2, pc, #4	; (adr r2, 8003fe4 <UART_SetConfig+0x3f4>)
 8003fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe2:	bf00      	nop
 8003fe4:	08004009 	.word	0x08004009
 8003fe8:	08004011 	.word	0x08004011
 8003fec:	08004019 	.word	0x08004019
 8003ff0:	0800402f 	.word	0x0800402f
 8003ff4:	0800401f 	.word	0x0800401f
 8003ff8:	0800402f 	.word	0x0800402f
 8003ffc:	0800402f 	.word	0x0800402f
 8004000:	0800402f 	.word	0x0800402f
 8004004:	08004027 	.word	0x08004027
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004008:	f7fe fab0 	bl	800256c <HAL_RCC_GetPCLK1Freq>
 800400c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800400e:	e014      	b.n	800403a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004010:	f7fe fac2 	bl	8002598 <HAL_RCC_GetPCLK2Freq>
 8004014:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004016:	e010      	b.n	800403a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004018:	4b5a      	ldr	r3, [pc, #360]	; (8004184 <UART_SetConfig+0x594>)
 800401a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800401c:	e00d      	b.n	800403a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800401e:	f7fe fa37 	bl	8002490 <HAL_RCC_GetSysClockFreq>
 8004022:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004024:	e009      	b.n	800403a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004026:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800402a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800402c:	e005      	b.n	800403a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800402e:	2300      	movs	r3, #0
 8004030:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004038:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800403a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 8089 	beq.w	8004154 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004046:	4a4e      	ldr	r2, [pc, #312]	; (8004180 <UART_SetConfig+0x590>)
 8004048:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800404c:	461a      	mov	r2, r3
 800404e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004050:	fbb3 f3f2 	udiv	r3, r3, r2
 8004054:	005a      	lsls	r2, r3, #1
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	085b      	lsrs	r3, r3, #1
 800405c:	441a      	add	r2, r3
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	fbb2 f3f3 	udiv	r3, r2, r3
 8004066:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004068:	6a3b      	ldr	r3, [r7, #32]
 800406a:	2b0f      	cmp	r3, #15
 800406c:	d916      	bls.n	800409c <UART_SetConfig+0x4ac>
 800406e:	6a3b      	ldr	r3, [r7, #32]
 8004070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004074:	d212      	bcs.n	800409c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004076:	6a3b      	ldr	r3, [r7, #32]
 8004078:	b29b      	uxth	r3, r3
 800407a:	f023 030f 	bic.w	r3, r3, #15
 800407e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004080:	6a3b      	ldr	r3, [r7, #32]
 8004082:	085b      	lsrs	r3, r3, #1
 8004084:	b29b      	uxth	r3, r3
 8004086:	f003 0307 	and.w	r3, r3, #7
 800408a:	b29a      	uxth	r2, r3
 800408c:	8bfb      	ldrh	r3, [r7, #30]
 800408e:	4313      	orrs	r3, r2
 8004090:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	8bfa      	ldrh	r2, [r7, #30]
 8004098:	60da      	str	r2, [r3, #12]
 800409a:	e05b      	b.n	8004154 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80040a2:	e057      	b.n	8004154 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	d828      	bhi.n	80040fe <UART_SetConfig+0x50e>
 80040ac:	a201      	add	r2, pc, #4	; (adr r2, 80040b4 <UART_SetConfig+0x4c4>)
 80040ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b2:	bf00      	nop
 80040b4:	080040d9 	.word	0x080040d9
 80040b8:	080040e1 	.word	0x080040e1
 80040bc:	080040e9 	.word	0x080040e9
 80040c0:	080040ff 	.word	0x080040ff
 80040c4:	080040ef 	.word	0x080040ef
 80040c8:	080040ff 	.word	0x080040ff
 80040cc:	080040ff 	.word	0x080040ff
 80040d0:	080040ff 	.word	0x080040ff
 80040d4:	080040f7 	.word	0x080040f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040d8:	f7fe fa48 	bl	800256c <HAL_RCC_GetPCLK1Freq>
 80040dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80040de:	e014      	b.n	800410a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040e0:	f7fe fa5a 	bl	8002598 <HAL_RCC_GetPCLK2Freq>
 80040e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80040e6:	e010      	b.n	800410a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040e8:	4b26      	ldr	r3, [pc, #152]	; (8004184 <UART_SetConfig+0x594>)
 80040ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80040ec:	e00d      	b.n	800410a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040ee:	f7fe f9cf 	bl	8002490 <HAL_RCC_GetSysClockFreq>
 80040f2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80040f4:	e009      	b.n	800410a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80040fc:	e005      	b.n	800410a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80040fe:	2300      	movs	r3, #0
 8004100:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004108:	bf00      	nop
    }

    if (pclk != 0U)
 800410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410c:	2b00      	cmp	r3, #0
 800410e:	d021      	beq.n	8004154 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004114:	4a1a      	ldr	r2, [pc, #104]	; (8004180 <UART_SetConfig+0x590>)
 8004116:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800411a:	461a      	mov	r2, r3
 800411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	085b      	lsrs	r3, r3, #1
 8004128:	441a      	add	r2, r3
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004132:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004134:	6a3b      	ldr	r3, [r7, #32]
 8004136:	2b0f      	cmp	r3, #15
 8004138:	d909      	bls.n	800414e <UART_SetConfig+0x55e>
 800413a:	6a3b      	ldr	r3, [r7, #32]
 800413c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004140:	d205      	bcs.n	800414e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004142:	6a3b      	ldr	r3, [r7, #32]
 8004144:	b29a      	uxth	r2, r3
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	60da      	str	r2, [r3, #12]
 800414c:	e002      	b.n	8004154 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	2201      	movs	r2, #1
 8004158:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	2201      	movs	r2, #1
 8004160:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	2200      	movs	r2, #0
 8004168:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	2200      	movs	r2, #0
 800416e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004170:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004174:	4618      	mov	r0, r3
 8004176:	3730      	adds	r7, #48	; 0x30
 8004178:	46bd      	mov	sp, r7
 800417a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800417e:	bf00      	nop
 8004180:	08004780 	.word	0x08004780
 8004184:	00f42400 	.word	0x00f42400

08004188 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00a      	beq.n	80041b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00a      	beq.n	80041d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	430a      	orrs	r2, r1
 80041d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00a      	beq.n	80041f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fa:	f003 0308 	and.w	r3, r3, #8
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00a      	beq.n	8004218 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	430a      	orrs	r2, r1
 8004216:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421c:	f003 0310 	and.w	r3, r3, #16
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00a      	beq.n	800423a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423e:	f003 0320 	and.w	r3, r3, #32
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00a      	beq.n	800425c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004264:	2b00      	cmp	r3, #0
 8004266:	d01a      	beq.n	800429e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004282:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004286:	d10a      	bne.n	800429e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	430a      	orrs	r2, r1
 800429c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00a      	beq.n	80042c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	430a      	orrs	r2, r1
 80042be:	605a      	str	r2, [r3, #4]
  }
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af02      	add	r7, sp, #8
 80042d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042dc:	f7fc fd92 	bl	8000e04 <HAL_GetTick>
 80042e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0308 	and.w	r3, r3, #8
 80042ec:	2b08      	cmp	r3, #8
 80042ee:	d10e      	bne.n	800430e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042f4:	9300      	str	r3, [sp, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f82f 	bl	8004362 <UART_WaitOnFlagUntilTimeout>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e025      	b.n	800435a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0304 	and.w	r3, r3, #4
 8004318:	2b04      	cmp	r3, #4
 800431a:	d10e      	bne.n	800433a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800431c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f819 	bl	8004362 <UART_WaitOnFlagUntilTimeout>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e00f      	b.n	800435a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2220      	movs	r2, #32
 800433e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2220      	movs	r2, #32
 8004346:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3710      	adds	r7, #16
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004362:	b580      	push	{r7, lr}
 8004364:	b09c      	sub	sp, #112	; 0x70
 8004366:	af00      	add	r7, sp, #0
 8004368:	60f8      	str	r0, [r7, #12]
 800436a:	60b9      	str	r1, [r7, #8]
 800436c:	603b      	str	r3, [r7, #0]
 800436e:	4613      	mov	r3, r2
 8004370:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004372:	e0a9      	b.n	80044c8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004374:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800437a:	f000 80a5 	beq.w	80044c8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800437e:	f7fc fd41 	bl	8000e04 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800438a:	429a      	cmp	r2, r3
 800438c:	d302      	bcc.n	8004394 <UART_WaitOnFlagUntilTimeout+0x32>
 800438e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004390:	2b00      	cmp	r3, #0
 8004392:	d140      	bne.n	8004416 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800439c:	e853 3f00 	ldrex	r3, [r3]
 80043a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80043a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043a8:	667b      	str	r3, [r7, #100]	; 0x64
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	461a      	mov	r2, r3
 80043b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043b4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80043b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80043ba:	e841 2300 	strex	r3, r2, [r1]
 80043be:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80043c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1e6      	bne.n	8004394 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	3308      	adds	r3, #8
 80043cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043d0:	e853 3f00 	ldrex	r3, [r3]
 80043d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d8:	f023 0301 	bic.w	r3, r3, #1
 80043dc:	663b      	str	r3, [r7, #96]	; 0x60
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	3308      	adds	r3, #8
 80043e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80043e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80043e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80043ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043ee:	e841 2300 	strex	r3, r2, [r1]
 80043f2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80043f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1e5      	bne.n	80043c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2220      	movs	r2, #32
 80043fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2220      	movs	r2, #32
 8004406:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e069      	b.n	80044ea <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	d051      	beq.n	80044c8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800442e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004432:	d149      	bne.n	80044c8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800443c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004446:	e853 3f00 	ldrex	r3, [r3]
 800444a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004452:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	461a      	mov	r2, r3
 800445a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800445c:	637b      	str	r3, [r7, #52]	; 0x34
 800445e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004460:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004462:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004464:	e841 2300 	strex	r3, r2, [r1]
 8004468:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800446a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1e6      	bne.n	800443e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	3308      	adds	r3, #8
 8004476:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	e853 3f00 	ldrex	r3, [r3]
 800447e:	613b      	str	r3, [r7, #16]
   return(result);
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	f023 0301 	bic.w	r3, r3, #1
 8004486:	66bb      	str	r3, [r7, #104]	; 0x68
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	3308      	adds	r3, #8
 800448e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004490:	623a      	str	r2, [r7, #32]
 8004492:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004494:	69f9      	ldr	r1, [r7, #28]
 8004496:	6a3a      	ldr	r2, [r7, #32]
 8004498:	e841 2300 	strex	r3, r2, [r1]
 800449c:	61bb      	str	r3, [r7, #24]
   return(result);
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1e5      	bne.n	8004470 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2220      	movs	r2, #32
 80044a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2220      	movs	r2, #32
 80044b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2220      	movs	r2, #32
 80044b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e010      	b.n	80044ea <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	69da      	ldr	r2, [r3, #28]
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	4013      	ands	r3, r2
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	bf0c      	ite	eq
 80044d8:	2301      	moveq	r3, #1
 80044da:	2300      	movne	r3, #0
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	461a      	mov	r2, r3
 80044e0:	79fb      	ldrb	r3, [r7, #7]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	f43f af46 	beq.w	8004374 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3770      	adds	r7, #112	; 0x70
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b085      	sub	sp, #20
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004500:	2b01      	cmp	r3, #1
 8004502:	d101      	bne.n	8004508 <HAL_UARTEx_DisableFifoMode+0x16>
 8004504:	2302      	movs	r3, #2
 8004506:	e027      	b.n	8004558 <HAL_UARTEx_DisableFifoMode+0x66>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2224      	movs	r2, #36	; 0x24
 8004514:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 0201 	bic.w	r2, r2, #1
 800452e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004536:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2220      	movs	r2, #32
 800454a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3714      	adds	r7, #20
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004574:	2b01      	cmp	r3, #1
 8004576:	d101      	bne.n	800457c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004578:	2302      	movs	r3, #2
 800457a:	e02d      	b.n	80045d8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2224      	movs	r2, #36	; 0x24
 8004588:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f022 0201 	bic.w	r2, r2, #1
 80045a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	683a      	ldr	r2, [r7, #0]
 80045b4:	430a      	orrs	r2, r1
 80045b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 f84f 	bl	800465c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2220      	movs	r2, #32
 80045ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d101      	bne.n	80045f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80045f4:	2302      	movs	r3, #2
 80045f6:	e02d      	b.n	8004654 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2224      	movs	r2, #36	; 0x24
 8004604:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 0201 	bic.w	r2, r2, #1
 800461e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 f811 	bl	800465c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2220      	movs	r2, #32
 8004646:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004668:	2b00      	cmp	r3, #0
 800466a:	d108      	bne.n	800467e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800467c:	e031      	b.n	80046e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800467e:	2308      	movs	r3, #8
 8004680:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004682:	2308      	movs	r3, #8
 8004684:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	0e5b      	lsrs	r3, r3, #25
 800468e:	b2db      	uxtb	r3, r3
 8004690:	f003 0307 	and.w	r3, r3, #7
 8004694:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	0f5b      	lsrs	r3, r3, #29
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	f003 0307 	and.w	r3, r3, #7
 80046a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80046a6:	7bbb      	ldrb	r3, [r7, #14]
 80046a8:	7b3a      	ldrb	r2, [r7, #12]
 80046aa:	4911      	ldr	r1, [pc, #68]	; (80046f0 <UARTEx_SetNbDataToProcess+0x94>)
 80046ac:	5c8a      	ldrb	r2, [r1, r2]
 80046ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80046b2:	7b3a      	ldrb	r2, [r7, #12]
 80046b4:	490f      	ldr	r1, [pc, #60]	; (80046f4 <UARTEx_SetNbDataToProcess+0x98>)
 80046b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80046b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80046bc:	b29a      	uxth	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80046c4:	7bfb      	ldrb	r3, [r7, #15]
 80046c6:	7b7a      	ldrb	r2, [r7, #13]
 80046c8:	4909      	ldr	r1, [pc, #36]	; (80046f0 <UARTEx_SetNbDataToProcess+0x94>)
 80046ca:	5c8a      	ldrb	r2, [r1, r2]
 80046cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80046d0:	7b7a      	ldrb	r2, [r7, #13]
 80046d2:	4908      	ldr	r1, [pc, #32]	; (80046f4 <UARTEx_SetNbDataToProcess+0x98>)
 80046d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80046d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80046da:	b29a      	uxth	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80046e2:	bf00      	nop
 80046e4:	3714      	adds	r7, #20
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	08004798 	.word	0x08004798
 80046f4:	080047a0 	.word	0x080047a0

080046f8 <__libc_init_array>:
 80046f8:	b570      	push	{r4, r5, r6, lr}
 80046fa:	4d0d      	ldr	r5, [pc, #52]	; (8004730 <__libc_init_array+0x38>)
 80046fc:	4c0d      	ldr	r4, [pc, #52]	; (8004734 <__libc_init_array+0x3c>)
 80046fe:	1b64      	subs	r4, r4, r5
 8004700:	10a4      	asrs	r4, r4, #2
 8004702:	2600      	movs	r6, #0
 8004704:	42a6      	cmp	r6, r4
 8004706:	d109      	bne.n	800471c <__libc_init_array+0x24>
 8004708:	4d0b      	ldr	r5, [pc, #44]	; (8004738 <__libc_init_array+0x40>)
 800470a:	4c0c      	ldr	r4, [pc, #48]	; (800473c <__libc_init_array+0x44>)
 800470c:	f000 f820 	bl	8004750 <_init>
 8004710:	1b64      	subs	r4, r4, r5
 8004712:	10a4      	asrs	r4, r4, #2
 8004714:	2600      	movs	r6, #0
 8004716:	42a6      	cmp	r6, r4
 8004718:	d105      	bne.n	8004726 <__libc_init_array+0x2e>
 800471a:	bd70      	pop	{r4, r5, r6, pc}
 800471c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004720:	4798      	blx	r3
 8004722:	3601      	adds	r6, #1
 8004724:	e7ee      	b.n	8004704 <__libc_init_array+0xc>
 8004726:	f855 3b04 	ldr.w	r3, [r5], #4
 800472a:	4798      	blx	r3
 800472c:	3601      	adds	r6, #1
 800472e:	e7f2      	b.n	8004716 <__libc_init_array+0x1e>
 8004730:	080047b0 	.word	0x080047b0
 8004734:	080047b0 	.word	0x080047b0
 8004738:	080047b0 	.word	0x080047b0
 800473c:	080047b4 	.word	0x080047b4

08004740 <memset>:
 8004740:	4402      	add	r2, r0
 8004742:	4603      	mov	r3, r0
 8004744:	4293      	cmp	r3, r2
 8004746:	d100      	bne.n	800474a <memset+0xa>
 8004748:	4770      	bx	lr
 800474a:	f803 1b01 	strb.w	r1, [r3], #1
 800474e:	e7f9      	b.n	8004744 <memset+0x4>

08004750 <_init>:
 8004750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004752:	bf00      	nop
 8004754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004756:	bc08      	pop	{r3}
 8004758:	469e      	mov	lr, r3
 800475a:	4770      	bx	lr

0800475c <_fini>:
 800475c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800475e:	bf00      	nop
 8004760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004762:	bc08      	pop	{r3}
 8004764:	469e      	mov	lr, r3
 8004766:	4770      	bx	lr
