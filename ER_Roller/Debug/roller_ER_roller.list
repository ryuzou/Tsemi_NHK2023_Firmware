
ER_Roller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000817c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08008360  08008360  00018360  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008784  08008784  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08008784  08008784  00018784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800878c  0800878c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800878c  0800878c  0001878c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008790  08008790  00018790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08008794  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  200001ec  08008980  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f0  08008980  000203f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000135bf  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002488  00000000  00000000  000337db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001080  00000000  00000000  00035c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa8  00000000  00000000  00036ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f0a8  00000000  00000000  00037c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012515  00000000  00000000  00056d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c800f  00000000  00000000  0006924d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013125c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005748  00000000  00000000  001312ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001ec 	.word	0x200001ec
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008344 	.word	0x08008344

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f0 	.word	0x200001f0
 800021c:	08008344 	.word	0x08008344

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <__io_putchar>:

//gains
float kp = 0;


int __io_putchar(int ch) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 100);
 8000fa4:	1d39      	adds	r1, r7, #4
 8000fa6:	2364      	movs	r3, #100	; 0x64
 8000fa8:	2201      	movs	r2, #1
 8000faa:	4804      	ldr	r0, [pc, #16]	; (8000fbc <__io_putchar+0x20>)
 8000fac:	f003 fd84 	bl	8004ab8 <HAL_UART_Transmit>
    return ch;
 8000fb0:	687b      	ldr	r3, [r7, #4]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000338 	.word	0x20000338

08000fc0 <read_encoder_value>:
int16_t read_encoder_value(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
  uint16_t enc_buff = TIM1->CNT;
 8000fc6:	4b07      	ldr	r3, [pc, #28]	; (8000fe4 <read_encoder_value+0x24>)
 8000fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fca:	80fb      	strh	r3, [r7, #6]
  TIM1->CNT = 0;
 8000fcc:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <read_encoder_value+0x24>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	625a      	str	r2, [r3, #36]	; 0x24
  return (int16_t)enc_buff;
 8000fd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	40012c00 	.word	0x40012c00

08000fe8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fe8:	b5b0      	push	{r4, r5, r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	//feed back control
    if (htim == &htim6){
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a5f      	ldr	r2, [pc, #380]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	f040 80a4 	bne.w	8001142 <HAL_TIM_PeriodElapsedCallback+0x15a>
    	v_ref_roller = 1.6312*v_ref + 1.0809;
 8000ffa:	4b5e      	ldr	r3, [pc, #376]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff faca 	bl	8000598 <__aeabi_f2d>
 8001004:	a352      	add	r3, pc, #328	; (adr r3, 8001150 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100a:	f7ff fb1d 	bl	8000648 <__aeabi_dmul>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	4610      	mov	r0, r2
 8001014:	4619      	mov	r1, r3
 8001016:	a350      	add	r3, pc, #320	; (adr r3, 8001158 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101c:	f7ff f95e 	bl	80002dc <__adddf3>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	4610      	mov	r0, r2
 8001026:	4619      	mov	r1, r3
 8001028:	f7ff fde6 	bl	8000bf8 <__aeabi_d2f>
 800102c:	4603      	mov	r3, r0
 800102e:	4a52      	ldr	r2, [pc, #328]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001030:	6013      	str	r3, [r2, #0]
    	v += fil*(k_v*read_encoder_value()/dt - v);
 8001032:	f7ff ffc5 	bl	8000fc0 <read_encoder_value>
 8001036:	4603      	mov	r3, r0
 8001038:	ee07 3a90 	vmov	s15, r3
 800103c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001040:	4b4e      	ldr	r3, [pc, #312]	; (800117c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001042:	edd3 7a00 	vldr	s15, [r3]
 8001046:	ee67 6a27 	vmul.f32	s13, s14, s15
 800104a:	4b4d      	ldr	r3, [pc, #308]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x198>)
 800104c:	edd3 7a00 	vldr	s15, [r3]
 8001050:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001054:	4b4b      	ldr	r3, [pc, #300]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001056:	edd3 7a00 	vldr	s15, [r3]
 800105a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800105e:	4b4a      	ldr	r3, [pc, #296]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001060:	edd3 7a00 	vldr	s15, [r3]
 8001064:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001068:	4b46      	ldr	r3, [pc, #280]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800106a:	edd3 7a00 	vldr	s15, [r3]
 800106e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001072:	4b44      	ldr	r3, [pc, #272]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001074:	edc3 7a00 	vstr	s15, [r3]
    	printf("%.2f\r\n",v);
 8001078:	4b42      	ldr	r3, [pc, #264]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fa8b 	bl	8000598 <__aeabi_f2d>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	4841      	ldr	r0, [pc, #260]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001088:	f004 ffcc 	bl	8006024 <iprintf>
    	//P control
    	pwm = (int)((v_ref - 0.1861)/0.0146 + kp*(v_ref_roller - v));
 800108c:	4b39      	ldr	r3, [pc, #228]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fa81 	bl	8000598 <__aeabi_f2d>
 8001096:	a332      	add	r3, pc, #200	; (adr r3, 8001160 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109c:	f7ff f91c 	bl	80002d8 <__aeabi_dsub>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	4610      	mov	r0, r2
 80010a6:	4619      	mov	r1, r3
 80010a8:	a32f      	add	r3, pc, #188	; (adr r3, 8001168 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80010aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ae:	f7ff fbf5 	bl	800089c <__aeabi_ddiv>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4614      	mov	r4, r2
 80010b8:	461d      	mov	r5, r3
 80010ba:	4b2f      	ldr	r3, [pc, #188]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80010bc:	ed93 7a00 	vldr	s14, [r3]
 80010c0:	4b30      	ldr	r3, [pc, #192]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80010c2:	edd3 7a00 	vldr	s15, [r3]
 80010c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010ca:	4b31      	ldr	r3, [pc, #196]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80010cc:	edd3 7a00 	vldr	s15, [r3]
 80010d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010d4:	ee17 0a90 	vmov	r0, s15
 80010d8:	f7ff fa5e 	bl	8000598 <__aeabi_f2d>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	4620      	mov	r0, r4
 80010e2:	4629      	mov	r1, r5
 80010e4:	f7ff f8fa 	bl	80002dc <__adddf3>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	4610      	mov	r0, r2
 80010ee:	4619      	mov	r1, r3
 80010f0:	f7ff fd5a 	bl	8000ba8 <__aeabi_d2iz>
 80010f4:	4603      	mov	r3, r0
 80010f6:	4a27      	ldr	r2, [pc, #156]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80010f8:	6013      	str	r3, [r2, #0]
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1,1);
    	}else{
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1,0);
    	}
    	*/
    	pwm = abs(pwm);
 80010fa:	4b26      	ldr	r3, [pc, #152]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	bfb8      	it	lt
 8001102:	425b      	neglt	r3, r3
 8001104:	4a23      	ldr	r2, [pc, #140]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001106:	6013      	str	r3, [r2, #0]
    	//limit pwm
    	if(pwm < 0){
 8001108:	4b22      	ldr	r3, [pc, #136]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	da03      	bge.n	8001118 <HAL_TIM_PeriodElapsedCallback+0x130>
    	   pwm = 0;
 8001110:	4b20      	ldr	r3, [pc, #128]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	e008      	b.n	800112a <HAL_TIM_PeriodElapsedCallback+0x142>
    	}else if(pwm > 980){
 8001118:	4b1e      	ldr	r3, [pc, #120]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f5b3 7f75 	cmp.w	r3, #980	; 0x3d4
 8001120:	dd03      	ble.n	800112a <HAL_TIM_PeriodElapsedCallback+0x142>
    	   pwm = 980;
 8001122:	4b1c      	ldr	r3, [pc, #112]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001124:	f44f 7275 	mov.w	r2, #980	; 0x3d4
 8001128:	601a      	str	r2, [r3, #0]
    	}
    	pwm = 1000 - pwm;
 800112a:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8001132:	4a18      	ldr	r2, [pc, #96]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001134:	6013      	str	r3, [r2, #0]
    	//pwm = 350;
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1,0);
 8001136:	2200      	movs	r2, #0
 8001138:	2102      	movs	r1, #2
 800113a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800113e:	f001 f86d 	bl	800221c <HAL_GPIO_WritePin>
    }

}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bdb0      	pop	{r4, r5, r7, pc}
 800114a:	bf00      	nop
 800114c:	f3af 8000 	nop.w
 8001150:	2bd3c361 	.word	0x2bd3c361
 8001154:	3ffa1965 	.word	0x3ffa1965
 8001158:	cc63f141 	.word	0xcc63f141
 800115c:	3ff14b5d 	.word	0x3ff14b5d
 8001160:	f2e48e8a 	.word	0xf2e48e8a
 8001164:	3fc7d21f 	.word	0x3fc7d21f
 8001168:	d42c3c9f 	.word	0xd42c3c9f
 800116c:	3f8de69a 	.word	0x3f8de69a
 8001170:	200002ec 	.word	0x200002ec
 8001174:	20000004 	.word	0x20000004
 8001178:	200003cc 	.word	0x200003cc
 800117c:	20000008 	.word	0x20000008
 8001180:	20000000 	.word	0x20000000
 8001184:	200003c8 	.word	0x200003c8
 8001188:	2000000c 	.word	0x2000000c
 800118c:	08008360 	.word	0x08008360
 8001190:	200003d4 	.word	0x200003d4
 8001194:	200003d0 	.word	0x200003d0

08001198 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800119c:	f000 fd3b 	bl	8001c16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a0:	f000 f82e 	bl	8001200 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a4:	f000 fa40 	bl	8001628 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011a8:	f000 f9f2 	bl	8001590 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80011ac:	f000 f874 	bl	8001298 <MX_TIM1_Init>
  MX_TIM2_Init();
 80011b0:	f000 f8cc 	bl	800134c <MX_TIM2_Init>
  MX_TIM6_Init();
 80011b4:	f000 f9b6 	bl	8001524 <MX_TIM6_Init>
  MX_TIM3_Init();
 80011b8:	f000 f93e 	bl	8001438 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  setbuf(stdout,NULL);
 80011bc:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <main+0x54>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f004 ff45 	bl	8006054 <setbuf>
  //HAL_TIM_Base_Start_IT(&htim2);
  HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80011ca:	213c      	movs	r1, #60	; 0x3c
 80011cc:	4808      	ldr	r0, [pc, #32]	; (80011f0 <main+0x58>)
 80011ce:	f002 facf 	bl	8003770 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 80011d2:	4808      	ldr	r0, [pc, #32]	; (80011f4 <main+0x5c>)
 80011d4:	f002 f85a 	bl	800328c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80011d8:	2100      	movs	r1, #0
 80011da:	4807      	ldr	r0, [pc, #28]	; (80011f8 <main+0x60>)
 80011dc:	f002 f922 	bl	8003424 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,pwm);
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <main+0x64>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <main+0x60>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	635a      	str	r2, [r3, #52]	; 0x34
 80011ea:	e7f9      	b.n	80011e0 <main+0x48>
 80011ec:	2000001c 	.word	0x2000001c
 80011f0:	20000208 	.word	0x20000208
 80011f4:	200002ec 	.word	0x200002ec
 80011f8:	20000254 	.word	0x20000254
 80011fc:	200003d0 	.word	0x200003d0

08001200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b094      	sub	sp, #80	; 0x50
 8001204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001206:	f107 0318 	add.w	r3, r7, #24
 800120a:	2238      	movs	r2, #56	; 0x38
 800120c:	2100      	movs	r1, #0
 800120e:	4618      	mov	r0, r3
 8001210:	f004 fa96 	bl	8005740 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001214:	1d3b      	adds	r3, r7, #4
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
 8001220:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001222:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001226:	f001 f811 	bl	800224c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800122a:	2302      	movs	r3, #2
 800122c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800122e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001234:	2340      	movs	r3, #64	; 0x40
 8001236:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001238:	2302      	movs	r3, #2
 800123a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800123c:	2302      	movs	r3, #2
 800123e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001240:	2301      	movs	r3, #1
 8001242:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001244:	230a      	movs	r3, #10
 8001246:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001248:	2302      	movs	r3, #2
 800124a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800124c:	2302      	movs	r3, #2
 800124e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001250:	2302      	movs	r3, #2
 8001252:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001254:	f107 0318 	add.w	r3, r7, #24
 8001258:	4618      	mov	r0, r3
 800125a:	f001 f89b 	bl	8002394 <HAL_RCC_OscConfig>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001264:	f000 fa36 	bl	80016d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001268:	230f      	movs	r3, #15
 800126a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800126c:	2303      	movs	r3, #3
 800126e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001274:	2300      	movs	r3, #0
 8001276:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	2102      	movs	r1, #2
 8001280:	4618      	mov	r0, r3
 8001282:	f001 fb9f 	bl	80029c4 <HAL_RCC_ClockConfig>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800128c:	f000 fa22 	bl	80016d4 <Error_Handler>
  }
}
 8001290:	bf00      	nop
 8001292:	3750      	adds	r7, #80	; 0x50
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08c      	sub	sp, #48	; 0x30
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800129e:	f107 030c 	add.w	r3, r7, #12
 80012a2:	2224      	movs	r2, #36	; 0x24
 80012a4:	2100      	movs	r1, #0
 80012a6:	4618      	mov	r0, r3
 80012a8:	f004 fa4a 	bl	8005740 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ac:	463b      	mov	r3, r7
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012b6:	4b23      	ldr	r3, [pc, #140]	; (8001344 <MX_TIM1_Init+0xac>)
 80012b8:	4a23      	ldr	r2, [pc, #140]	; (8001348 <MX_TIM1_Init+0xb0>)
 80012ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012bc:	4b21      	ldr	r3, [pc, #132]	; (8001344 <MX_TIM1_Init+0xac>)
 80012be:	2200      	movs	r2, #0
 80012c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c2:	4b20      	ldr	r3, [pc, #128]	; (8001344 <MX_TIM1_Init+0xac>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80012c8:	4b1e      	ldr	r3, [pc, #120]	; (8001344 <MX_TIM1_Init+0xac>)
 80012ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d0:	4b1c      	ldr	r3, [pc, #112]	; (8001344 <MX_TIM1_Init+0xac>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012d6:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <MX_TIM1_Init+0xac>)
 80012d8:	2200      	movs	r2, #0
 80012da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012dc:	4b19      	ldr	r3, [pc, #100]	; (8001344 <MX_TIM1_Init+0xac>)
 80012de:	2200      	movs	r2, #0
 80012e0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012e2:	2303      	movs	r3, #3
 80012e4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012ea:	2301      	movs	r3, #1
 80012ec:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012f6:	2300      	movs	r3, #0
 80012f8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012fa:	2301      	movs	r3, #1
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012fe:	2300      	movs	r3, #0
 8001300:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001306:	f107 030c 	add.w	r3, r7, #12
 800130a:	4619      	mov	r1, r3
 800130c:	480d      	ldr	r0, [pc, #52]	; (8001344 <MX_TIM1_Init+0xac>)
 800130e:	f002 f989 	bl	8003624 <HAL_TIM_Encoder_Init>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001318:	f000 f9dc 	bl	80016d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800131c:	2300      	movs	r3, #0
 800131e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001320:	2300      	movs	r3, #0
 8001322:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001324:	2300      	movs	r3, #0
 8001326:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001328:	463b      	mov	r3, r7
 800132a:	4619      	mov	r1, r3
 800132c:	4805      	ldr	r0, [pc, #20]	; (8001344 <MX_TIM1_Init+0xac>)
 800132e:	f003 faab 	bl	8004888 <HAL_TIMEx_MasterConfigSynchronization>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001338:	f000 f9cc 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800133c:	bf00      	nop
 800133e:	3730      	adds	r7, #48	; 0x30
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000208 	.word	0x20000208
 8001348:	40012c00 	.word	0x40012c00

0800134c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08e      	sub	sp, #56	; 0x38
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001352:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001360:	f107 031c 	add.w	r3, r7, #28
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800136c:	463b      	mov	r3, r7
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	611a      	str	r2, [r3, #16]
 800137a:	615a      	str	r2, [r3, #20]
 800137c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800137e:	4b2d      	ldr	r3, [pc, #180]	; (8001434 <MX_TIM2_Init+0xe8>)
 8001380:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001384:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8001386:	4b2b      	ldr	r3, [pc, #172]	; (8001434 <MX_TIM2_Init+0xe8>)
 8001388:	2207      	movs	r2, #7
 800138a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138c:	4b29      	ldr	r3, [pc, #164]	; (8001434 <MX_TIM2_Init+0xe8>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001392:	4b28      	ldr	r3, [pc, #160]	; (8001434 <MX_TIM2_Init+0xe8>)
 8001394:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001398:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139a:	4b26      	ldr	r3, [pc, #152]	; (8001434 <MX_TIM2_Init+0xe8>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a0:	4b24      	ldr	r3, [pc, #144]	; (8001434 <MX_TIM2_Init+0xe8>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013a6:	4823      	ldr	r0, [pc, #140]	; (8001434 <MX_TIM2_Init+0xe8>)
 80013a8:	f001 ff18 	bl	80031dc <HAL_TIM_Base_Init>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80013b2:	f000 f98f 	bl	80016d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013c0:	4619      	mov	r1, r3
 80013c2:	481c      	ldr	r0, [pc, #112]	; (8001434 <MX_TIM2_Init+0xe8>)
 80013c4:	f002 fcf6 	bl	8003db4 <HAL_TIM_ConfigClockSource>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80013ce:	f000 f981 	bl	80016d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013d2:	4818      	ldr	r0, [pc, #96]	; (8001434 <MX_TIM2_Init+0xe8>)
 80013d4:	f001 ffc4 	bl	8003360 <HAL_TIM_PWM_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80013de:	f000 f979 	bl	80016d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e6:	2300      	movs	r3, #0
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013ea:	f107 031c 	add.w	r3, r7, #28
 80013ee:	4619      	mov	r1, r3
 80013f0:	4810      	ldr	r0, [pc, #64]	; (8001434 <MX_TIM2_Init+0xe8>)
 80013f2:	f003 fa49 	bl	8004888 <HAL_TIMEx_MasterConfigSynchronization>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80013fc:	f000 f96a 	bl	80016d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001400:	2360      	movs	r3, #96	; 0x60
 8001402:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001408:	2300      	movs	r3, #0
 800140a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800140c:	2300      	movs	r3, #0
 800140e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001410:	463b      	mov	r3, r7
 8001412:	2200      	movs	r2, #0
 8001414:	4619      	mov	r1, r3
 8001416:	4807      	ldr	r0, [pc, #28]	; (8001434 <MX_TIM2_Init+0xe8>)
 8001418:	f002 fbb8 	bl	8003b8c <HAL_TIM_PWM_ConfigChannel>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001422:	f000 f957 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001426:	4803      	ldr	r0, [pc, #12]	; (8001434 <MX_TIM2_Init+0xe8>)
 8001428:	f000 fa0e 	bl	8001848 <HAL_TIM_MspPostInit>

}
 800142c:	bf00      	nop
 800142e:	3738      	adds	r7, #56	; 0x38
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000254 	.word	0x20000254

08001438 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08e      	sub	sp, #56	; 0x38
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800143e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800144c:	f107 031c 	add.w	r3, r7, #28
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001458:	463b      	mov	r3, r7
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
 8001464:	611a      	str	r2, [r3, #16]
 8001466:	615a      	str	r2, [r3, #20]
 8001468:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800146a:	4b2c      	ldr	r3, [pc, #176]	; (800151c <MX_TIM3_Init+0xe4>)
 800146c:	4a2c      	ldr	r2, [pc, #176]	; (8001520 <MX_TIM3_Init+0xe8>)
 800146e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8001470:	4b2a      	ldr	r3, [pc, #168]	; (800151c <MX_TIM3_Init+0xe4>)
 8001472:	224f      	movs	r2, #79	; 0x4f
 8001474:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001476:	4b29      	ldr	r3, [pc, #164]	; (800151c <MX_TIM3_Init+0xe4>)
 8001478:	2200      	movs	r2, #0
 800147a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800147c:	4b27      	ldr	r3, [pc, #156]	; (800151c <MX_TIM3_Init+0xe4>)
 800147e:	2263      	movs	r2, #99	; 0x63
 8001480:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001482:	4b26      	ldr	r3, [pc, #152]	; (800151c <MX_TIM3_Init+0xe4>)
 8001484:	2200      	movs	r2, #0
 8001486:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001488:	4b24      	ldr	r3, [pc, #144]	; (800151c <MX_TIM3_Init+0xe4>)
 800148a:	2200      	movs	r2, #0
 800148c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800148e:	4823      	ldr	r0, [pc, #140]	; (800151c <MX_TIM3_Init+0xe4>)
 8001490:	f001 fea4 	bl	80031dc <HAL_TIM_Base_Init>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800149a:	f000 f91b 	bl	80016d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800149e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014a8:	4619      	mov	r1, r3
 80014aa:	481c      	ldr	r0, [pc, #112]	; (800151c <MX_TIM3_Init+0xe4>)
 80014ac:	f002 fc82 	bl	8003db4 <HAL_TIM_ConfigClockSource>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80014b6:	f000 f90d 	bl	80016d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80014ba:	4818      	ldr	r0, [pc, #96]	; (800151c <MX_TIM3_Init+0xe4>)
 80014bc:	f001 ff50 	bl	8003360 <HAL_TIM_PWM_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80014c6:	f000 f905 	bl	80016d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014d2:	f107 031c 	add.w	r3, r7, #28
 80014d6:	4619      	mov	r1, r3
 80014d8:	4810      	ldr	r0, [pc, #64]	; (800151c <MX_TIM3_Init+0xe4>)
 80014da:	f003 f9d5 	bl	8004888 <HAL_TIMEx_MasterConfigSynchronization>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80014e4:	f000 f8f6 	bl	80016d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014e8:	2360      	movs	r3, #96	; 0x60
 80014ea:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014f0:	2300      	movs	r3, #0
 80014f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014f4:	2300      	movs	r3, #0
 80014f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014f8:	463b      	mov	r3, r7
 80014fa:	2200      	movs	r2, #0
 80014fc:	4619      	mov	r1, r3
 80014fe:	4807      	ldr	r0, [pc, #28]	; (800151c <MX_TIM3_Init+0xe4>)
 8001500:	f002 fb44 	bl	8003b8c <HAL_TIM_PWM_ConfigChannel>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800150a:	f000 f8e3 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800150e:	4803      	ldr	r0, [pc, #12]	; (800151c <MX_TIM3_Init+0xe4>)
 8001510:	f000 f99a 	bl	8001848 <HAL_TIM_MspPostInit>

}
 8001514:	bf00      	nop
 8001516:	3738      	adds	r7, #56	; 0x38
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	200002a0 	.word	0x200002a0
 8001520:	40000400 	.word	0x40000400

08001524 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001534:	4b14      	ldr	r3, [pc, #80]	; (8001588 <MX_TIM6_Init+0x64>)
 8001536:	4a15      	ldr	r2, [pc, #84]	; (800158c <MX_TIM6_Init+0x68>)
 8001538:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 800153a:	4b13      	ldr	r3, [pc, #76]	; (8001588 <MX_TIM6_Init+0x64>)
 800153c:	224f      	movs	r2, #79	; 0x4f
 800153e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001540:	4b11      	ldr	r3, [pc, #68]	; (8001588 <MX_TIM6_Init+0x64>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1999;
 8001546:	4b10      	ldr	r3, [pc, #64]	; (8001588 <MX_TIM6_Init+0x64>)
 8001548:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800154c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <MX_TIM6_Init+0x64>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001554:	480c      	ldr	r0, [pc, #48]	; (8001588 <MX_TIM6_Init+0x64>)
 8001556:	f001 fe41 	bl	80031dc <HAL_TIM_Base_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001560:	f000 f8b8 	bl	80016d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001564:	2300      	movs	r3, #0
 8001566:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	4619      	mov	r1, r3
 8001570:	4805      	ldr	r0, [pc, #20]	; (8001588 <MX_TIM6_Init+0x64>)
 8001572:	f003 f989 	bl	8004888 <HAL_TIMEx_MasterConfigSynchronization>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800157c:	f000 f8aa 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001580:	bf00      	nop
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	200002ec 	.word	0x200002ec
 800158c:	40001000 	.word	0x40001000

08001590 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001594:	4b22      	ldr	r3, [pc, #136]	; (8001620 <MX_USART2_UART_Init+0x90>)
 8001596:	4a23      	ldr	r2, [pc, #140]	; (8001624 <MX_USART2_UART_Init+0x94>)
 8001598:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800159a:	4b21      	ldr	r3, [pc, #132]	; (8001620 <MX_USART2_UART_Init+0x90>)
 800159c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015a2:	4b1f      	ldr	r3, [pc, #124]	; (8001620 <MX_USART2_UART_Init+0x90>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015a8:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <MX_USART2_UART_Init+0x90>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015ae:	4b1c      	ldr	r3, [pc, #112]	; (8001620 <MX_USART2_UART_Init+0x90>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015b4:	4b1a      	ldr	r3, [pc, #104]	; (8001620 <MX_USART2_UART_Init+0x90>)
 80015b6:	220c      	movs	r2, #12
 80015b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ba:	4b19      	ldr	r3, [pc, #100]	; (8001620 <MX_USART2_UART_Init+0x90>)
 80015bc:	2200      	movs	r2, #0
 80015be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c0:	4b17      	ldr	r3, [pc, #92]	; (8001620 <MX_USART2_UART_Init+0x90>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015c6:	4b16      	ldr	r3, [pc, #88]	; (8001620 <MX_USART2_UART_Init+0x90>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015cc:	4b14      	ldr	r3, [pc, #80]	; (8001620 <MX_USART2_UART_Init+0x90>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015d2:	4b13      	ldr	r3, [pc, #76]	; (8001620 <MX_USART2_UART_Init+0x90>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015d8:	4811      	ldr	r0, [pc, #68]	; (8001620 <MX_USART2_UART_Init+0x90>)
 80015da:	f003 fa1d 	bl	8004a18 <HAL_UART_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80015e4:	f000 f876 	bl	80016d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015e8:	2100      	movs	r1, #0
 80015ea:	480d      	ldr	r0, [pc, #52]	; (8001620 <MX_USART2_UART_Init+0x90>)
 80015ec:	f003 ffb4 	bl	8005558 <HAL_UARTEx_SetTxFifoThreshold>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80015f6:	f000 f86d 	bl	80016d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015fa:	2100      	movs	r1, #0
 80015fc:	4808      	ldr	r0, [pc, #32]	; (8001620 <MX_USART2_UART_Init+0x90>)
 80015fe:	f003 ffe9 	bl	80055d4 <HAL_UARTEx_SetRxFifoThreshold>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001608:	f000 f864 	bl	80016d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800160c:	4804      	ldr	r0, [pc, #16]	; (8001620 <MX_USART2_UART_Init+0x90>)
 800160e:	f003 ff6a 	bl	80054e6 <HAL_UARTEx_DisableFifoMode>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001618:	f000 f85c 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800161c:	bf00      	nop
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000338 	.word	0x20000338
 8001624:	40004400 	.word	0x40004400

08001628 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b088      	sub	sp, #32
 800162c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162e:	f107 030c 	add.w	r3, r7, #12
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]
 800163c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800163e:	4b23      	ldr	r3, [pc, #140]	; (80016cc <MX_GPIO_Init+0xa4>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001642:	4a22      	ldr	r2, [pc, #136]	; (80016cc <MX_GPIO_Init+0xa4>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800164a:	4b20      	ldr	r3, [pc, #128]	; (80016cc <MX_GPIO_Init+0xa4>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001656:	4b1d      	ldr	r3, [pc, #116]	; (80016cc <MX_GPIO_Init+0xa4>)
 8001658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165a:	4a1c      	ldr	r2, [pc, #112]	; (80016cc <MX_GPIO_Init+0xa4>)
 800165c:	f043 0302 	orr.w	r3, r3, #2
 8001660:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001662:	4b1a      	ldr	r3, [pc, #104]	; (80016cc <MX_GPIO_Init+0xa4>)
 8001664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800166e:	2200      	movs	r2, #0
 8001670:	2102      	movs	r1, #2
 8001672:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001676:	f000 fdd1 	bl	800221c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800167a:	2200      	movs	r2, #0
 800167c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001680:	4813      	ldr	r0, [pc, #76]	; (80016d0 <MX_GPIO_Init+0xa8>)
 8001682:	f000 fdcb 	bl	800221c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001686:	2302      	movs	r3, #2
 8001688:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168a:	2301      	movs	r3, #1
 800168c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001692:	2300      	movs	r3, #0
 8001694:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001696:	f107 030c 	add.w	r3, r7, #12
 800169a:	4619      	mov	r1, r3
 800169c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a0:	f000 fc3a 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80016a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016aa:	2301      	movs	r3, #1
 80016ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80016b6:	f107 030c 	add.w	r3, r7, #12
 80016ba:	4619      	mov	r1, r3
 80016bc:	4804      	ldr	r0, [pc, #16]	; (80016d0 <MX_GPIO_Init+0xa8>)
 80016be:	f000 fc2b 	bl	8001f18 <HAL_GPIO_Init>

}
 80016c2:	bf00      	nop
 80016c4:	3720      	adds	r7, #32
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40021000 	.word	0x40021000
 80016d0:	48000400 	.word	0x48000400

080016d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d8:	b672      	cpsid	i
}
 80016da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016dc:	e7fe      	b.n	80016dc <Error_Handler+0x8>
	...

080016e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e6:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <HAL_MspInit+0x44>)
 80016e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ea:	4a0e      	ldr	r2, [pc, #56]	; (8001724 <HAL_MspInit+0x44>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	6613      	str	r3, [r2, #96]	; 0x60
 80016f2:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <HAL_MspInit+0x44>)
 80016f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016fe:	4b09      	ldr	r3, [pc, #36]	; (8001724 <HAL_MspInit+0x44>)
 8001700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001702:	4a08      	ldr	r2, [pc, #32]	; (8001724 <HAL_MspInit+0x44>)
 8001704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001708:	6593      	str	r3, [r2, #88]	; 0x58
 800170a:	4b06      	ldr	r3, [pc, #24]	; (8001724 <HAL_MspInit+0x44>)
 800170c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001712:	603b      	str	r3, [r7, #0]
 8001714:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	40021000 	.word	0x40021000

08001728 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08a      	sub	sp, #40	; 0x28
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a18      	ldr	r2, [pc, #96]	; (80017a8 <HAL_TIM_Encoder_MspInit+0x80>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d129      	bne.n	800179e <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800174a:	4b18      	ldr	r3, [pc, #96]	; (80017ac <HAL_TIM_Encoder_MspInit+0x84>)
 800174c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800174e:	4a17      	ldr	r2, [pc, #92]	; (80017ac <HAL_TIM_Encoder_MspInit+0x84>)
 8001750:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001754:	6613      	str	r3, [r2, #96]	; 0x60
 8001756:	4b15      	ldr	r3, [pc, #84]	; (80017ac <HAL_TIM_Encoder_MspInit+0x84>)
 8001758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800175a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001762:	4b12      	ldr	r3, [pc, #72]	; (80017ac <HAL_TIM_Encoder_MspInit+0x84>)
 8001764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001766:	4a11      	ldr	r2, [pc, #68]	; (80017ac <HAL_TIM_Encoder_MspInit+0x84>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800176e:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <HAL_TIM_Encoder_MspInit+0x84>)
 8001770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800177a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800177e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001780:	2302      	movs	r3, #2
 8001782:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001788:	2300      	movs	r3, #0
 800178a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800178c:	2306      	movs	r3, #6
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001790:	f107 0314 	add.w	r3, r7, #20
 8001794:	4619      	mov	r1, r3
 8001796:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800179a:	f000 fbbd 	bl	8001f18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800179e:	bf00      	nop
 80017a0:	3728      	adds	r7, #40	; 0x28
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40012c00 	.word	0x40012c00
 80017ac:	40021000 	.word	0x40021000

080017b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017c0:	d10c      	bne.n	80017dc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017c2:	4b1e      	ldr	r3, [pc, #120]	; (800183c <HAL_TIM_Base_MspInit+0x8c>)
 80017c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c6:	4a1d      	ldr	r2, [pc, #116]	; (800183c <HAL_TIM_Base_MspInit+0x8c>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	6593      	str	r3, [r2, #88]	; 0x58
 80017ce:	4b1b      	ldr	r3, [pc, #108]	; (800183c <HAL_TIM_Base_MspInit+0x8c>)
 80017d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	617b      	str	r3, [r7, #20]
 80017d8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80017da:	e02a      	b.n	8001832 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a17      	ldr	r2, [pc, #92]	; (8001840 <HAL_TIM_Base_MspInit+0x90>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d10c      	bne.n	8001800 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <HAL_TIM_Base_MspInit+0x8c>)
 80017e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ea:	4a14      	ldr	r2, [pc, #80]	; (800183c <HAL_TIM_Base_MspInit+0x8c>)
 80017ec:	f043 0302 	orr.w	r3, r3, #2
 80017f0:	6593      	str	r3, [r2, #88]	; 0x58
 80017f2:	4b12      	ldr	r3, [pc, #72]	; (800183c <HAL_TIM_Base_MspInit+0x8c>)
 80017f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	693b      	ldr	r3, [r7, #16]
}
 80017fe:	e018      	b.n	8001832 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a0f      	ldr	r2, [pc, #60]	; (8001844 <HAL_TIM_Base_MspInit+0x94>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d113      	bne.n	8001832 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800180a:	4b0c      	ldr	r3, [pc, #48]	; (800183c <HAL_TIM_Base_MspInit+0x8c>)
 800180c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180e:	4a0b      	ldr	r2, [pc, #44]	; (800183c <HAL_TIM_Base_MspInit+0x8c>)
 8001810:	f043 0310 	orr.w	r3, r3, #16
 8001814:	6593      	str	r3, [r2, #88]	; 0x58
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <HAL_TIM_Base_MspInit+0x8c>)
 8001818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181a:	f003 0310 	and.w	r3, r3, #16
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001822:	2200      	movs	r2, #0
 8001824:	2100      	movs	r1, #0
 8001826:	2036      	movs	r0, #54	; 0x36
 8001828:	f000 fb41 	bl	8001eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800182c:	2036      	movs	r0, #54	; 0x36
 800182e:	f000 fb58 	bl	8001ee2 <HAL_NVIC_EnableIRQ>
}
 8001832:	bf00      	nop
 8001834:	3718      	adds	r7, #24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40021000 	.word	0x40021000
 8001840:	40000400 	.word	0x40000400
 8001844:	40001000 	.word	0x40001000

08001848 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08a      	sub	sp, #40	; 0x28
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001868:	d11d      	bne.n	80018a6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186a:	4b22      	ldr	r3, [pc, #136]	; (80018f4 <HAL_TIM_MspPostInit+0xac>)
 800186c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186e:	4a21      	ldr	r2, [pc, #132]	; (80018f4 <HAL_TIM_MspPostInit+0xac>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001876:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <HAL_TIM_MspPostInit+0xac>)
 8001878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	613b      	str	r3, [r7, #16]
 8001880:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001882:	2301      	movs	r3, #1
 8001884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001886:	2302      	movs	r3, #2
 8001888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188e:	2300      	movs	r3, #0
 8001890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001892:	2301      	movs	r3, #1
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001896:	f107 0314 	add.w	r3, r7, #20
 800189a:	4619      	mov	r1, r3
 800189c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a0:	f000 fb3a 	bl	8001f18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80018a4:	e021      	b.n	80018ea <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM3)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a13      	ldr	r2, [pc, #76]	; (80018f8 <HAL_TIM_MspPostInit+0xb0>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d11c      	bne.n	80018ea <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b0:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <HAL_TIM_MspPostInit+0xac>)
 80018b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b4:	4a0f      	ldr	r2, [pc, #60]	; (80018f4 <HAL_TIM_MspPostInit+0xac>)
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018bc:	4b0d      	ldr	r3, [pc, #52]	; (80018f4 <HAL_TIM_MspPostInit+0xac>)
 80018be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018c8:	2340      	movs	r3, #64	; 0x40
 80018ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018cc:	2302      	movs	r3, #2
 80018ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d4:	2300      	movs	r3, #0
 80018d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018d8:	2302      	movs	r3, #2
 80018da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018dc:	f107 0314 	add.w	r3, r7, #20
 80018e0:	4619      	mov	r1, r3
 80018e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018e6:	f000 fb17 	bl	8001f18 <HAL_GPIO_Init>
}
 80018ea:	bf00      	nop
 80018ec:	3728      	adds	r7, #40	; 0x28
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40021000 	.word	0x40021000
 80018f8:	40000400 	.word	0x40000400

080018fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b09a      	sub	sp, #104	; 0x68
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001914:	f107 0310 	add.w	r3, r7, #16
 8001918:	2244      	movs	r2, #68	; 0x44
 800191a:	2100      	movs	r1, #0
 800191c:	4618      	mov	r0, r3
 800191e:	f003 ff0f 	bl	8005740 <memset>
  if(huart->Instance==USART2)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a1f      	ldr	r2, [pc, #124]	; (80019a4 <HAL_UART_MspInit+0xa8>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d136      	bne.n	800199a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800192c:	2302      	movs	r3, #2
 800192e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001930:	2300      	movs	r3, #0
 8001932:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001934:	f107 0310 	add.w	r3, r7, #16
 8001938:	4618      	mov	r0, r3
 800193a:	f001 fa5f 	bl	8002dfc <HAL_RCCEx_PeriphCLKConfig>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001944:	f7ff fec6 	bl	80016d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001948:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <HAL_UART_MspInit+0xac>)
 800194a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194c:	4a16      	ldr	r2, [pc, #88]	; (80019a8 <HAL_UART_MspInit+0xac>)
 800194e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001952:	6593      	str	r3, [r2, #88]	; 0x58
 8001954:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <HAL_UART_MspInit+0xac>)
 8001956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001960:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <HAL_UART_MspInit+0xac>)
 8001962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001964:	4a10      	ldr	r2, [pc, #64]	; (80019a8 <HAL_UART_MspInit+0xac>)
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800196c:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <HAL_UART_MspInit+0xac>)
 800196e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	60bb      	str	r3, [r7, #8]
 8001976:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001978:	230c      	movs	r3, #12
 800197a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197c:	2302      	movs	r3, #2
 800197e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001984:	2300      	movs	r3, #0
 8001986:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001988:	2307      	movs	r3, #7
 800198a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001990:	4619      	mov	r1, r3
 8001992:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001996:	f000 fabf 	bl	8001f18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800199a:	bf00      	nop
 800199c:	3768      	adds	r7, #104	; 0x68
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40004400 	.word	0x40004400
 80019a8:	40021000 	.word	0x40021000

080019ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019b0:	e7fe      	b.n	80019b0 <NMI_Handler+0x4>

080019b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019b6:	e7fe      	b.n	80019b6 <HardFault_Handler+0x4>

080019b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019bc:	e7fe      	b.n	80019bc <MemManage_Handler+0x4>

080019be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019c2:	e7fe      	b.n	80019c2 <BusFault_Handler+0x4>

080019c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c8:	e7fe      	b.n	80019c8 <UsageFault_Handler+0x4>

080019ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ca:	b480      	push	{r7}
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019f8:	f000 f960 	bl	8001cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a04:	4802      	ldr	r0, [pc, #8]	; (8001a10 <TIM6_DAC_IRQHandler+0x10>)
 8001a06:	f001 ff41 	bl	800388c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	200002ec 	.word	0x200002ec

08001a14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
	return 1;
 8001a18:	2301      	movs	r3, #1
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <_kill>:

int _kill(int pid, int sig)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a2e:	f003 fe5d 	bl	80056ec <__errno>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2216      	movs	r2, #22
 8001a36:	601a      	str	r2, [r3, #0]
	return -1;
 8001a38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <_exit>:

void _exit (int status)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff ffe7 	bl	8001a24 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a56:	e7fe      	b.n	8001a56 <_exit+0x12>

08001a58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]
 8001a68:	e00a      	b.n	8001a80 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a6a:	f3af 8000 	nop.w
 8001a6e:	4601      	mov	r1, r0
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	1c5a      	adds	r2, r3, #1
 8001a74:	60ba      	str	r2, [r7, #8]
 8001a76:	b2ca      	uxtb	r2, r1
 8001a78:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	617b      	str	r3, [r7, #20]
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	dbf0      	blt.n	8001a6a <_read+0x12>
	}

return len;
 8001a88:	687b      	ldr	r3, [r7, #4]
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3718      	adds	r7, #24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b086      	sub	sp, #24
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	60f8      	str	r0, [r7, #12]
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	e009      	b.n	8001ab8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	1c5a      	adds	r2, r3, #1
 8001aa8:	60ba      	str	r2, [r7, #8]
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff fa75 	bl	8000f9c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	697a      	ldr	r2, [r7, #20]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	dbf1      	blt.n	8001aa4 <_write+0x12>
	}
	return len;
 8001ac0:	687b      	ldr	r3, [r7, #4]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <_close>:

int _close(int file)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
	return -1;
 8001ad2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
 8001aea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001af2:	605a      	str	r2, [r3, #4]
	return 0;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <_isatty>:

int _isatty(int file)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
	return 1;
 8001b0a:	2301      	movs	r3, #1
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
	return 0;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
	...

08001b34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b3c:	4a14      	ldr	r2, [pc, #80]	; (8001b90 <_sbrk+0x5c>)
 8001b3e:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <_sbrk+0x60>)
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b48:	4b13      	ldr	r3, [pc, #76]	; (8001b98 <_sbrk+0x64>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d102      	bne.n	8001b56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b50:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <_sbrk+0x64>)
 8001b52:	4a12      	ldr	r2, [pc, #72]	; (8001b9c <_sbrk+0x68>)
 8001b54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b56:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <_sbrk+0x64>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d207      	bcs.n	8001b74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b64:	f003 fdc2 	bl	80056ec <__errno>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	220c      	movs	r2, #12
 8001b6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b72:	e009      	b.n	8001b88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b74:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <_sbrk+0x64>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b7a:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <_sbrk+0x64>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	4a05      	ldr	r2, [pc, #20]	; (8001b98 <_sbrk+0x64>)
 8001b84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b86:	68fb      	ldr	r3, [r7, #12]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3718      	adds	r7, #24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20008000 	.word	0x20008000
 8001b94:	00000400 	.word	0x00000400
 8001b98:	200003d8 	.word	0x200003d8
 8001b9c:	200003f0 	.word	0x200003f0

08001ba0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <SystemInit+0x20>)
 8001ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001baa:	4a05      	ldr	r2, [pc, #20]	; (8001bc0 <SystemInit+0x20>)
 8001bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bc4:	480d      	ldr	r0, [pc, #52]	; (8001bfc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bc6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bc8:	480d      	ldr	r0, [pc, #52]	; (8001c00 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bca:	490e      	ldr	r1, [pc, #56]	; (8001c04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bcc:	4a0e      	ldr	r2, [pc, #56]	; (8001c08 <LoopForever+0xe>)
  movs r3, #0
 8001bce:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001bd0:	e002      	b.n	8001bd8 <LoopCopyDataInit>

08001bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bd6:	3304      	adds	r3, #4

08001bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bdc:	d3f9      	bcc.n	8001bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bde:	4a0b      	ldr	r2, [pc, #44]	; (8001c0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001be0:	4c0b      	ldr	r4, [pc, #44]	; (8001c10 <LoopForever+0x16>)
  movs r3, #0
 8001be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be4:	e001      	b.n	8001bea <LoopFillZerobss>

08001be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be8:	3204      	adds	r2, #4

08001bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bec:	d3fb      	bcc.n	8001be6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bee:	f7ff ffd7 	bl	8001ba0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bf2:	f003 fd81 	bl	80056f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bf6:	f7ff facf 	bl	8001198 <main>

08001bfa <LoopForever>:

LoopForever:
    b LoopForever
 8001bfa:	e7fe      	b.n	8001bfa <LoopForever>
  ldr   r0, =_estack
 8001bfc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c04:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001c08:	08008794 	.word	0x08008794
  ldr r2, =_sbss
 8001c0c:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001c10:	200003f0 	.word	0x200003f0

08001c14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c14:	e7fe      	b.n	8001c14 <ADC1_2_IRQHandler>

08001c16 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c20:	2003      	movs	r0, #3
 8001c22:	f000 f939 	bl	8001e98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c26:	2000      	movs	r0, #0
 8001c28:	f000 f80e 	bl	8001c48 <HAL_InitTick>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d002      	beq.n	8001c38 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	71fb      	strb	r3, [r7, #7]
 8001c36:	e001      	b.n	8001c3c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c38:	f7ff fd52 	bl	80016e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c3c:	79fb      	ldrb	r3, [r7, #7]

}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
	...

08001c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c50:	2300      	movs	r3, #0
 8001c52:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001c54:	4b16      	ldr	r3, [pc, #88]	; (8001cb0 <HAL_InitTick+0x68>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d022      	beq.n	8001ca2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001c5c:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <HAL_InitTick+0x6c>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <HAL_InitTick+0x68>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c68:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c70:	4618      	mov	r0, r3
 8001c72:	f000 f944 	bl	8001efe <HAL_SYSTICK_Config>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d10f      	bne.n	8001c9c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2b0f      	cmp	r3, #15
 8001c80:	d809      	bhi.n	8001c96 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c82:	2200      	movs	r2, #0
 8001c84:	6879      	ldr	r1, [r7, #4]
 8001c86:	f04f 30ff 	mov.w	r0, #4294967295
 8001c8a:	f000 f910 	bl	8001eae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c8e:	4a0a      	ldr	r2, [pc, #40]	; (8001cb8 <HAL_InitTick+0x70>)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6013      	str	r3, [r2, #0]
 8001c94:	e007      	b.n	8001ca6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	73fb      	strb	r3, [r7, #15]
 8001c9a:	e004      	b.n	8001ca6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	73fb      	strb	r3, [r7, #15]
 8001ca0:	e001      	b.n	8001ca6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20000018 	.word	0x20000018
 8001cb4:	20000010 	.word	0x20000010
 8001cb8:	20000014 	.word	0x20000014

08001cbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cc0:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <HAL_IncTick+0x1c>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <HAL_IncTick+0x20>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4413      	add	r3, r2
 8001cca:	4a03      	ldr	r2, [pc, #12]	; (8001cd8 <HAL_IncTick+0x1c>)
 8001ccc:	6013      	str	r3, [r2, #0]
}
 8001cce:	bf00      	nop
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	200003dc 	.word	0x200003dc
 8001cdc:	20000018 	.word	0x20000018

08001ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ce4:	4b03      	ldr	r3, [pc, #12]	; (8001cf4 <HAL_GetTick+0x14>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	200003dc 	.word	0x200003dc

08001cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d08:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <__NVIC_SetPriorityGrouping+0x44>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d14:	4013      	ands	r3, r2
 8001d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d2a:	4a04      	ldr	r2, [pc, #16]	; (8001d3c <__NVIC_SetPriorityGrouping+0x44>)
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	60d3      	str	r3, [r2, #12]
}
 8001d30:	bf00      	nop
 8001d32:	3714      	adds	r7, #20
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d44:	4b04      	ldr	r3, [pc, #16]	; (8001d58 <__NVIC_GetPriorityGrouping+0x18>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	0a1b      	lsrs	r3, r3, #8
 8001d4a:	f003 0307 	and.w	r3, r3, #7
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	db0b      	blt.n	8001d86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	f003 021f 	and.w	r2, r3, #31
 8001d74:	4907      	ldr	r1, [pc, #28]	; (8001d94 <__NVIC_EnableIRQ+0x38>)
 8001d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7a:	095b      	lsrs	r3, r3, #5
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	e000e100 	.word	0xe000e100

08001d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	6039      	str	r1, [r7, #0]
 8001da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	db0a      	blt.n	8001dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	490c      	ldr	r1, [pc, #48]	; (8001de4 <__NVIC_SetPriority+0x4c>)
 8001db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db6:	0112      	lsls	r2, r2, #4
 8001db8:	b2d2      	uxtb	r2, r2
 8001dba:	440b      	add	r3, r1
 8001dbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dc0:	e00a      	b.n	8001dd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	4908      	ldr	r1, [pc, #32]	; (8001de8 <__NVIC_SetPriority+0x50>)
 8001dc8:	79fb      	ldrb	r3, [r7, #7]
 8001dca:	f003 030f 	and.w	r3, r3, #15
 8001dce:	3b04      	subs	r3, #4
 8001dd0:	0112      	lsls	r2, r2, #4
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	761a      	strb	r2, [r3, #24]
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	e000e100 	.word	0xe000e100
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b089      	sub	sp, #36	; 0x24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	f1c3 0307 	rsb	r3, r3, #7
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	bf28      	it	cs
 8001e0a:	2304      	movcs	r3, #4
 8001e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	3304      	adds	r3, #4
 8001e12:	2b06      	cmp	r3, #6
 8001e14:	d902      	bls.n	8001e1c <NVIC_EncodePriority+0x30>
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	3b03      	subs	r3, #3
 8001e1a:	e000      	b.n	8001e1e <NVIC_EncodePriority+0x32>
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e20:	f04f 32ff 	mov.w	r2, #4294967295
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43da      	mvns	r2, r3
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	401a      	ands	r2, r3
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e34:	f04f 31ff 	mov.w	r1, #4294967295
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3e:	43d9      	mvns	r1, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e44:	4313      	orrs	r3, r2
         );
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3724      	adds	r7, #36	; 0x24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
	...

08001e54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e64:	d301      	bcc.n	8001e6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e66:	2301      	movs	r3, #1
 8001e68:	e00f      	b.n	8001e8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e6a:	4a0a      	ldr	r2, [pc, #40]	; (8001e94 <SysTick_Config+0x40>)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e72:	210f      	movs	r1, #15
 8001e74:	f04f 30ff 	mov.w	r0, #4294967295
 8001e78:	f7ff ff8e 	bl	8001d98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e7c:	4b05      	ldr	r3, [pc, #20]	; (8001e94 <SysTick_Config+0x40>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e82:	4b04      	ldr	r3, [pc, #16]	; (8001e94 <SysTick_Config+0x40>)
 8001e84:	2207      	movs	r2, #7
 8001e86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	e000e010 	.word	0xe000e010

08001e98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f7ff ff29 	bl	8001cf8 <__NVIC_SetPriorityGrouping>
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b086      	sub	sp, #24
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	60b9      	str	r1, [r7, #8]
 8001eb8:	607a      	str	r2, [r7, #4]
 8001eba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ebc:	f7ff ff40 	bl	8001d40 <__NVIC_GetPriorityGrouping>
 8001ec0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	68b9      	ldr	r1, [r7, #8]
 8001ec6:	6978      	ldr	r0, [r7, #20]
 8001ec8:	f7ff ff90 	bl	8001dec <NVIC_EncodePriority>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff ff5f 	bl	8001d98 <__NVIC_SetPriority>
}
 8001eda:	bf00      	nop
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	4603      	mov	r3, r0
 8001eea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff ff33 	bl	8001d5c <__NVIC_EnableIRQ>
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff ffa4 	bl	8001e54 <SysTick_Config>
 8001f0c:	4603      	mov	r3, r0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
	...

08001f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b087      	sub	sp, #28
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f26:	e15a      	b.n	80021de <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	fa01 f303 	lsl.w	r3, r1, r3
 8001f34:	4013      	ands	r3, r2
 8001f36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f000 814c 	beq.w	80021d8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d005      	beq.n	8001f58 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d130      	bne.n	8001fba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	2203      	movs	r2, #3
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	68da      	ldr	r2, [r3, #12]
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f8e:	2201      	movs	r2, #1
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	43db      	mvns	r3, r3
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	091b      	lsrs	r3, r3, #4
 8001fa4:	f003 0201 	and.w	r2, r3, #1
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 0303 	and.w	r3, r3, #3
 8001fc2:	2b03      	cmp	r3, #3
 8001fc4:	d017      	beq.n	8001ff6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	2203      	movs	r2, #3
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	689a      	ldr	r2, [r3, #8]
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d123      	bne.n	800204a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	08da      	lsrs	r2, r3, #3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3208      	adds	r2, #8
 800200a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800200e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	220f      	movs	r2, #15
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43db      	mvns	r3, r3
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	4013      	ands	r3, r2
 8002024:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	691a      	ldr	r2, [r3, #16]
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	f003 0307 	and.w	r3, r3, #7
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	4313      	orrs	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	08da      	lsrs	r2, r3, #3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3208      	adds	r2, #8
 8002044:	6939      	ldr	r1, [r7, #16]
 8002046:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	2203      	movs	r2, #3
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	4013      	ands	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f003 0203 	and.w	r2, r3, #3
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	4313      	orrs	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002086:	2b00      	cmp	r3, #0
 8002088:	f000 80a6 	beq.w	80021d8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800208c:	4b5b      	ldr	r3, [pc, #364]	; (80021fc <HAL_GPIO_Init+0x2e4>)
 800208e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002090:	4a5a      	ldr	r2, [pc, #360]	; (80021fc <HAL_GPIO_Init+0x2e4>)
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	6613      	str	r3, [r2, #96]	; 0x60
 8002098:	4b58      	ldr	r3, [pc, #352]	; (80021fc <HAL_GPIO_Init+0x2e4>)
 800209a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020a4:	4a56      	ldr	r2, [pc, #344]	; (8002200 <HAL_GPIO_Init+0x2e8>)
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	089b      	lsrs	r3, r3, #2
 80020aa:	3302      	adds	r3, #2
 80020ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f003 0303 	and.w	r3, r3, #3
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	220f      	movs	r2, #15
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	4013      	ands	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020ce:	d01f      	beq.n	8002110 <HAL_GPIO_Init+0x1f8>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a4c      	ldr	r2, [pc, #304]	; (8002204 <HAL_GPIO_Init+0x2ec>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d019      	beq.n	800210c <HAL_GPIO_Init+0x1f4>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a4b      	ldr	r2, [pc, #300]	; (8002208 <HAL_GPIO_Init+0x2f0>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d013      	beq.n	8002108 <HAL_GPIO_Init+0x1f0>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a4a      	ldr	r2, [pc, #296]	; (800220c <HAL_GPIO_Init+0x2f4>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d00d      	beq.n	8002104 <HAL_GPIO_Init+0x1ec>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a49      	ldr	r2, [pc, #292]	; (8002210 <HAL_GPIO_Init+0x2f8>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d007      	beq.n	8002100 <HAL_GPIO_Init+0x1e8>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a48      	ldr	r2, [pc, #288]	; (8002214 <HAL_GPIO_Init+0x2fc>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d101      	bne.n	80020fc <HAL_GPIO_Init+0x1e4>
 80020f8:	2305      	movs	r3, #5
 80020fa:	e00a      	b.n	8002112 <HAL_GPIO_Init+0x1fa>
 80020fc:	2306      	movs	r3, #6
 80020fe:	e008      	b.n	8002112 <HAL_GPIO_Init+0x1fa>
 8002100:	2304      	movs	r3, #4
 8002102:	e006      	b.n	8002112 <HAL_GPIO_Init+0x1fa>
 8002104:	2303      	movs	r3, #3
 8002106:	e004      	b.n	8002112 <HAL_GPIO_Init+0x1fa>
 8002108:	2302      	movs	r3, #2
 800210a:	e002      	b.n	8002112 <HAL_GPIO_Init+0x1fa>
 800210c:	2301      	movs	r3, #1
 800210e:	e000      	b.n	8002112 <HAL_GPIO_Init+0x1fa>
 8002110:	2300      	movs	r3, #0
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	f002 0203 	and.w	r2, r2, #3
 8002118:	0092      	lsls	r2, r2, #2
 800211a:	4093      	lsls	r3, r2
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	4313      	orrs	r3, r2
 8002120:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002122:	4937      	ldr	r1, [pc, #220]	; (8002200 <HAL_GPIO_Init+0x2e8>)
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	089b      	lsrs	r3, r3, #2
 8002128:	3302      	adds	r3, #2
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002130:	4b39      	ldr	r3, [pc, #228]	; (8002218 <HAL_GPIO_Init+0x300>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	43db      	mvns	r3, r3
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	4013      	ands	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	4313      	orrs	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002154:	4a30      	ldr	r2, [pc, #192]	; (8002218 <HAL_GPIO_Init+0x300>)
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800215a:	4b2f      	ldr	r3, [pc, #188]	; (8002218 <HAL_GPIO_Init+0x300>)
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	43db      	mvns	r3, r3
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	4013      	ands	r3, r2
 8002168:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4313      	orrs	r3, r2
 800217c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800217e:	4a26      	ldr	r2, [pc, #152]	; (8002218 <HAL_GPIO_Init+0x300>)
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002184:	4b24      	ldr	r3, [pc, #144]	; (8002218 <HAL_GPIO_Init+0x300>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	43db      	mvns	r3, r3
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	4013      	ands	r3, r2
 8002192:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d003      	beq.n	80021a8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021a8:	4a1b      	ldr	r2, [pc, #108]	; (8002218 <HAL_GPIO_Init+0x300>)
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80021ae:	4b1a      	ldr	r3, [pc, #104]	; (8002218 <HAL_GPIO_Init+0x300>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	43db      	mvns	r3, r3
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	4013      	ands	r3, r2
 80021bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80021d2:	4a11      	ldr	r2, [pc, #68]	; (8002218 <HAL_GPIO_Init+0x300>)
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	3301      	adds	r3, #1
 80021dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	fa22 f303 	lsr.w	r3, r2, r3
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f47f ae9d 	bne.w	8001f28 <HAL_GPIO_Init+0x10>
  }
}
 80021ee:	bf00      	nop
 80021f0:	bf00      	nop
 80021f2:	371c      	adds	r7, #28
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	40021000 	.word	0x40021000
 8002200:	40010000 	.word	0x40010000
 8002204:	48000400 	.word	0x48000400
 8002208:	48000800 	.word	0x48000800
 800220c:	48000c00 	.word	0x48000c00
 8002210:	48001000 	.word	0x48001000
 8002214:	48001400 	.word	0x48001400
 8002218:	40010400 	.word	0x40010400

0800221c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	460b      	mov	r3, r1
 8002226:	807b      	strh	r3, [r7, #2]
 8002228:	4613      	mov	r3, r2
 800222a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800222c:	787b      	ldrb	r3, [r7, #1]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002232:	887a      	ldrh	r2, [r7, #2]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002238:	e002      	b.n	8002240 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800223a:	887a      	ldrh	r2, [r7, #2]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d141      	bne.n	80022de <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800225a:	4b4b      	ldr	r3, [pc, #300]	; (8002388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002262:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002266:	d131      	bne.n	80022cc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002268:	4b47      	ldr	r3, [pc, #284]	; (8002388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800226a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800226e:	4a46      	ldr	r2, [pc, #280]	; (8002388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002274:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002278:	4b43      	ldr	r3, [pc, #268]	; (8002388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002280:	4a41      	ldr	r2, [pc, #260]	; (8002388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002282:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002286:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002288:	4b40      	ldr	r3, [pc, #256]	; (800238c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2232      	movs	r2, #50	; 0x32
 800228e:	fb02 f303 	mul.w	r3, r2, r3
 8002292:	4a3f      	ldr	r2, [pc, #252]	; (8002390 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002294:	fba2 2303 	umull	r2, r3, r2, r3
 8002298:	0c9b      	lsrs	r3, r3, #18
 800229a:	3301      	adds	r3, #1
 800229c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800229e:	e002      	b.n	80022a6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022a6:	4b38      	ldr	r3, [pc, #224]	; (8002388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022b2:	d102      	bne.n	80022ba <HAL_PWREx_ControlVoltageScaling+0x6e>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1f2      	bne.n	80022a0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022ba:	4b33      	ldr	r3, [pc, #204]	; (8002388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022c6:	d158      	bne.n	800237a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e057      	b.n	800237c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022cc:	4b2e      	ldr	r3, [pc, #184]	; (8002388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022d2:	4a2d      	ldr	r2, [pc, #180]	; (8002388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80022dc:	e04d      	b.n	800237a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022e4:	d141      	bne.n	800236a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80022e6:	4b28      	ldr	r3, [pc, #160]	; (8002388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022f2:	d131      	bne.n	8002358 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022f4:	4b24      	ldr	r3, [pc, #144]	; (8002388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022fa:	4a23      	ldr	r2, [pc, #140]	; (8002388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002300:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002304:	4b20      	ldr	r3, [pc, #128]	; (8002388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800230c:	4a1e      	ldr	r2, [pc, #120]	; (8002388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800230e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002312:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002314:	4b1d      	ldr	r3, [pc, #116]	; (800238c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2232      	movs	r2, #50	; 0x32
 800231a:	fb02 f303 	mul.w	r3, r2, r3
 800231e:	4a1c      	ldr	r2, [pc, #112]	; (8002390 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002320:	fba2 2303 	umull	r2, r3, r2, r3
 8002324:	0c9b      	lsrs	r3, r3, #18
 8002326:	3301      	adds	r3, #1
 8002328:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800232a:	e002      	b.n	8002332 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	3b01      	subs	r3, #1
 8002330:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002332:	4b15      	ldr	r3, [pc, #84]	; (8002388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800233a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800233e:	d102      	bne.n	8002346 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1f2      	bne.n	800232c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002346:	4b10      	ldr	r3, [pc, #64]	; (8002388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800234e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002352:	d112      	bne.n	800237a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e011      	b.n	800237c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002358:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800235a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800235e:	4a0a      	ldr	r2, [pc, #40]	; (8002388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002364:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002368:	e007      	b.n	800237a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800236a:	4b07      	ldr	r3, [pc, #28]	; (8002388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002372:	4a05      	ldr	r2, [pc, #20]	; (8002388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002374:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002378:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	40007000 	.word	0x40007000
 800238c:	20000010 	.word	0x20000010
 8002390:	431bde83 	.word	0x431bde83

08002394 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b088      	sub	sp, #32
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e306      	b.n	80029b4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d075      	beq.n	800249e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023b2:	4b97      	ldr	r3, [pc, #604]	; (8002610 <HAL_RCC_OscConfig+0x27c>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 030c 	and.w	r3, r3, #12
 80023ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023bc:	4b94      	ldr	r3, [pc, #592]	; (8002610 <HAL_RCC_OscConfig+0x27c>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	f003 0303 	and.w	r3, r3, #3
 80023c4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	2b0c      	cmp	r3, #12
 80023ca:	d102      	bne.n	80023d2 <HAL_RCC_OscConfig+0x3e>
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	2b03      	cmp	r3, #3
 80023d0:	d002      	beq.n	80023d8 <HAL_RCC_OscConfig+0x44>
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	2b08      	cmp	r3, #8
 80023d6:	d10b      	bne.n	80023f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d8:	4b8d      	ldr	r3, [pc, #564]	; (8002610 <HAL_RCC_OscConfig+0x27c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d05b      	beq.n	800249c <HAL_RCC_OscConfig+0x108>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d157      	bne.n	800249c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e2e1      	b.n	80029b4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023f8:	d106      	bne.n	8002408 <HAL_RCC_OscConfig+0x74>
 80023fa:	4b85      	ldr	r3, [pc, #532]	; (8002610 <HAL_RCC_OscConfig+0x27c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a84      	ldr	r2, [pc, #528]	; (8002610 <HAL_RCC_OscConfig+0x27c>)
 8002400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	e01d      	b.n	8002444 <HAL_RCC_OscConfig+0xb0>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002410:	d10c      	bne.n	800242c <HAL_RCC_OscConfig+0x98>
 8002412:	4b7f      	ldr	r3, [pc, #508]	; (8002610 <HAL_RCC_OscConfig+0x27c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a7e      	ldr	r2, [pc, #504]	; (8002610 <HAL_RCC_OscConfig+0x27c>)
 8002418:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800241c:	6013      	str	r3, [r2, #0]
 800241e:	4b7c      	ldr	r3, [pc, #496]	; (8002610 <HAL_RCC_OscConfig+0x27c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a7b      	ldr	r2, [pc, #492]	; (8002610 <HAL_RCC_OscConfig+0x27c>)
 8002424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002428:	6013      	str	r3, [r2, #0]
 800242a:	e00b      	b.n	8002444 <HAL_RCC_OscConfig+0xb0>
 800242c:	4b78      	ldr	r3, [pc, #480]	; (8002610 <HAL_RCC_OscConfig+0x27c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a77      	ldr	r2, [pc, #476]	; (8002610 <HAL_RCC_OscConfig+0x27c>)
 8002432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002436:	6013      	str	r3, [r2, #0]
 8002438:	4b75      	ldr	r3, [pc, #468]	; (8002610 <HAL_RCC_OscConfig+0x27c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a74      	ldr	r2, [pc, #464]	; (8002610 <HAL_RCC_OscConfig+0x27c>)
 800243e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002442:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d013      	beq.n	8002474 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244c:	f7ff fc48 	bl	8001ce0 <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002454:	f7ff fc44 	bl	8001ce0 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b64      	cmp	r3, #100	; 0x64
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e2a6      	b.n	80029b4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002466:	4b6a      	ldr	r3, [pc, #424]	; (8002610 <HAL_RCC_OscConfig+0x27c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d0f0      	beq.n	8002454 <HAL_RCC_OscConfig+0xc0>
 8002472:	e014      	b.n	800249e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002474:	f7ff fc34 	bl	8001ce0 <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800247c:	f7ff fc30 	bl	8001ce0 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b64      	cmp	r3, #100	; 0x64
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e292      	b.n	80029b4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800248e:	4b60      	ldr	r3, [pc, #384]	; (8002610 <HAL_RCC_OscConfig+0x27c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1f0      	bne.n	800247c <HAL_RCC_OscConfig+0xe8>
 800249a:	e000      	b.n	800249e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800249c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d075      	beq.n	8002596 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024aa:	4b59      	ldr	r3, [pc, #356]	; (8002610 <HAL_RCC_OscConfig+0x27c>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 030c 	and.w	r3, r3, #12
 80024b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024b4:	4b56      	ldr	r3, [pc, #344]	; (8002610 <HAL_RCC_OscConfig+0x27c>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f003 0303 	and.w	r3, r3, #3
 80024bc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	2b0c      	cmp	r3, #12
 80024c2:	d102      	bne.n	80024ca <HAL_RCC_OscConfig+0x136>
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d002      	beq.n	80024d0 <HAL_RCC_OscConfig+0x13c>
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	2b04      	cmp	r3, #4
 80024ce:	d11f      	bne.n	8002510 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024d0:	4b4f      	ldr	r3, [pc, #316]	; (8002610 <HAL_RCC_OscConfig+0x27c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d005      	beq.n	80024e8 <HAL_RCC_OscConfig+0x154>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d101      	bne.n	80024e8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e265      	b.n	80029b4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e8:	4b49      	ldr	r3, [pc, #292]	; (8002610 <HAL_RCC_OscConfig+0x27c>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	061b      	lsls	r3, r3, #24
 80024f6:	4946      	ldr	r1, [pc, #280]	; (8002610 <HAL_RCC_OscConfig+0x27c>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80024fc:	4b45      	ldr	r3, [pc, #276]	; (8002614 <HAL_RCC_OscConfig+0x280>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff fba1 	bl	8001c48 <HAL_InitTick>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d043      	beq.n	8002594 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e251      	b.n	80029b4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d023      	beq.n	8002560 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002518:	4b3d      	ldr	r3, [pc, #244]	; (8002610 <HAL_RCC_OscConfig+0x27c>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a3c      	ldr	r2, [pc, #240]	; (8002610 <HAL_RCC_OscConfig+0x27c>)
 800251e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002522:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002524:	f7ff fbdc 	bl	8001ce0 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800252c:	f7ff fbd8 	bl	8001ce0 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e23a      	b.n	80029b4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800253e:	4b34      	ldr	r3, [pc, #208]	; (8002610 <HAL_RCC_OscConfig+0x27c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002546:	2b00      	cmp	r3, #0
 8002548:	d0f0      	beq.n	800252c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800254a:	4b31      	ldr	r3, [pc, #196]	; (8002610 <HAL_RCC_OscConfig+0x27c>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	061b      	lsls	r3, r3, #24
 8002558:	492d      	ldr	r1, [pc, #180]	; (8002610 <HAL_RCC_OscConfig+0x27c>)
 800255a:	4313      	orrs	r3, r2
 800255c:	604b      	str	r3, [r1, #4]
 800255e:	e01a      	b.n	8002596 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002560:	4b2b      	ldr	r3, [pc, #172]	; (8002610 <HAL_RCC_OscConfig+0x27c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a2a      	ldr	r2, [pc, #168]	; (8002610 <HAL_RCC_OscConfig+0x27c>)
 8002566:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800256a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256c:	f7ff fbb8 	bl	8001ce0 <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002574:	f7ff fbb4 	bl	8001ce0 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e216      	b.n	80029b4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002586:	4b22      	ldr	r3, [pc, #136]	; (8002610 <HAL_RCC_OscConfig+0x27c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1f0      	bne.n	8002574 <HAL_RCC_OscConfig+0x1e0>
 8002592:	e000      	b.n	8002596 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002594:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0308 	and.w	r3, r3, #8
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d041      	beq.n	8002626 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d01c      	beq.n	80025e4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025aa:	4b19      	ldr	r3, [pc, #100]	; (8002610 <HAL_RCC_OscConfig+0x27c>)
 80025ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025b0:	4a17      	ldr	r2, [pc, #92]	; (8002610 <HAL_RCC_OscConfig+0x27c>)
 80025b2:	f043 0301 	orr.w	r3, r3, #1
 80025b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ba:	f7ff fb91 	bl	8001ce0 <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025c2:	f7ff fb8d 	bl	8001ce0 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e1ef      	b.n	80029b4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025d4:	4b0e      	ldr	r3, [pc, #56]	; (8002610 <HAL_RCC_OscConfig+0x27c>)
 80025d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d0ef      	beq.n	80025c2 <HAL_RCC_OscConfig+0x22e>
 80025e2:	e020      	b.n	8002626 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025e4:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <HAL_RCC_OscConfig+0x27c>)
 80025e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ea:	4a09      	ldr	r2, [pc, #36]	; (8002610 <HAL_RCC_OscConfig+0x27c>)
 80025ec:	f023 0301 	bic.w	r3, r3, #1
 80025f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f4:	f7ff fb74 	bl	8001ce0 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025fa:	e00d      	b.n	8002618 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025fc:	f7ff fb70 	bl	8001ce0 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d906      	bls.n	8002618 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e1d2      	b.n	80029b4 <HAL_RCC_OscConfig+0x620>
 800260e:	bf00      	nop
 8002610:	40021000 	.word	0x40021000
 8002614:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002618:	4b8c      	ldr	r3, [pc, #560]	; (800284c <HAL_RCC_OscConfig+0x4b8>)
 800261a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1ea      	bne.n	80025fc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0304 	and.w	r3, r3, #4
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 80a6 	beq.w	8002780 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002634:	2300      	movs	r3, #0
 8002636:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002638:	4b84      	ldr	r3, [pc, #528]	; (800284c <HAL_RCC_OscConfig+0x4b8>)
 800263a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_RCC_OscConfig+0x2b4>
 8002644:	2301      	movs	r3, #1
 8002646:	e000      	b.n	800264a <HAL_RCC_OscConfig+0x2b6>
 8002648:	2300      	movs	r3, #0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00d      	beq.n	800266a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800264e:	4b7f      	ldr	r3, [pc, #508]	; (800284c <HAL_RCC_OscConfig+0x4b8>)
 8002650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002652:	4a7e      	ldr	r2, [pc, #504]	; (800284c <HAL_RCC_OscConfig+0x4b8>)
 8002654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002658:	6593      	str	r3, [r2, #88]	; 0x58
 800265a:	4b7c      	ldr	r3, [pc, #496]	; (800284c <HAL_RCC_OscConfig+0x4b8>)
 800265c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002666:	2301      	movs	r3, #1
 8002668:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800266a:	4b79      	ldr	r3, [pc, #484]	; (8002850 <HAL_RCC_OscConfig+0x4bc>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002672:	2b00      	cmp	r3, #0
 8002674:	d118      	bne.n	80026a8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002676:	4b76      	ldr	r3, [pc, #472]	; (8002850 <HAL_RCC_OscConfig+0x4bc>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a75      	ldr	r2, [pc, #468]	; (8002850 <HAL_RCC_OscConfig+0x4bc>)
 800267c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002680:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002682:	f7ff fb2d 	bl	8001ce0 <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800268a:	f7ff fb29 	bl	8001ce0 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e18b      	b.n	80029b4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800269c:	4b6c      	ldr	r3, [pc, #432]	; (8002850 <HAL_RCC_OscConfig+0x4bc>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0f0      	beq.n	800268a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d108      	bne.n	80026c2 <HAL_RCC_OscConfig+0x32e>
 80026b0:	4b66      	ldr	r3, [pc, #408]	; (800284c <HAL_RCC_OscConfig+0x4b8>)
 80026b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b6:	4a65      	ldr	r2, [pc, #404]	; (800284c <HAL_RCC_OscConfig+0x4b8>)
 80026b8:	f043 0301 	orr.w	r3, r3, #1
 80026bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026c0:	e024      	b.n	800270c <HAL_RCC_OscConfig+0x378>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	2b05      	cmp	r3, #5
 80026c8:	d110      	bne.n	80026ec <HAL_RCC_OscConfig+0x358>
 80026ca:	4b60      	ldr	r3, [pc, #384]	; (800284c <HAL_RCC_OscConfig+0x4b8>)
 80026cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d0:	4a5e      	ldr	r2, [pc, #376]	; (800284c <HAL_RCC_OscConfig+0x4b8>)
 80026d2:	f043 0304 	orr.w	r3, r3, #4
 80026d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026da:	4b5c      	ldr	r3, [pc, #368]	; (800284c <HAL_RCC_OscConfig+0x4b8>)
 80026dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e0:	4a5a      	ldr	r2, [pc, #360]	; (800284c <HAL_RCC_OscConfig+0x4b8>)
 80026e2:	f043 0301 	orr.w	r3, r3, #1
 80026e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026ea:	e00f      	b.n	800270c <HAL_RCC_OscConfig+0x378>
 80026ec:	4b57      	ldr	r3, [pc, #348]	; (800284c <HAL_RCC_OscConfig+0x4b8>)
 80026ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f2:	4a56      	ldr	r2, [pc, #344]	; (800284c <HAL_RCC_OscConfig+0x4b8>)
 80026f4:	f023 0301 	bic.w	r3, r3, #1
 80026f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026fc:	4b53      	ldr	r3, [pc, #332]	; (800284c <HAL_RCC_OscConfig+0x4b8>)
 80026fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002702:	4a52      	ldr	r2, [pc, #328]	; (800284c <HAL_RCC_OscConfig+0x4b8>)
 8002704:	f023 0304 	bic.w	r3, r3, #4
 8002708:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d016      	beq.n	8002742 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002714:	f7ff fae4 	bl	8001ce0 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800271a:	e00a      	b.n	8002732 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800271c:	f7ff fae0 	bl	8001ce0 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	f241 3288 	movw	r2, #5000	; 0x1388
 800272a:	4293      	cmp	r3, r2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e140      	b.n	80029b4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002732:	4b46      	ldr	r3, [pc, #280]	; (800284c <HAL_RCC_OscConfig+0x4b8>)
 8002734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d0ed      	beq.n	800271c <HAL_RCC_OscConfig+0x388>
 8002740:	e015      	b.n	800276e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002742:	f7ff facd 	bl	8001ce0 <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002748:	e00a      	b.n	8002760 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800274a:	f7ff fac9 	bl	8001ce0 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	f241 3288 	movw	r2, #5000	; 0x1388
 8002758:	4293      	cmp	r3, r2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e129      	b.n	80029b4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002760:	4b3a      	ldr	r3, [pc, #232]	; (800284c <HAL_RCC_OscConfig+0x4b8>)
 8002762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1ed      	bne.n	800274a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800276e:	7ffb      	ldrb	r3, [r7, #31]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d105      	bne.n	8002780 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002774:	4b35      	ldr	r3, [pc, #212]	; (800284c <HAL_RCC_OscConfig+0x4b8>)
 8002776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002778:	4a34      	ldr	r2, [pc, #208]	; (800284c <HAL_RCC_OscConfig+0x4b8>)
 800277a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800277e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0320 	and.w	r3, r3, #32
 8002788:	2b00      	cmp	r3, #0
 800278a:	d03c      	beq.n	8002806 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d01c      	beq.n	80027ce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002794:	4b2d      	ldr	r3, [pc, #180]	; (800284c <HAL_RCC_OscConfig+0x4b8>)
 8002796:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800279a:	4a2c      	ldr	r2, [pc, #176]	; (800284c <HAL_RCC_OscConfig+0x4b8>)
 800279c:	f043 0301 	orr.w	r3, r3, #1
 80027a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a4:	f7ff fa9c 	bl	8001ce0 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027ac:	f7ff fa98 	bl	8001ce0 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e0fa      	b.n	80029b4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027be:	4b23      	ldr	r3, [pc, #140]	; (800284c <HAL_RCC_OscConfig+0x4b8>)
 80027c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0ef      	beq.n	80027ac <HAL_RCC_OscConfig+0x418>
 80027cc:	e01b      	b.n	8002806 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027ce:	4b1f      	ldr	r3, [pc, #124]	; (800284c <HAL_RCC_OscConfig+0x4b8>)
 80027d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027d4:	4a1d      	ldr	r2, [pc, #116]	; (800284c <HAL_RCC_OscConfig+0x4b8>)
 80027d6:	f023 0301 	bic.w	r3, r3, #1
 80027da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027de:	f7ff fa7f 	bl	8001ce0 <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027e6:	f7ff fa7b 	bl	8001ce0 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e0dd      	b.n	80029b4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027f8:	4b14      	ldr	r3, [pc, #80]	; (800284c <HAL_RCC_OscConfig+0x4b8>)
 80027fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1ef      	bne.n	80027e6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 80d1 	beq.w	80029b2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002810:	4b0e      	ldr	r3, [pc, #56]	; (800284c <HAL_RCC_OscConfig+0x4b8>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f003 030c 	and.w	r3, r3, #12
 8002818:	2b0c      	cmp	r3, #12
 800281a:	f000 808b 	beq.w	8002934 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	2b02      	cmp	r3, #2
 8002824:	d15e      	bne.n	80028e4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002826:	4b09      	ldr	r3, [pc, #36]	; (800284c <HAL_RCC_OscConfig+0x4b8>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a08      	ldr	r2, [pc, #32]	; (800284c <HAL_RCC_OscConfig+0x4b8>)
 800282c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002830:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002832:	f7ff fa55 	bl	8001ce0 <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002838:	e00c      	b.n	8002854 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800283a:	f7ff fa51 	bl	8001ce0 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d905      	bls.n	8002854 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e0b3      	b.n	80029b4 <HAL_RCC_OscConfig+0x620>
 800284c:	40021000 	.word	0x40021000
 8002850:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002854:	4b59      	ldr	r3, [pc, #356]	; (80029bc <HAL_RCC_OscConfig+0x628>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1ec      	bne.n	800283a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002860:	4b56      	ldr	r3, [pc, #344]	; (80029bc <HAL_RCC_OscConfig+0x628>)
 8002862:	68da      	ldr	r2, [r3, #12]
 8002864:	4b56      	ldr	r3, [pc, #344]	; (80029c0 <HAL_RCC_OscConfig+0x62c>)
 8002866:	4013      	ands	r3, r2
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6a11      	ldr	r1, [r2, #32]
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002870:	3a01      	subs	r2, #1
 8002872:	0112      	lsls	r2, r2, #4
 8002874:	4311      	orrs	r1, r2
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800287a:	0212      	lsls	r2, r2, #8
 800287c:	4311      	orrs	r1, r2
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002882:	0852      	lsrs	r2, r2, #1
 8002884:	3a01      	subs	r2, #1
 8002886:	0552      	lsls	r2, r2, #21
 8002888:	4311      	orrs	r1, r2
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800288e:	0852      	lsrs	r2, r2, #1
 8002890:	3a01      	subs	r2, #1
 8002892:	0652      	lsls	r2, r2, #25
 8002894:	4311      	orrs	r1, r2
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800289a:	06d2      	lsls	r2, r2, #27
 800289c:	430a      	orrs	r2, r1
 800289e:	4947      	ldr	r1, [pc, #284]	; (80029bc <HAL_RCC_OscConfig+0x628>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028a4:	4b45      	ldr	r3, [pc, #276]	; (80029bc <HAL_RCC_OscConfig+0x628>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a44      	ldr	r2, [pc, #272]	; (80029bc <HAL_RCC_OscConfig+0x628>)
 80028aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028ae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028b0:	4b42      	ldr	r3, [pc, #264]	; (80029bc <HAL_RCC_OscConfig+0x628>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	4a41      	ldr	r2, [pc, #260]	; (80029bc <HAL_RCC_OscConfig+0x628>)
 80028b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028bc:	f7ff fa10 	bl	8001ce0 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c4:	f7ff fa0c 	bl	8001ce0 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e06e      	b.n	80029b4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028d6:	4b39      	ldr	r3, [pc, #228]	; (80029bc <HAL_RCC_OscConfig+0x628>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0f0      	beq.n	80028c4 <HAL_RCC_OscConfig+0x530>
 80028e2:	e066      	b.n	80029b2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e4:	4b35      	ldr	r3, [pc, #212]	; (80029bc <HAL_RCC_OscConfig+0x628>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a34      	ldr	r2, [pc, #208]	; (80029bc <HAL_RCC_OscConfig+0x628>)
 80028ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028ee:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80028f0:	4b32      	ldr	r3, [pc, #200]	; (80029bc <HAL_RCC_OscConfig+0x628>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	4a31      	ldr	r2, [pc, #196]	; (80029bc <HAL_RCC_OscConfig+0x628>)
 80028f6:	f023 0303 	bic.w	r3, r3, #3
 80028fa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80028fc:	4b2f      	ldr	r3, [pc, #188]	; (80029bc <HAL_RCC_OscConfig+0x628>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	4a2e      	ldr	r2, [pc, #184]	; (80029bc <HAL_RCC_OscConfig+0x628>)
 8002902:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800290a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290c:	f7ff f9e8 	bl	8001ce0 <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002914:	f7ff f9e4 	bl	8001ce0 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e046      	b.n	80029b4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002926:	4b25      	ldr	r3, [pc, #148]	; (80029bc <HAL_RCC_OscConfig+0x628>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1f0      	bne.n	8002914 <HAL_RCC_OscConfig+0x580>
 8002932:	e03e      	b.n	80029b2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	69db      	ldr	r3, [r3, #28]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d101      	bne.n	8002940 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e039      	b.n	80029b4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002940:	4b1e      	ldr	r3, [pc, #120]	; (80029bc <HAL_RCC_OscConfig+0x628>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	f003 0203 	and.w	r2, r3, #3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	429a      	cmp	r2, r3
 8002952:	d12c      	bne.n	80029ae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	3b01      	subs	r3, #1
 8002960:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002962:	429a      	cmp	r2, r3
 8002964:	d123      	bne.n	80029ae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002970:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002972:	429a      	cmp	r2, r3
 8002974:	d11b      	bne.n	80029ae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002980:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002982:	429a      	cmp	r2, r3
 8002984:	d113      	bne.n	80029ae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002990:	085b      	lsrs	r3, r3, #1
 8002992:	3b01      	subs	r3, #1
 8002994:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002996:	429a      	cmp	r2, r3
 8002998:	d109      	bne.n	80029ae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a4:	085b      	lsrs	r3, r3, #1
 80029a6:	3b01      	subs	r3, #1
 80029a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d001      	beq.n	80029b2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e000      	b.n	80029b4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3720      	adds	r7, #32
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40021000 	.word	0x40021000
 80029c0:	019f800c 	.word	0x019f800c

080029c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80029ce:	2300      	movs	r3, #0
 80029d0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d101      	bne.n	80029dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e11e      	b.n	8002c1a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029dc:	4b91      	ldr	r3, [pc, #580]	; (8002c24 <HAL_RCC_ClockConfig+0x260>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 030f 	and.w	r3, r3, #15
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d910      	bls.n	8002a0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ea:	4b8e      	ldr	r3, [pc, #568]	; (8002c24 <HAL_RCC_ClockConfig+0x260>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f023 020f 	bic.w	r2, r3, #15
 80029f2:	498c      	ldr	r1, [pc, #560]	; (8002c24 <HAL_RCC_ClockConfig+0x260>)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fa:	4b8a      	ldr	r3, [pc, #552]	; (8002c24 <HAL_RCC_ClockConfig+0x260>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d001      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e106      	b.n	8002c1a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d073      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	2b03      	cmp	r3, #3
 8002a1e:	d129      	bne.n	8002a74 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a20:	4b81      	ldr	r3, [pc, #516]	; (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e0f4      	b.n	8002c1a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002a30:	f000 f99e 	bl	8002d70 <RCC_GetSysClockFreqFromPLLSource>
 8002a34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	4a7c      	ldr	r2, [pc, #496]	; (8002c2c <HAL_RCC_ClockConfig+0x268>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d93f      	bls.n	8002abe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002a3e:	4b7a      	ldr	r3, [pc, #488]	; (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d009      	beq.n	8002a5e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d033      	beq.n	8002abe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d12f      	bne.n	8002abe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a5e:	4b72      	ldr	r3, [pc, #456]	; (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a66:	4a70      	ldr	r2, [pc, #448]	; (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a6c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002a6e:	2380      	movs	r3, #128	; 0x80
 8002a70:	617b      	str	r3, [r7, #20]
 8002a72:	e024      	b.n	8002abe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d107      	bne.n	8002a8c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a7c:	4b6a      	ldr	r3, [pc, #424]	; (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d109      	bne.n	8002a9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e0c6      	b.n	8002c1a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a8c:	4b66      	ldr	r3, [pc, #408]	; (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e0be      	b.n	8002c1a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002a9c:	f000 f8ce 	bl	8002c3c <HAL_RCC_GetSysClockFreq>
 8002aa0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	4a61      	ldr	r2, [pc, #388]	; (8002c2c <HAL_RCC_ClockConfig+0x268>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d909      	bls.n	8002abe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002aaa:	4b5f      	ldr	r3, [pc, #380]	; (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ab2:	4a5d      	ldr	r2, [pc, #372]	; (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ab8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002aba:	2380      	movs	r3, #128	; 0x80
 8002abc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002abe:	4b5a      	ldr	r3, [pc, #360]	; (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f023 0203 	bic.w	r2, r3, #3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	4957      	ldr	r1, [pc, #348]	; (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ad0:	f7ff f906 	bl	8001ce0 <HAL_GetTick>
 8002ad4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad6:	e00a      	b.n	8002aee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ad8:	f7ff f902 	bl	8001ce0 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e095      	b.n	8002c1a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aee:	4b4e      	ldr	r3, [pc, #312]	; (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 020c 	and.w	r2, r3, #12
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d1eb      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d023      	beq.n	8002b54 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d005      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b18:	4b43      	ldr	r3, [pc, #268]	; (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	4a42      	ldr	r2, [pc, #264]	; (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002b1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b22:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0308 	and.w	r3, r3, #8
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d007      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002b30:	4b3d      	ldr	r3, [pc, #244]	; (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002b38:	4a3b      	ldr	r2, [pc, #236]	; (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002b3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b3e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b40:	4b39      	ldr	r3, [pc, #228]	; (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	4936      	ldr	r1, [pc, #216]	; (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	608b      	str	r3, [r1, #8]
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	2b80      	cmp	r3, #128	; 0x80
 8002b58:	d105      	bne.n	8002b66 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002b5a:	4b33      	ldr	r3, [pc, #204]	; (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	4a32      	ldr	r2, [pc, #200]	; (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002b60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b64:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b66:	4b2f      	ldr	r3, [pc, #188]	; (8002c24 <HAL_RCC_ClockConfig+0x260>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d21d      	bcs.n	8002bb0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b74:	4b2b      	ldr	r3, [pc, #172]	; (8002c24 <HAL_RCC_ClockConfig+0x260>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f023 020f 	bic.w	r2, r3, #15
 8002b7c:	4929      	ldr	r1, [pc, #164]	; (8002c24 <HAL_RCC_ClockConfig+0x260>)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b84:	f7ff f8ac 	bl	8001ce0 <HAL_GetTick>
 8002b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8a:	e00a      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b8c:	f7ff f8a8 	bl	8001ce0 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e03b      	b.n	8002c1a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ba2:	4b20      	ldr	r3, [pc, #128]	; (8002c24 <HAL_RCC_ClockConfig+0x260>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d1ed      	bne.n	8002b8c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d008      	beq.n	8002bce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bbc:	4b1a      	ldr	r3, [pc, #104]	; (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	4917      	ldr	r1, [pc, #92]	; (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d009      	beq.n	8002bee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bda:	4b13      	ldr	r3, [pc, #76]	; (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	490f      	ldr	r1, [pc, #60]	; (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bee:	f000 f825 	bl	8002c3c <HAL_RCC_GetSysClockFreq>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	4b0c      	ldr	r3, [pc, #48]	; (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	091b      	lsrs	r3, r3, #4
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	490c      	ldr	r1, [pc, #48]	; (8002c30 <HAL_RCC_ClockConfig+0x26c>)
 8002c00:	5ccb      	ldrb	r3, [r1, r3]
 8002c02:	f003 031f 	and.w	r3, r3, #31
 8002c06:	fa22 f303 	lsr.w	r3, r2, r3
 8002c0a:	4a0a      	ldr	r2, [pc, #40]	; (8002c34 <HAL_RCC_ClockConfig+0x270>)
 8002c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002c0e:	4b0a      	ldr	r3, [pc, #40]	; (8002c38 <HAL_RCC_ClockConfig+0x274>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff f818 	bl	8001c48 <HAL_InitTick>
 8002c18:	4603      	mov	r3, r0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3718      	adds	r7, #24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40022000 	.word	0x40022000
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	04c4b400 	.word	0x04c4b400
 8002c30:	08008368 	.word	0x08008368
 8002c34:	20000010 	.word	0x20000010
 8002c38:	20000014 	.word	0x20000014

08002c3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b087      	sub	sp, #28
 8002c40:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002c42:	4b2c      	ldr	r3, [pc, #176]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 030c 	and.w	r3, r3, #12
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d102      	bne.n	8002c54 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c4e:	4b2a      	ldr	r3, [pc, #168]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c50:	613b      	str	r3, [r7, #16]
 8002c52:	e047      	b.n	8002ce4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002c54:	4b27      	ldr	r3, [pc, #156]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 030c 	and.w	r3, r3, #12
 8002c5c:	2b08      	cmp	r3, #8
 8002c5e:	d102      	bne.n	8002c66 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c60:	4b26      	ldr	r3, [pc, #152]	; (8002cfc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c62:	613b      	str	r3, [r7, #16]
 8002c64:	e03e      	b.n	8002ce4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002c66:	4b23      	ldr	r3, [pc, #140]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
 8002c6e:	2b0c      	cmp	r3, #12
 8002c70:	d136      	bne.n	8002ce0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c72:	4b20      	ldr	r3, [pc, #128]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c7c:	4b1d      	ldr	r3, [pc, #116]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	091b      	lsrs	r3, r3, #4
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	3301      	adds	r3, #1
 8002c88:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2b03      	cmp	r3, #3
 8002c8e:	d10c      	bne.n	8002caa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c90:	4a1a      	ldr	r2, [pc, #104]	; (8002cfc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c98:	4a16      	ldr	r2, [pc, #88]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c9a:	68d2      	ldr	r2, [r2, #12]
 8002c9c:	0a12      	lsrs	r2, r2, #8
 8002c9e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ca2:	fb02 f303 	mul.w	r3, r2, r3
 8002ca6:	617b      	str	r3, [r7, #20]
      break;
 8002ca8:	e00c      	b.n	8002cc4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002caa:	4a13      	ldr	r2, [pc, #76]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb2:	4a10      	ldr	r2, [pc, #64]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cb4:	68d2      	ldr	r2, [r2, #12]
 8002cb6:	0a12      	lsrs	r2, r2, #8
 8002cb8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002cbc:	fb02 f303 	mul.w	r3, r2, r3
 8002cc0:	617b      	str	r3, [r7, #20]
      break;
 8002cc2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cc4:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	0e5b      	lsrs	r3, r3, #25
 8002cca:	f003 0303 	and.w	r3, r3, #3
 8002cce:	3301      	adds	r3, #1
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cdc:	613b      	str	r3, [r7, #16]
 8002cde:	e001      	b.n	8002ce4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002ce4:	693b      	ldr	r3, [r7, #16]
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	371c      	adds	r7, #28
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	00f42400 	.word	0x00f42400
 8002cfc:	007a1200 	.word	0x007a1200

08002d00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d04:	4b03      	ldr	r3, [pc, #12]	; (8002d14 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d06:	681b      	ldr	r3, [r3, #0]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	20000010 	.word	0x20000010

08002d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d1c:	f7ff fff0 	bl	8002d00 <HAL_RCC_GetHCLKFreq>
 8002d20:	4602      	mov	r2, r0
 8002d22:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	0a1b      	lsrs	r3, r3, #8
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	4904      	ldr	r1, [pc, #16]	; (8002d40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d2e:	5ccb      	ldrb	r3, [r1, r3]
 8002d30:	f003 031f 	and.w	r3, r3, #31
 8002d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	08008378 	.word	0x08008378

08002d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d48:	f7ff ffda 	bl	8002d00 <HAL_RCC_GetHCLKFreq>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	0adb      	lsrs	r3, r3, #11
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	4904      	ldr	r1, [pc, #16]	; (8002d6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d5a:	5ccb      	ldrb	r3, [r1, r3]
 8002d5c:	f003 031f 	and.w	r3, r3, #31
 8002d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	08008378 	.word	0x08008378

08002d70 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b087      	sub	sp, #28
 8002d74:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d76:	4b1e      	ldr	r3, [pc, #120]	; (8002df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d80:	4b1b      	ldr	r3, [pc, #108]	; (8002df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	091b      	lsrs	r3, r3, #4
 8002d86:	f003 030f 	and.w	r3, r3, #15
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	2b03      	cmp	r3, #3
 8002d92:	d10c      	bne.n	8002dae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d94:	4a17      	ldr	r2, [pc, #92]	; (8002df4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d9c:	4a14      	ldr	r2, [pc, #80]	; (8002df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d9e:	68d2      	ldr	r2, [r2, #12]
 8002da0:	0a12      	lsrs	r2, r2, #8
 8002da2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002da6:	fb02 f303 	mul.w	r3, r2, r3
 8002daa:	617b      	str	r3, [r7, #20]
    break;
 8002dac:	e00c      	b.n	8002dc8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002dae:	4a12      	ldr	r2, [pc, #72]	; (8002df8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db6:	4a0e      	ldr	r2, [pc, #56]	; (8002df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002db8:	68d2      	ldr	r2, [r2, #12]
 8002dba:	0a12      	lsrs	r2, r2, #8
 8002dbc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002dc0:	fb02 f303 	mul.w	r3, r2, r3
 8002dc4:	617b      	str	r3, [r7, #20]
    break;
 8002dc6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002dc8:	4b09      	ldr	r3, [pc, #36]	; (8002df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	0e5b      	lsrs	r3, r3, #25
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002de2:	687b      	ldr	r3, [r7, #4]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	371c      	adds	r7, #28
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr
 8002df0:	40021000 	.word	0x40021000
 8002df4:	007a1200 	.word	0x007a1200
 8002df8:	00f42400 	.word	0x00f42400

08002dfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e04:	2300      	movs	r3, #0
 8002e06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e08:	2300      	movs	r3, #0
 8002e0a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 8098 	beq.w	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e1e:	4b43      	ldr	r3, [pc, #268]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10d      	bne.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e2a:	4b40      	ldr	r3, [pc, #256]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2e:	4a3f      	ldr	r2, [pc, #252]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e34:	6593      	str	r3, [r2, #88]	; 0x58
 8002e36:	4b3d      	ldr	r3, [pc, #244]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3e:	60bb      	str	r3, [r7, #8]
 8002e40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e42:	2301      	movs	r3, #1
 8002e44:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e46:	4b3a      	ldr	r3, [pc, #232]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a39      	ldr	r2, [pc, #228]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e50:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e52:	f7fe ff45 	bl	8001ce0 <HAL_GetTick>
 8002e56:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e58:	e009      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e5a:	f7fe ff41 	bl	8001ce0 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d902      	bls.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	74fb      	strb	r3, [r7, #19]
        break;
 8002e6c:	e005      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e6e:	4b30      	ldr	r3, [pc, #192]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0ef      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002e7a:	7cfb      	ldrb	r3, [r7, #19]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d159      	bne.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e80:	4b2a      	ldr	r3, [pc, #168]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e8a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d01e      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d019      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e9c:	4b23      	ldr	r3, [pc, #140]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ea6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ea8:	4b20      	ldr	r3, [pc, #128]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eae:	4a1f      	ldr	r2, [pc, #124]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002eb8:	4b1c      	ldr	r3, [pc, #112]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ebe:	4a1b      	ldr	r2, [pc, #108]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ec0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ec4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ec8:	4a18      	ldr	r2, [pc, #96]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d016      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eda:	f7fe ff01 	bl	8001ce0 <HAL_GetTick>
 8002ede:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ee0:	e00b      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee2:	f7fe fefd 	bl	8001ce0 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d902      	bls.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	74fb      	strb	r3, [r7, #19]
            break;
 8002ef8:	e006      	b.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002efa:	4b0c      	ldr	r3, [pc, #48]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0ec      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002f08:	7cfb      	ldrb	r3, [r7, #19]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10b      	bne.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f0e:	4b07      	ldr	r3, [pc, #28]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1c:	4903      	ldr	r1, [pc, #12]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f24:	e008      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f26:	7cfb      	ldrb	r3, [r7, #19]
 8002f28:	74bb      	strb	r3, [r7, #18]
 8002f2a:	e005      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f34:	7cfb      	ldrb	r3, [r7, #19]
 8002f36:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f38:	7c7b      	ldrb	r3, [r7, #17]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d105      	bne.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f3e:	4ba6      	ldr	r3, [pc, #664]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f42:	4aa5      	ldr	r2, [pc, #660]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f48:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00a      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f56:	4ba0      	ldr	r3, [pc, #640]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5c:	f023 0203 	bic.w	r2, r3, #3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	499c      	ldr	r1, [pc, #624]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00a      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f78:	4b97      	ldr	r3, [pc, #604]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f7e:	f023 020c 	bic.w	r2, r3, #12
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	4994      	ldr	r1, [pc, #592]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0304 	and.w	r3, r3, #4
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00a      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f9a:	4b8f      	ldr	r3, [pc, #572]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	498b      	ldr	r1, [pc, #556]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0308 	and.w	r3, r3, #8
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00a      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fbc:	4b86      	ldr	r3, [pc, #536]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	4983      	ldr	r1, [pc, #524]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0320 	and.w	r3, r3, #32
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00a      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fde:	4b7e      	ldr	r3, [pc, #504]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	497a      	ldr	r1, [pc, #488]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00a      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003000:	4b75      	ldr	r3, [pc, #468]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003006:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	4972      	ldr	r1, [pc, #456]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003010:	4313      	orrs	r3, r2
 8003012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00a      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003022:	4b6d      	ldr	r3, [pc, #436]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003028:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	4969      	ldr	r1, [pc, #420]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003032:	4313      	orrs	r3, r2
 8003034:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00a      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003044:	4b64      	ldr	r3, [pc, #400]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	4961      	ldr	r1, [pc, #388]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003054:	4313      	orrs	r3, r2
 8003056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00a      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003066:	4b5c      	ldr	r3, [pc, #368]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800306c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	4958      	ldr	r1, [pc, #352]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003076:	4313      	orrs	r3, r2
 8003078:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003084:	2b00      	cmp	r3, #0
 8003086:	d015      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003088:	4b53      	ldr	r3, [pc, #332]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800308a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800308e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003096:	4950      	ldr	r1, [pc, #320]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003098:	4313      	orrs	r3, r2
 800309a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030a6:	d105      	bne.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030a8:	4b4b      	ldr	r3, [pc, #300]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	4a4a      	ldr	r2, [pc, #296]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030b2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d015      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80030c0:	4b45      	ldr	r3, [pc, #276]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ce:	4942      	ldr	r1, [pc, #264]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030de:	d105      	bne.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030e0:	4b3d      	ldr	r3, [pc, #244]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	4a3c      	ldr	r2, [pc, #240]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030ea:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d015      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80030f8:	4b37      	ldr	r3, [pc, #220]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	4934      	ldr	r1, [pc, #208]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003108:	4313      	orrs	r3, r2
 800310a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003116:	d105      	bne.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003118:	4b2f      	ldr	r3, [pc, #188]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	4a2e      	ldr	r2, [pc, #184]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800311e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003122:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d015      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003130:	4b29      	ldr	r3, [pc, #164]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003136:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800313e:	4926      	ldr	r1, [pc, #152]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003140:	4313      	orrs	r3, r2
 8003142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800314a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800314e:	d105      	bne.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003150:	4b21      	ldr	r3, [pc, #132]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	4a20      	ldr	r2, [pc, #128]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003156:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800315a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d015      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003168:	4b1b      	ldr	r3, [pc, #108]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800316a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003176:	4918      	ldr	r1, [pc, #96]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003178:	4313      	orrs	r3, r2
 800317a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003182:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003186:	d105      	bne.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003188:	4b13      	ldr	r3, [pc, #76]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	4a12      	ldr	r2, [pc, #72]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800318e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003192:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d015      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80031a0:	4b0d      	ldr	r3, [pc, #52]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ae:	490a      	ldr	r1, [pc, #40]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031be:	d105      	bne.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80031c0:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	4a04      	ldr	r2, [pc, #16]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80031cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3718      	adds	r7, #24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	40021000 	.word	0x40021000

080031dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e049      	b.n	8003282 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d106      	bne.n	8003208 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7fe fad4 	bl	80017b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2202      	movs	r2, #2
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3304      	adds	r3, #4
 8003218:	4619      	mov	r1, r3
 800321a:	4610      	mov	r0, r2
 800321c:	f000 feec 	bl	8003ff8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
	...

0800328c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b01      	cmp	r3, #1
 800329e:	d001      	beq.n	80032a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e04a      	b.n	800333a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2202      	movs	r2, #2
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68da      	ldr	r2, [r3, #12]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 0201 	orr.w	r2, r2, #1
 80032ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a21      	ldr	r2, [pc, #132]	; (8003348 <HAL_TIM_Base_Start_IT+0xbc>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d018      	beq.n	80032f8 <HAL_TIM_Base_Start_IT+0x6c>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ce:	d013      	beq.n	80032f8 <HAL_TIM_Base_Start_IT+0x6c>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a1d      	ldr	r2, [pc, #116]	; (800334c <HAL_TIM_Base_Start_IT+0xc0>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d00e      	beq.n	80032f8 <HAL_TIM_Base_Start_IT+0x6c>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a1c      	ldr	r2, [pc, #112]	; (8003350 <HAL_TIM_Base_Start_IT+0xc4>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d009      	beq.n	80032f8 <HAL_TIM_Base_Start_IT+0x6c>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a1a      	ldr	r2, [pc, #104]	; (8003354 <HAL_TIM_Base_Start_IT+0xc8>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d004      	beq.n	80032f8 <HAL_TIM_Base_Start_IT+0x6c>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a19      	ldr	r2, [pc, #100]	; (8003358 <HAL_TIM_Base_Start_IT+0xcc>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d115      	bne.n	8003324 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689a      	ldr	r2, [r3, #8]
 80032fe:	4b17      	ldr	r3, [pc, #92]	; (800335c <HAL_TIM_Base_Start_IT+0xd0>)
 8003300:	4013      	ands	r3, r2
 8003302:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2b06      	cmp	r3, #6
 8003308:	d015      	beq.n	8003336 <HAL_TIM_Base_Start_IT+0xaa>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003310:	d011      	beq.n	8003336 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f042 0201 	orr.w	r2, r2, #1
 8003320:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003322:	e008      	b.n	8003336 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0201 	orr.w	r2, r2, #1
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	e000      	b.n	8003338 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003336:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	40012c00 	.word	0x40012c00
 800334c:	40000400 	.word	0x40000400
 8003350:	40000800 	.word	0x40000800
 8003354:	40013400 	.word	0x40013400
 8003358:	40014000 	.word	0x40014000
 800335c:	00010007 	.word	0x00010007

08003360 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e049      	b.n	8003406 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d106      	bne.n	800338c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f841 	bl	800340e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2202      	movs	r2, #2
 8003390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3304      	adds	r3, #4
 800339c:	4619      	mov	r1, r3
 800339e:	4610      	mov	r0, r2
 80033a0:	f000 fe2a 	bl	8003ff8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800340e:	b480      	push	{r7}
 8003410:	b083      	sub	sp, #12
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003416:	bf00      	nop
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
	...

08003424 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d109      	bne.n	8003448 <HAL_TIM_PWM_Start+0x24>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b01      	cmp	r3, #1
 800343e:	bf14      	ite	ne
 8003440:	2301      	movne	r3, #1
 8003442:	2300      	moveq	r3, #0
 8003444:	b2db      	uxtb	r3, r3
 8003446:	e03c      	b.n	80034c2 <HAL_TIM_PWM_Start+0x9e>
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	2b04      	cmp	r3, #4
 800344c:	d109      	bne.n	8003462 <HAL_TIM_PWM_Start+0x3e>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b01      	cmp	r3, #1
 8003458:	bf14      	ite	ne
 800345a:	2301      	movne	r3, #1
 800345c:	2300      	moveq	r3, #0
 800345e:	b2db      	uxtb	r3, r3
 8003460:	e02f      	b.n	80034c2 <HAL_TIM_PWM_Start+0x9e>
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	2b08      	cmp	r3, #8
 8003466:	d109      	bne.n	800347c <HAL_TIM_PWM_Start+0x58>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2b01      	cmp	r3, #1
 8003472:	bf14      	ite	ne
 8003474:	2301      	movne	r3, #1
 8003476:	2300      	moveq	r3, #0
 8003478:	b2db      	uxtb	r3, r3
 800347a:	e022      	b.n	80034c2 <HAL_TIM_PWM_Start+0x9e>
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	2b0c      	cmp	r3, #12
 8003480:	d109      	bne.n	8003496 <HAL_TIM_PWM_Start+0x72>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b01      	cmp	r3, #1
 800348c:	bf14      	ite	ne
 800348e:	2301      	movne	r3, #1
 8003490:	2300      	moveq	r3, #0
 8003492:	b2db      	uxtb	r3, r3
 8003494:	e015      	b.n	80034c2 <HAL_TIM_PWM_Start+0x9e>
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	2b10      	cmp	r3, #16
 800349a:	d109      	bne.n	80034b0 <HAL_TIM_PWM_Start+0x8c>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	bf14      	ite	ne
 80034a8:	2301      	movne	r3, #1
 80034aa:	2300      	moveq	r3, #0
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	e008      	b.n	80034c2 <HAL_TIM_PWM_Start+0x9e>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	bf14      	ite	ne
 80034bc:	2301      	movne	r3, #1
 80034be:	2300      	moveq	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e097      	b.n	80035fa <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d104      	bne.n	80034da <HAL_TIM_PWM_Start+0xb6>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2202      	movs	r2, #2
 80034d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034d8:	e023      	b.n	8003522 <HAL_TIM_PWM_Start+0xfe>
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2b04      	cmp	r3, #4
 80034de:	d104      	bne.n	80034ea <HAL_TIM_PWM_Start+0xc6>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034e8:	e01b      	b.n	8003522 <HAL_TIM_PWM_Start+0xfe>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	2b08      	cmp	r3, #8
 80034ee:	d104      	bne.n	80034fa <HAL_TIM_PWM_Start+0xd6>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2202      	movs	r2, #2
 80034f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034f8:	e013      	b.n	8003522 <HAL_TIM_PWM_Start+0xfe>
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	2b0c      	cmp	r3, #12
 80034fe:	d104      	bne.n	800350a <HAL_TIM_PWM_Start+0xe6>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003508:	e00b      	b.n	8003522 <HAL_TIM_PWM_Start+0xfe>
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2b10      	cmp	r3, #16
 800350e:	d104      	bne.n	800351a <HAL_TIM_PWM_Start+0xf6>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2202      	movs	r2, #2
 8003514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003518:	e003      	b.n	8003522 <HAL_TIM_PWM_Start+0xfe>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2202      	movs	r2, #2
 800351e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2201      	movs	r2, #1
 8003528:	6839      	ldr	r1, [r7, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f001 f986 	bl	800483c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a33      	ldr	r2, [pc, #204]	; (8003604 <HAL_TIM_PWM_Start+0x1e0>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d013      	beq.n	8003562 <HAL_TIM_PWM_Start+0x13e>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a32      	ldr	r2, [pc, #200]	; (8003608 <HAL_TIM_PWM_Start+0x1e4>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d00e      	beq.n	8003562 <HAL_TIM_PWM_Start+0x13e>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a30      	ldr	r2, [pc, #192]	; (800360c <HAL_TIM_PWM_Start+0x1e8>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d009      	beq.n	8003562 <HAL_TIM_PWM_Start+0x13e>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a2f      	ldr	r2, [pc, #188]	; (8003610 <HAL_TIM_PWM_Start+0x1ec>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d004      	beq.n	8003562 <HAL_TIM_PWM_Start+0x13e>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a2d      	ldr	r2, [pc, #180]	; (8003614 <HAL_TIM_PWM_Start+0x1f0>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d101      	bne.n	8003566 <HAL_TIM_PWM_Start+0x142>
 8003562:	2301      	movs	r3, #1
 8003564:	e000      	b.n	8003568 <HAL_TIM_PWM_Start+0x144>
 8003566:	2300      	movs	r3, #0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d007      	beq.n	800357c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800357a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a20      	ldr	r2, [pc, #128]	; (8003604 <HAL_TIM_PWM_Start+0x1e0>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d018      	beq.n	80035b8 <HAL_TIM_PWM_Start+0x194>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800358e:	d013      	beq.n	80035b8 <HAL_TIM_PWM_Start+0x194>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a20      	ldr	r2, [pc, #128]	; (8003618 <HAL_TIM_PWM_Start+0x1f4>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d00e      	beq.n	80035b8 <HAL_TIM_PWM_Start+0x194>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a1f      	ldr	r2, [pc, #124]	; (800361c <HAL_TIM_PWM_Start+0x1f8>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d009      	beq.n	80035b8 <HAL_TIM_PWM_Start+0x194>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a17      	ldr	r2, [pc, #92]	; (8003608 <HAL_TIM_PWM_Start+0x1e4>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d004      	beq.n	80035b8 <HAL_TIM_PWM_Start+0x194>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a16      	ldr	r2, [pc, #88]	; (800360c <HAL_TIM_PWM_Start+0x1e8>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d115      	bne.n	80035e4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689a      	ldr	r2, [r3, #8]
 80035be:	4b18      	ldr	r3, [pc, #96]	; (8003620 <HAL_TIM_PWM_Start+0x1fc>)
 80035c0:	4013      	ands	r3, r2
 80035c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2b06      	cmp	r3, #6
 80035c8:	d015      	beq.n	80035f6 <HAL_TIM_PWM_Start+0x1d2>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035d0:	d011      	beq.n	80035f6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f042 0201 	orr.w	r2, r2, #1
 80035e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035e2:	e008      	b.n	80035f6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f042 0201 	orr.w	r2, r2, #1
 80035f2:	601a      	str	r2, [r3, #0]
 80035f4:	e000      	b.n	80035f8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	40012c00 	.word	0x40012c00
 8003608:	40013400 	.word	0x40013400
 800360c:	40014000 	.word	0x40014000
 8003610:	40014400 	.word	0x40014400
 8003614:	40014800 	.word	0x40014800
 8003618:	40000400 	.word	0x40000400
 800361c:	40000800 	.word	0x40000800
 8003620:	00010007 	.word	0x00010007

08003624 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e097      	b.n	8003768 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b00      	cmp	r3, #0
 8003642:	d106      	bne.n	8003652 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f7fe f86b 	bl	8001728 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2202      	movs	r2, #2
 8003656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6812      	ldr	r2, [r2, #0]
 8003664:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8003668:	f023 0307 	bic.w	r3, r3, #7
 800366c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	3304      	adds	r3, #4
 8003676:	4619      	mov	r1, r3
 8003678:	4610      	mov	r0, r2
 800367a:	f000 fcbd 	bl	8003ff8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	4313      	orrs	r3, r2
 800369e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a6:	f023 0303 	bic.w	r3, r3, #3
 80036aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	021b      	lsls	r3, r3, #8
 80036b6:	4313      	orrs	r3, r2
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80036c4:	f023 030c 	bic.w	r3, r3, #12
 80036c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	68da      	ldr	r2, [r3, #12]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	021b      	lsls	r3, r3, #8
 80036e0:	4313      	orrs	r3, r2
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	011a      	lsls	r2, r3, #4
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	031b      	lsls	r3, r3, #12
 80036f4:	4313      	orrs	r3, r2
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003702:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800370a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	011b      	lsls	r3, r3, #4
 8003716:	4313      	orrs	r3, r2
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	4313      	orrs	r3, r2
 800371c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003780:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003788:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003790:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003798:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d110      	bne.n	80037c2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d102      	bne.n	80037ac <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80037a6:	7b7b      	ldrb	r3, [r7, #13]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d001      	beq.n	80037b0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e069      	b.n	8003884 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2202      	movs	r2, #2
 80037b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2202      	movs	r2, #2
 80037bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037c0:	e031      	b.n	8003826 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	d110      	bne.n	80037ea <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80037c8:	7bbb      	ldrb	r3, [r7, #14]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d102      	bne.n	80037d4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80037ce:	7b3b      	ldrb	r3, [r7, #12]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d001      	beq.n	80037d8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e055      	b.n	8003884 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2202      	movs	r2, #2
 80037dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2202      	movs	r2, #2
 80037e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037e8:	e01d      	b.n	8003826 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80037ea:	7bfb      	ldrb	r3, [r7, #15]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d108      	bne.n	8003802 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80037f0:	7bbb      	ldrb	r3, [r7, #14]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d105      	bne.n	8003802 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80037f6:	7b7b      	ldrb	r3, [r7, #13]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d102      	bne.n	8003802 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80037fc:	7b3b      	ldrb	r3, [r7, #12]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d001      	beq.n	8003806 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e03e      	b.n	8003884 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2202      	movs	r2, #2
 800380a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2202      	movs	r2, #2
 8003812:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2202      	movs	r2, #2
 800381a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2202      	movs	r2, #2
 8003822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d003      	beq.n	8003834 <HAL_TIM_Encoder_Start+0xc4>
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	2b04      	cmp	r3, #4
 8003830:	d008      	beq.n	8003844 <HAL_TIM_Encoder_Start+0xd4>
 8003832:	e00f      	b.n	8003854 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2201      	movs	r2, #1
 800383a:	2100      	movs	r1, #0
 800383c:	4618      	mov	r0, r3
 800383e:	f000 fffd 	bl	800483c <TIM_CCxChannelCmd>
      break;
 8003842:	e016      	b.n	8003872 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2201      	movs	r2, #1
 800384a:	2104      	movs	r1, #4
 800384c:	4618      	mov	r0, r3
 800384e:	f000 fff5 	bl	800483c <TIM_CCxChannelCmd>
      break;
 8003852:	e00e      	b.n	8003872 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2201      	movs	r2, #1
 800385a:	2100      	movs	r1, #0
 800385c:	4618      	mov	r0, r3
 800385e:	f000 ffed 	bl	800483c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2201      	movs	r2, #1
 8003868:	2104      	movs	r1, #4
 800386a:	4618      	mov	r0, r3
 800386c:	f000 ffe6 	bl	800483c <TIM_CCxChannelCmd>
      break;
 8003870:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f042 0201 	orr.w	r2, r2, #1
 8003880:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3710      	adds	r7, #16
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d122      	bne.n	80038e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d11b      	bne.n	80038e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f06f 0202 	mvn.w	r2, #2
 80038b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	f003 0303 	and.w	r3, r3, #3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 fb74 	bl	8003fbc <HAL_TIM_IC_CaptureCallback>
 80038d4:	e005      	b.n	80038e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 fb66 	bl	8003fa8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 fb77 	bl	8003fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	f003 0304 	and.w	r3, r3, #4
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d122      	bne.n	800393c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	f003 0304 	and.w	r3, r3, #4
 8003900:	2b04      	cmp	r3, #4
 8003902:	d11b      	bne.n	800393c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f06f 0204 	mvn.w	r2, #4
 800390c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2202      	movs	r2, #2
 8003912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 fb4a 	bl	8003fbc <HAL_TIM_IC_CaptureCallback>
 8003928:	e005      	b.n	8003936 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 fb3c 	bl	8003fa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 fb4d 	bl	8003fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	f003 0308 	and.w	r3, r3, #8
 8003946:	2b08      	cmp	r3, #8
 8003948:	d122      	bne.n	8003990 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	f003 0308 	and.w	r3, r3, #8
 8003954:	2b08      	cmp	r3, #8
 8003956:	d11b      	bne.n	8003990 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f06f 0208 	mvn.w	r2, #8
 8003960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2204      	movs	r2, #4
 8003966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	69db      	ldr	r3, [r3, #28]
 800396e:	f003 0303 	and.w	r3, r3, #3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 fb20 	bl	8003fbc <HAL_TIM_IC_CaptureCallback>
 800397c:	e005      	b.n	800398a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 fb12 	bl	8003fa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 fb23 	bl	8003fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	f003 0310 	and.w	r3, r3, #16
 800399a:	2b10      	cmp	r3, #16
 800399c:	d122      	bne.n	80039e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	f003 0310 	and.w	r3, r3, #16
 80039a8:	2b10      	cmp	r3, #16
 80039aa:	d11b      	bne.n	80039e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f06f 0210 	mvn.w	r2, #16
 80039b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2208      	movs	r2, #8
 80039ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d003      	beq.n	80039d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 faf6 	bl	8003fbc <HAL_TIM_IC_CaptureCallback>
 80039d0:	e005      	b.n	80039de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 fae8 	bl	8003fa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 faf9 	bl	8003fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d10e      	bne.n	8003a10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d107      	bne.n	8003a10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f06f 0201 	mvn.w	r2, #1
 8003a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7fd faec 	bl	8000fe8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a1a:	2b80      	cmp	r3, #128	; 0x80
 8003a1c:	d10e      	bne.n	8003a3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a28:	2b80      	cmp	r3, #128	; 0x80
 8003a2a:	d107      	bne.n	8003a3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 ffb2 	bl	80049a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a4a:	d10e      	bne.n	8003a6a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a56:	2b80      	cmp	r3, #128	; 0x80
 8003a58:	d107      	bne.n	8003a6a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003a62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 ffa5 	bl	80049b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a74:	2b40      	cmp	r3, #64	; 0x40
 8003a76:	d10e      	bne.n	8003a96 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a82:	2b40      	cmp	r3, #64	; 0x40
 8003a84:	d107      	bne.n	8003a96 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 faa7 	bl	8003fe4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	f003 0320 	and.w	r3, r3, #32
 8003aa0:	2b20      	cmp	r3, #32
 8003aa2:	d10e      	bne.n	8003ac2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f003 0320 	and.w	r3, r3, #32
 8003aae:	2b20      	cmp	r3, #32
 8003ab0:	d107      	bne.n	8003ac2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f06f 0220 	mvn.w	r2, #32
 8003aba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 ff65 	bl	800498c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003acc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ad0:	d10f      	bne.n	8003af2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003adc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ae0:	d107      	bne.n	8003af2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003aea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 ff6b 	bl	80049c8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003afc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b00:	d10f      	bne.n	8003b22 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b10:	d107      	bne.n	8003b22 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003b1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 ff5d 	bl	80049dc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b30:	d10f      	bne.n	8003b52 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b40:	d107      	bne.n	8003b52 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8003b4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 ff4f 	bl	80049f0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b60:	d10f      	bne.n	8003b82 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b70:	d107      	bne.n	8003b82 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8003b7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 ff41 	bl	8004a04 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b82:	bf00      	nop
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
	...

08003b8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d101      	bne.n	8003baa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	e0ff      	b.n	8003daa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2b14      	cmp	r3, #20
 8003bb6:	f200 80f0 	bhi.w	8003d9a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003bba:	a201      	add	r2, pc, #4	; (adr r2, 8003bc0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc0:	08003c15 	.word	0x08003c15
 8003bc4:	08003d9b 	.word	0x08003d9b
 8003bc8:	08003d9b 	.word	0x08003d9b
 8003bcc:	08003d9b 	.word	0x08003d9b
 8003bd0:	08003c55 	.word	0x08003c55
 8003bd4:	08003d9b 	.word	0x08003d9b
 8003bd8:	08003d9b 	.word	0x08003d9b
 8003bdc:	08003d9b 	.word	0x08003d9b
 8003be0:	08003c97 	.word	0x08003c97
 8003be4:	08003d9b 	.word	0x08003d9b
 8003be8:	08003d9b 	.word	0x08003d9b
 8003bec:	08003d9b 	.word	0x08003d9b
 8003bf0:	08003cd7 	.word	0x08003cd7
 8003bf4:	08003d9b 	.word	0x08003d9b
 8003bf8:	08003d9b 	.word	0x08003d9b
 8003bfc:	08003d9b 	.word	0x08003d9b
 8003c00:	08003d19 	.word	0x08003d19
 8003c04:	08003d9b 	.word	0x08003d9b
 8003c08:	08003d9b 	.word	0x08003d9b
 8003c0c:	08003d9b 	.word	0x08003d9b
 8003c10:	08003d59 	.word	0x08003d59
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68b9      	ldr	r1, [r7, #8]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f000 fa7c 	bl	8004118 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	699a      	ldr	r2, [r3, #24]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f042 0208 	orr.w	r2, r2, #8
 8003c2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	699a      	ldr	r2, [r3, #24]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f022 0204 	bic.w	r2, r2, #4
 8003c3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	6999      	ldr	r1, [r3, #24]
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	691a      	ldr	r2, [r3, #16]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	619a      	str	r2, [r3, #24]
      break;
 8003c52:	e0a5      	b.n	8003da0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68b9      	ldr	r1, [r7, #8]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 faec 	bl	8004238 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	699a      	ldr	r2, [r3, #24]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	699a      	ldr	r2, [r3, #24]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6999      	ldr	r1, [r3, #24]
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	021a      	lsls	r2, r3, #8
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	430a      	orrs	r2, r1
 8003c92:	619a      	str	r2, [r3, #24]
      break;
 8003c94:	e084      	b.n	8003da0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68b9      	ldr	r1, [r7, #8]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f000 fb55 	bl	800434c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	69da      	ldr	r2, [r3, #28]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f042 0208 	orr.w	r2, r2, #8
 8003cb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	69da      	ldr	r2, [r3, #28]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 0204 	bic.w	r2, r2, #4
 8003cc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	69d9      	ldr	r1, [r3, #28]
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	691a      	ldr	r2, [r3, #16]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	61da      	str	r2, [r3, #28]
      break;
 8003cd4:	e064      	b.n	8003da0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68b9      	ldr	r1, [r7, #8]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f000 fbbd 	bl	800445c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	69da      	ldr	r2, [r3, #28]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	69da      	ldr	r2, [r3, #28]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	69d9      	ldr	r1, [r3, #28]
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	021a      	lsls	r2, r3, #8
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	61da      	str	r2, [r3, #28]
      break;
 8003d16:	e043      	b.n	8003da0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68b9      	ldr	r1, [r7, #8]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 fc26 	bl	8004570 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f042 0208 	orr.w	r2, r2, #8
 8003d32:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 0204 	bic.w	r2, r2, #4
 8003d42:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	691a      	ldr	r2, [r3, #16]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003d56:	e023      	b.n	8003da0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68b9      	ldr	r1, [r7, #8]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 fc6a 	bl	8004638 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d72:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d82:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	021a      	lsls	r2, r3, #8
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	430a      	orrs	r2, r1
 8003d96:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003d98:	e002      	b.n	8003da0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	75fb      	strb	r3, [r7, #23]
      break;
 8003d9e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003da8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3718      	adds	r7, #24
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop

08003db4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d101      	bne.n	8003dd0 <HAL_TIM_ConfigClockSource+0x1c>
 8003dcc:	2302      	movs	r3, #2
 8003dce:	e0de      	b.n	8003f8e <HAL_TIM_ConfigClockSource+0x1da>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2202      	movs	r2, #2
 8003ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003dee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003df2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dfa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a63      	ldr	r2, [pc, #396]	; (8003f98 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	f000 80a9 	beq.w	8003f62 <HAL_TIM_ConfigClockSource+0x1ae>
 8003e10:	4a61      	ldr	r2, [pc, #388]	; (8003f98 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	f200 80ae 	bhi.w	8003f74 <HAL_TIM_ConfigClockSource+0x1c0>
 8003e18:	4a60      	ldr	r2, [pc, #384]	; (8003f9c <HAL_TIM_ConfigClockSource+0x1e8>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	f000 80a1 	beq.w	8003f62 <HAL_TIM_ConfigClockSource+0x1ae>
 8003e20:	4a5e      	ldr	r2, [pc, #376]	; (8003f9c <HAL_TIM_ConfigClockSource+0x1e8>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	f200 80a6 	bhi.w	8003f74 <HAL_TIM_ConfigClockSource+0x1c0>
 8003e28:	4a5d      	ldr	r2, [pc, #372]	; (8003fa0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	f000 8099 	beq.w	8003f62 <HAL_TIM_ConfigClockSource+0x1ae>
 8003e30:	4a5b      	ldr	r2, [pc, #364]	; (8003fa0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	f200 809e 	bhi.w	8003f74 <HAL_TIM_ConfigClockSource+0x1c0>
 8003e38:	4a5a      	ldr	r2, [pc, #360]	; (8003fa4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	f000 8091 	beq.w	8003f62 <HAL_TIM_ConfigClockSource+0x1ae>
 8003e40:	4a58      	ldr	r2, [pc, #352]	; (8003fa4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	f200 8096 	bhi.w	8003f74 <HAL_TIM_ConfigClockSource+0x1c0>
 8003e48:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003e4c:	f000 8089 	beq.w	8003f62 <HAL_TIM_ConfigClockSource+0x1ae>
 8003e50:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003e54:	f200 808e 	bhi.w	8003f74 <HAL_TIM_ConfigClockSource+0x1c0>
 8003e58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e5c:	d03e      	beq.n	8003edc <HAL_TIM_ConfigClockSource+0x128>
 8003e5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e62:	f200 8087 	bhi.w	8003f74 <HAL_TIM_ConfigClockSource+0x1c0>
 8003e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e6a:	f000 8086 	beq.w	8003f7a <HAL_TIM_ConfigClockSource+0x1c6>
 8003e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e72:	d87f      	bhi.n	8003f74 <HAL_TIM_ConfigClockSource+0x1c0>
 8003e74:	2b70      	cmp	r3, #112	; 0x70
 8003e76:	d01a      	beq.n	8003eae <HAL_TIM_ConfigClockSource+0xfa>
 8003e78:	2b70      	cmp	r3, #112	; 0x70
 8003e7a:	d87b      	bhi.n	8003f74 <HAL_TIM_ConfigClockSource+0x1c0>
 8003e7c:	2b60      	cmp	r3, #96	; 0x60
 8003e7e:	d050      	beq.n	8003f22 <HAL_TIM_ConfigClockSource+0x16e>
 8003e80:	2b60      	cmp	r3, #96	; 0x60
 8003e82:	d877      	bhi.n	8003f74 <HAL_TIM_ConfigClockSource+0x1c0>
 8003e84:	2b50      	cmp	r3, #80	; 0x50
 8003e86:	d03c      	beq.n	8003f02 <HAL_TIM_ConfigClockSource+0x14e>
 8003e88:	2b50      	cmp	r3, #80	; 0x50
 8003e8a:	d873      	bhi.n	8003f74 <HAL_TIM_ConfigClockSource+0x1c0>
 8003e8c:	2b40      	cmp	r3, #64	; 0x40
 8003e8e:	d058      	beq.n	8003f42 <HAL_TIM_ConfigClockSource+0x18e>
 8003e90:	2b40      	cmp	r3, #64	; 0x40
 8003e92:	d86f      	bhi.n	8003f74 <HAL_TIM_ConfigClockSource+0x1c0>
 8003e94:	2b30      	cmp	r3, #48	; 0x30
 8003e96:	d064      	beq.n	8003f62 <HAL_TIM_ConfigClockSource+0x1ae>
 8003e98:	2b30      	cmp	r3, #48	; 0x30
 8003e9a:	d86b      	bhi.n	8003f74 <HAL_TIM_ConfigClockSource+0x1c0>
 8003e9c:	2b20      	cmp	r3, #32
 8003e9e:	d060      	beq.n	8003f62 <HAL_TIM_ConfigClockSource+0x1ae>
 8003ea0:	2b20      	cmp	r3, #32
 8003ea2:	d867      	bhi.n	8003f74 <HAL_TIM_ConfigClockSource+0x1c0>
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d05c      	beq.n	8003f62 <HAL_TIM_ConfigClockSource+0x1ae>
 8003ea8:	2b10      	cmp	r3, #16
 8003eaa:	d05a      	beq.n	8003f62 <HAL_TIM_ConfigClockSource+0x1ae>
 8003eac:	e062      	b.n	8003f74 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6818      	ldr	r0, [r3, #0]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	6899      	ldr	r1, [r3, #8]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	f000 fc9d 	bl	80047fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ed0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68ba      	ldr	r2, [r7, #8]
 8003ed8:	609a      	str	r2, [r3, #8]
      break;
 8003eda:	e04f      	b.n	8003f7c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6818      	ldr	r0, [r3, #0]
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	6899      	ldr	r1, [r3, #8]
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685a      	ldr	r2, [r3, #4]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f000 fc86 	bl	80047fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689a      	ldr	r2, [r3, #8]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003efe:	609a      	str	r2, [r3, #8]
      break;
 8003f00:	e03c      	b.n	8003f7c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6818      	ldr	r0, [r3, #0]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	6859      	ldr	r1, [r3, #4]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	f000 fbf8 	bl	8004704 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2150      	movs	r1, #80	; 0x50
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 fc51 	bl	80047c2 <TIM_ITRx_SetConfig>
      break;
 8003f20:	e02c      	b.n	8003f7c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6818      	ldr	r0, [r3, #0]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	6859      	ldr	r1, [r3, #4]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	f000 fc17 	bl	8004762 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2160      	movs	r1, #96	; 0x60
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 fc41 	bl	80047c2 <TIM_ITRx_SetConfig>
      break;
 8003f40:	e01c      	b.n	8003f7c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6818      	ldr	r0, [r3, #0]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	6859      	ldr	r1, [r3, #4]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	f000 fbd8 	bl	8004704 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2140      	movs	r1, #64	; 0x40
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 fc31 	bl	80047c2 <TIM_ITRx_SetConfig>
      break;
 8003f60:	e00c      	b.n	8003f7c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	4610      	mov	r0, r2
 8003f6e:	f000 fc28 	bl	80047c2 <TIM_ITRx_SetConfig>
      break;
 8003f72:	e003      	b.n	8003f7c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	73fb      	strb	r3, [r7, #15]
      break;
 8003f78:	e000      	b.n	8003f7c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8003f7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	00100070 	.word	0x00100070
 8003f9c:	00100040 	.word	0x00100040
 8003fa0:	00100030 	.word	0x00100030
 8003fa4:	00100020 	.word	0x00100020

08003fa8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a3c      	ldr	r2, [pc, #240]	; (80040fc <TIM_Base_SetConfig+0x104>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d00f      	beq.n	8004030 <TIM_Base_SetConfig+0x38>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004016:	d00b      	beq.n	8004030 <TIM_Base_SetConfig+0x38>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a39      	ldr	r2, [pc, #228]	; (8004100 <TIM_Base_SetConfig+0x108>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d007      	beq.n	8004030 <TIM_Base_SetConfig+0x38>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a38      	ldr	r2, [pc, #224]	; (8004104 <TIM_Base_SetConfig+0x10c>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d003      	beq.n	8004030 <TIM_Base_SetConfig+0x38>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a37      	ldr	r2, [pc, #220]	; (8004108 <TIM_Base_SetConfig+0x110>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d108      	bne.n	8004042 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004036:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	4313      	orrs	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a2d      	ldr	r2, [pc, #180]	; (80040fc <TIM_Base_SetConfig+0x104>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d01b      	beq.n	8004082 <TIM_Base_SetConfig+0x8a>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004050:	d017      	beq.n	8004082 <TIM_Base_SetConfig+0x8a>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a2a      	ldr	r2, [pc, #168]	; (8004100 <TIM_Base_SetConfig+0x108>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d013      	beq.n	8004082 <TIM_Base_SetConfig+0x8a>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a29      	ldr	r2, [pc, #164]	; (8004104 <TIM_Base_SetConfig+0x10c>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d00f      	beq.n	8004082 <TIM_Base_SetConfig+0x8a>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a28      	ldr	r2, [pc, #160]	; (8004108 <TIM_Base_SetConfig+0x110>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d00b      	beq.n	8004082 <TIM_Base_SetConfig+0x8a>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a27      	ldr	r2, [pc, #156]	; (800410c <TIM_Base_SetConfig+0x114>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d007      	beq.n	8004082 <TIM_Base_SetConfig+0x8a>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a26      	ldr	r2, [pc, #152]	; (8004110 <TIM_Base_SetConfig+0x118>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d003      	beq.n	8004082 <TIM_Base_SetConfig+0x8a>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a25      	ldr	r2, [pc, #148]	; (8004114 <TIM_Base_SetConfig+0x11c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d108      	bne.n	8004094 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004088:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	4313      	orrs	r3, r2
 8004092:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	4313      	orrs	r3, r2
 80040a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a10      	ldr	r2, [pc, #64]	; (80040fc <TIM_Base_SetConfig+0x104>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d00f      	beq.n	80040e0 <TIM_Base_SetConfig+0xe8>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a11      	ldr	r2, [pc, #68]	; (8004108 <TIM_Base_SetConfig+0x110>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d00b      	beq.n	80040e0 <TIM_Base_SetConfig+0xe8>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a10      	ldr	r2, [pc, #64]	; (800410c <TIM_Base_SetConfig+0x114>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d007      	beq.n	80040e0 <TIM_Base_SetConfig+0xe8>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a0f      	ldr	r2, [pc, #60]	; (8004110 <TIM_Base_SetConfig+0x118>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d003      	beq.n	80040e0 <TIM_Base_SetConfig+0xe8>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a0e      	ldr	r2, [pc, #56]	; (8004114 <TIM_Base_SetConfig+0x11c>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d103      	bne.n	80040e8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	691a      	ldr	r2, [r3, #16]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	615a      	str	r2, [r3, #20]
}
 80040ee:	bf00      	nop
 80040f0:	3714      	adds	r7, #20
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	40012c00 	.word	0x40012c00
 8004100:	40000400 	.word	0x40000400
 8004104:	40000800 	.word	0x40000800
 8004108:	40013400 	.word	0x40013400
 800410c:	40014000 	.word	0x40014000
 8004110:	40014400 	.word	0x40014400
 8004114:	40014800 	.word	0x40014800

08004118 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004118:	b480      	push	{r7}
 800411a:	b087      	sub	sp, #28
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	f023 0201 	bic.w	r2, r3, #1
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800414a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f023 0303 	bic.w	r3, r3, #3
 8004152:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	4313      	orrs	r3, r2
 800415c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f023 0302 	bic.w	r3, r3, #2
 8004164:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	4313      	orrs	r3, r2
 800416e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a2c      	ldr	r2, [pc, #176]	; (8004224 <TIM_OC1_SetConfig+0x10c>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d00f      	beq.n	8004198 <TIM_OC1_SetConfig+0x80>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a2b      	ldr	r2, [pc, #172]	; (8004228 <TIM_OC1_SetConfig+0x110>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d00b      	beq.n	8004198 <TIM_OC1_SetConfig+0x80>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a2a      	ldr	r2, [pc, #168]	; (800422c <TIM_OC1_SetConfig+0x114>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d007      	beq.n	8004198 <TIM_OC1_SetConfig+0x80>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a29      	ldr	r2, [pc, #164]	; (8004230 <TIM_OC1_SetConfig+0x118>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d003      	beq.n	8004198 <TIM_OC1_SetConfig+0x80>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a28      	ldr	r2, [pc, #160]	; (8004234 <TIM_OC1_SetConfig+0x11c>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d10c      	bne.n	80041b2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	f023 0308 	bic.w	r3, r3, #8
 800419e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f023 0304 	bic.w	r3, r3, #4
 80041b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a1b      	ldr	r2, [pc, #108]	; (8004224 <TIM_OC1_SetConfig+0x10c>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d00f      	beq.n	80041da <TIM_OC1_SetConfig+0xc2>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a1a      	ldr	r2, [pc, #104]	; (8004228 <TIM_OC1_SetConfig+0x110>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d00b      	beq.n	80041da <TIM_OC1_SetConfig+0xc2>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a19      	ldr	r2, [pc, #100]	; (800422c <TIM_OC1_SetConfig+0x114>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d007      	beq.n	80041da <TIM_OC1_SetConfig+0xc2>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a18      	ldr	r2, [pc, #96]	; (8004230 <TIM_OC1_SetConfig+0x118>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d003      	beq.n	80041da <TIM_OC1_SetConfig+0xc2>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a17      	ldr	r2, [pc, #92]	; (8004234 <TIM_OC1_SetConfig+0x11c>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d111      	bne.n	80041fe <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	621a      	str	r2, [r3, #32]
}
 8004218:	bf00      	nop
 800421a:	371c      	adds	r7, #28
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr
 8004224:	40012c00 	.word	0x40012c00
 8004228:	40013400 	.word	0x40013400
 800422c:	40014000 	.word	0x40014000
 8004230:	40014400 	.word	0x40014400
 8004234:	40014800 	.word	0x40014800

08004238 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004238:	b480      	push	{r7}
 800423a:	b087      	sub	sp, #28
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	f023 0210 	bic.w	r2, r3, #16
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800426a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004272:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	021b      	lsls	r3, r3, #8
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	4313      	orrs	r3, r2
 800427e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	f023 0320 	bic.w	r3, r3, #32
 8004286:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	011b      	lsls	r3, r3, #4
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	4313      	orrs	r3, r2
 8004292:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a28      	ldr	r2, [pc, #160]	; (8004338 <TIM_OC2_SetConfig+0x100>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d003      	beq.n	80042a4 <TIM_OC2_SetConfig+0x6c>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a27      	ldr	r2, [pc, #156]	; (800433c <TIM_OC2_SetConfig+0x104>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d10d      	bne.n	80042c0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	011b      	lsls	r3, r3, #4
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a1d      	ldr	r2, [pc, #116]	; (8004338 <TIM_OC2_SetConfig+0x100>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d00f      	beq.n	80042e8 <TIM_OC2_SetConfig+0xb0>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a1c      	ldr	r2, [pc, #112]	; (800433c <TIM_OC2_SetConfig+0x104>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d00b      	beq.n	80042e8 <TIM_OC2_SetConfig+0xb0>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a1b      	ldr	r2, [pc, #108]	; (8004340 <TIM_OC2_SetConfig+0x108>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d007      	beq.n	80042e8 <TIM_OC2_SetConfig+0xb0>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a1a      	ldr	r2, [pc, #104]	; (8004344 <TIM_OC2_SetConfig+0x10c>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d003      	beq.n	80042e8 <TIM_OC2_SetConfig+0xb0>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a19      	ldr	r2, [pc, #100]	; (8004348 <TIM_OC2_SetConfig+0x110>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d113      	bne.n	8004310 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	4313      	orrs	r3, r2
 8004302:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	4313      	orrs	r3, r2
 800430e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685a      	ldr	r2, [r3, #4]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	621a      	str	r2, [r3, #32]
}
 800432a:	bf00      	nop
 800432c:	371c      	adds	r7, #28
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	40012c00 	.word	0x40012c00
 800433c:	40013400 	.word	0x40013400
 8004340:	40014000 	.word	0x40014000
 8004344:	40014400 	.word	0x40014400
 8004348:	40014800 	.word	0x40014800

0800434c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800434c:	b480      	push	{r7}
 800434e:	b087      	sub	sp, #28
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800437a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800437e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f023 0303 	bic.w	r3, r3, #3
 8004386:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	4313      	orrs	r3, r2
 8004390:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004398:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	021b      	lsls	r3, r3, #8
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a27      	ldr	r2, [pc, #156]	; (8004448 <TIM_OC3_SetConfig+0xfc>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d003      	beq.n	80043b6 <TIM_OC3_SetConfig+0x6a>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a26      	ldr	r2, [pc, #152]	; (800444c <TIM_OC3_SetConfig+0x100>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d10d      	bne.n	80043d2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	021b      	lsls	r3, r3, #8
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a1c      	ldr	r2, [pc, #112]	; (8004448 <TIM_OC3_SetConfig+0xfc>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d00f      	beq.n	80043fa <TIM_OC3_SetConfig+0xae>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a1b      	ldr	r2, [pc, #108]	; (800444c <TIM_OC3_SetConfig+0x100>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d00b      	beq.n	80043fa <TIM_OC3_SetConfig+0xae>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a1a      	ldr	r2, [pc, #104]	; (8004450 <TIM_OC3_SetConfig+0x104>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d007      	beq.n	80043fa <TIM_OC3_SetConfig+0xae>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a19      	ldr	r2, [pc, #100]	; (8004454 <TIM_OC3_SetConfig+0x108>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d003      	beq.n	80043fa <TIM_OC3_SetConfig+0xae>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a18      	ldr	r2, [pc, #96]	; (8004458 <TIM_OC3_SetConfig+0x10c>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d113      	bne.n	8004422 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004400:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004408:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	011b      	lsls	r3, r3, #4
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	4313      	orrs	r3, r2
 8004414:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	011b      	lsls	r3, r3, #4
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	4313      	orrs	r3, r2
 8004420:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685a      	ldr	r2, [r3, #4]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	621a      	str	r2, [r3, #32]
}
 800443c:	bf00      	nop
 800443e:	371c      	adds	r7, #28
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr
 8004448:	40012c00 	.word	0x40012c00
 800444c:	40013400 	.word	0x40013400
 8004450:	40014000 	.word	0x40014000
 8004454:	40014400 	.word	0x40014400
 8004458:	40014800 	.word	0x40014800

0800445c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800445c:	b480      	push	{r7}
 800445e:	b087      	sub	sp, #28
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	69db      	ldr	r3, [r3, #28]
 8004482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800448a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800448e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004496:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	021b      	lsls	r3, r3, #8
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	031b      	lsls	r3, r3, #12
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a28      	ldr	r2, [pc, #160]	; (800455c <TIM_OC4_SetConfig+0x100>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d003      	beq.n	80044c8 <TIM_OC4_SetConfig+0x6c>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a27      	ldr	r2, [pc, #156]	; (8004560 <TIM_OC4_SetConfig+0x104>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d10d      	bne.n	80044e4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80044ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	031b      	lsls	r3, r3, #12
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	4313      	orrs	r3, r2
 80044da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a1d      	ldr	r2, [pc, #116]	; (800455c <TIM_OC4_SetConfig+0x100>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d00f      	beq.n	800450c <TIM_OC4_SetConfig+0xb0>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a1c      	ldr	r2, [pc, #112]	; (8004560 <TIM_OC4_SetConfig+0x104>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d00b      	beq.n	800450c <TIM_OC4_SetConfig+0xb0>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a1b      	ldr	r2, [pc, #108]	; (8004564 <TIM_OC4_SetConfig+0x108>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d007      	beq.n	800450c <TIM_OC4_SetConfig+0xb0>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a1a      	ldr	r2, [pc, #104]	; (8004568 <TIM_OC4_SetConfig+0x10c>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d003      	beq.n	800450c <TIM_OC4_SetConfig+0xb0>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a19      	ldr	r2, [pc, #100]	; (800456c <TIM_OC4_SetConfig+0x110>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d113      	bne.n	8004534 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004512:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800451a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	019b      	lsls	r3, r3, #6
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	4313      	orrs	r3, r2
 8004526:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	019b      	lsls	r3, r3, #6
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	4313      	orrs	r3, r2
 8004532:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	621a      	str	r2, [r3, #32]
}
 800454e:	bf00      	nop
 8004550:	371c      	adds	r7, #28
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	40012c00 	.word	0x40012c00
 8004560:	40013400 	.word	0x40013400
 8004564:	40014000 	.word	0x40014000
 8004568:	40014400 	.word	0x40014400
 800456c:	40014800 	.word	0x40014800

08004570 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004570:	b480      	push	{r7}
 8004572:	b087      	sub	sp, #28
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800459e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80045b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	041b      	lsls	r3, r3, #16
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	4313      	orrs	r3, r2
 80045c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a17      	ldr	r2, [pc, #92]	; (8004624 <TIM_OC5_SetConfig+0xb4>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d00f      	beq.n	80045ea <TIM_OC5_SetConfig+0x7a>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a16      	ldr	r2, [pc, #88]	; (8004628 <TIM_OC5_SetConfig+0xb8>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d00b      	beq.n	80045ea <TIM_OC5_SetConfig+0x7a>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a15      	ldr	r2, [pc, #84]	; (800462c <TIM_OC5_SetConfig+0xbc>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d007      	beq.n	80045ea <TIM_OC5_SetConfig+0x7a>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a14      	ldr	r2, [pc, #80]	; (8004630 <TIM_OC5_SetConfig+0xc0>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d003      	beq.n	80045ea <TIM_OC5_SetConfig+0x7a>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a13      	ldr	r2, [pc, #76]	; (8004634 <TIM_OC5_SetConfig+0xc4>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d109      	bne.n	80045fe <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	021b      	lsls	r3, r3, #8
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	685a      	ldr	r2, [r3, #4]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	621a      	str	r2, [r3, #32]
}
 8004618:	bf00      	nop
 800461a:	371c      	adds	r7, #28
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr
 8004624:	40012c00 	.word	0x40012c00
 8004628:	40013400 	.word	0x40013400
 800462c:	40014000 	.word	0x40014000
 8004630:	40014400 	.word	0x40014400
 8004634:	40014800 	.word	0x40014800

08004638 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004638:	b480      	push	{r7}
 800463a:	b087      	sub	sp, #28
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800465e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800466a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	021b      	lsls	r3, r3, #8
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	4313      	orrs	r3, r2
 8004676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800467e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	051b      	lsls	r3, r3, #20
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	4313      	orrs	r3, r2
 800468a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a18      	ldr	r2, [pc, #96]	; (80046f0 <TIM_OC6_SetConfig+0xb8>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d00f      	beq.n	80046b4 <TIM_OC6_SetConfig+0x7c>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a17      	ldr	r2, [pc, #92]	; (80046f4 <TIM_OC6_SetConfig+0xbc>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d00b      	beq.n	80046b4 <TIM_OC6_SetConfig+0x7c>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a16      	ldr	r2, [pc, #88]	; (80046f8 <TIM_OC6_SetConfig+0xc0>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d007      	beq.n	80046b4 <TIM_OC6_SetConfig+0x7c>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a15      	ldr	r2, [pc, #84]	; (80046fc <TIM_OC6_SetConfig+0xc4>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d003      	beq.n	80046b4 <TIM_OC6_SetConfig+0x7c>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a14      	ldr	r2, [pc, #80]	; (8004700 <TIM_OC6_SetConfig+0xc8>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d109      	bne.n	80046c8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	029b      	lsls	r3, r3, #10
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	621a      	str	r2, [r3, #32]
}
 80046e2:	bf00      	nop
 80046e4:	371c      	adds	r7, #28
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	40012c00 	.word	0x40012c00
 80046f4:	40013400 	.word	0x40013400
 80046f8:	40014000 	.word	0x40014000
 80046fc:	40014400 	.word	0x40014400
 8004700:	40014800 	.word	0x40014800

08004704 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004704:	b480      	push	{r7}
 8004706:	b087      	sub	sp, #28
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	f023 0201 	bic.w	r2, r3, #1
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800472e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	011b      	lsls	r3, r3, #4
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	4313      	orrs	r3, r2
 8004738:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	f023 030a 	bic.w	r3, r3, #10
 8004740:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	4313      	orrs	r3, r2
 8004748:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	697a      	ldr	r2, [r7, #20]
 8004754:	621a      	str	r2, [r3, #32]
}
 8004756:	bf00      	nop
 8004758:	371c      	adds	r7, #28
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr

08004762 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004762:	b480      	push	{r7}
 8004764:	b087      	sub	sp, #28
 8004766:	af00      	add	r7, sp, #0
 8004768:	60f8      	str	r0, [r7, #12]
 800476a:	60b9      	str	r1, [r7, #8]
 800476c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6a1b      	ldr	r3, [r3, #32]
 8004772:	f023 0210 	bic.w	r2, r3, #16
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6a1b      	ldr	r3, [r3, #32]
 8004784:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800478c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	031b      	lsls	r3, r3, #12
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	4313      	orrs	r3, r2
 8004796:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800479e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	011b      	lsls	r3, r3, #4
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	621a      	str	r2, [r3, #32]
}
 80047b6:	bf00      	nop
 80047b8:	371c      	adds	r7, #28
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr

080047c2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047c2:	b480      	push	{r7}
 80047c4:	b085      	sub	sp, #20
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
 80047ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80047d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	f043 0307 	orr.w	r3, r3, #7
 80047e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	609a      	str	r2, [r3, #8]
}
 80047f0:	bf00      	nop
 80047f2:	3714      	adds	r7, #20
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b087      	sub	sp, #28
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
 8004808:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004816:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	021a      	lsls	r2, r3, #8
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	431a      	orrs	r2, r3
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	4313      	orrs	r3, r2
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	4313      	orrs	r3, r2
 8004828:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	609a      	str	r2, [r3, #8]
}
 8004830:	bf00      	nop
 8004832:	371c      	adds	r7, #28
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800483c:	b480      	push	{r7}
 800483e:	b087      	sub	sp, #28
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	f003 031f 	and.w	r3, r3, #31
 800484e:	2201      	movs	r2, #1
 8004850:	fa02 f303 	lsl.w	r3, r2, r3
 8004854:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6a1a      	ldr	r2, [r3, #32]
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	43db      	mvns	r3, r3
 800485e:	401a      	ands	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6a1a      	ldr	r2, [r3, #32]
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	f003 031f 	and.w	r3, r3, #31
 800486e:	6879      	ldr	r1, [r7, #4]
 8004870:	fa01 f303 	lsl.w	r3, r1, r3
 8004874:	431a      	orrs	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	621a      	str	r2, [r3, #32]
}
 800487a:	bf00      	nop
 800487c:	371c      	adds	r7, #28
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
	...

08004888 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004898:	2b01      	cmp	r3, #1
 800489a:	d101      	bne.n	80048a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800489c:	2302      	movs	r3, #2
 800489e:	e065      	b.n	800496c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2202      	movs	r2, #2
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a2c      	ldr	r2, [pc, #176]	; (8004978 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d004      	beq.n	80048d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a2b      	ldr	r2, [pc, #172]	; (800497c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d108      	bne.n	80048e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80048da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80048ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a1b      	ldr	r2, [pc, #108]	; (8004978 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d018      	beq.n	8004940 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004916:	d013      	beq.n	8004940 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a18      	ldr	r2, [pc, #96]	; (8004980 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d00e      	beq.n	8004940 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a17      	ldr	r2, [pc, #92]	; (8004984 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d009      	beq.n	8004940 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a12      	ldr	r2, [pc, #72]	; (800497c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d004      	beq.n	8004940 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a13      	ldr	r2, [pc, #76]	; (8004988 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d10c      	bne.n	800495a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004946:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	68ba      	ldr	r2, [r7, #8]
 800494e:	4313      	orrs	r3, r2
 8004950:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3714      	adds	r7, #20
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr
 8004978:	40012c00 	.word	0x40012c00
 800497c:	40013400 	.word	0x40013400
 8004980:	40000400 	.word	0x40000400
 8004984:	40000800 	.word	0x40000800
 8004988:	40014000 	.word	0x40014000

0800498c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e042      	b.n	8004ab0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d106      	bne.n	8004a42 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f7fc ff5d 	bl	80018fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2224      	movs	r2, #36	; 0x24
 8004a46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f022 0201 	bic.w	r2, r2, #1
 8004a58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f8c2 	bl	8004be4 <UART_SetConfig>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d101      	bne.n	8004a6a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e022      	b.n	8004ab0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d002      	beq.n	8004a78 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 fb82 	bl	800517c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689a      	ldr	r2, [r3, #8]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0201 	orr.w	r2, r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 fc09 	bl	80052c0 <UART_CheckIdleState>
 8004aae:	4603      	mov	r3, r0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3708      	adds	r7, #8
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b08a      	sub	sp, #40	; 0x28
 8004abc:	af02      	add	r7, sp, #8
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	603b      	str	r3, [r7, #0]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ace:	2b20      	cmp	r3, #32
 8004ad0:	f040 8083 	bne.w	8004bda <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d002      	beq.n	8004ae0 <HAL_UART_Transmit+0x28>
 8004ada:	88fb      	ldrh	r3, [r7, #6]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d101      	bne.n	8004ae4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e07b      	b.n	8004bdc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d101      	bne.n	8004af2 <HAL_UART_Transmit+0x3a>
 8004aee:	2302      	movs	r3, #2
 8004af0:	e074      	b.n	8004bdc <HAL_UART_Transmit+0x124>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2221      	movs	r2, #33	; 0x21
 8004b06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b0a:	f7fd f8e9 	bl	8001ce0 <HAL_GetTick>
 8004b0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	88fa      	ldrh	r2, [r7, #6]
 8004b14:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	88fa      	ldrh	r2, [r7, #6]
 8004b1c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b28:	d108      	bne.n	8004b3c <HAL_UART_Transmit+0x84>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d104      	bne.n	8004b3c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004b32:	2300      	movs	r3, #0
 8004b34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	61bb      	str	r3, [r7, #24]
 8004b3a:	e003      	b.n	8004b44 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b40:	2300      	movs	r3, #0
 8004b42:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004b4c:	e02c      	b.n	8004ba8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	2200      	movs	r2, #0
 8004b56:	2180      	movs	r1, #128	; 0x80
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f000 fbfc 	bl	8005356 <UART_WaitOnFlagUntilTimeout>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d001      	beq.n	8004b68 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e039      	b.n	8004bdc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10b      	bne.n	8004b86 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	881b      	ldrh	r3, [r3, #0]
 8004b72:	461a      	mov	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b7c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	3302      	adds	r3, #2
 8004b82:	61bb      	str	r3, [r7, #24]
 8004b84:	e007      	b.n	8004b96 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	781a      	ldrb	r2, [r3, #0]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	3301      	adds	r3, #1
 8004b94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1cc      	bne.n	8004b4e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	9300      	str	r3, [sp, #0]
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	2140      	movs	r1, #64	; 0x40
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f000 fbc9 	bl	8005356 <UART_WaitOnFlagUntilTimeout>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e006      	b.n	8004bdc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2220      	movs	r2, #32
 8004bd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	e000      	b.n	8004bdc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004bda:	2302      	movs	r3, #2
  }
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3720      	adds	r7, #32
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004be4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004be8:	b08c      	sub	sp, #48	; 0x30
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	689a      	ldr	r2, [r3, #8]
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	431a      	orrs	r2, r3
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	431a      	orrs	r2, r3
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	69db      	ldr	r3, [r3, #28]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	4bab      	ldr	r3, [pc, #684]	; (8004ec0 <UART_SetConfig+0x2dc>)
 8004c14:	4013      	ands	r3, r2
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	6812      	ldr	r2, [r2, #0]
 8004c1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c1c:	430b      	orrs	r3, r1
 8004c1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	68da      	ldr	r2, [r3, #12]
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4aa0      	ldr	r2, [pc, #640]	; (8004ec4 <UART_SetConfig+0x2e0>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d004      	beq.n	8004c50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004c5a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	6812      	ldr	r2, [r2, #0]
 8004c62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c64:	430b      	orrs	r3, r1
 8004c66:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6e:	f023 010f 	bic.w	r1, r3, #15
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a91      	ldr	r2, [pc, #580]	; (8004ec8 <UART_SetConfig+0x2e4>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d125      	bne.n	8004cd4 <UART_SetConfig+0xf0>
 8004c88:	4b90      	ldr	r3, [pc, #576]	; (8004ecc <UART_SetConfig+0x2e8>)
 8004c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8e:	f003 0303 	and.w	r3, r3, #3
 8004c92:	2b03      	cmp	r3, #3
 8004c94:	d81a      	bhi.n	8004ccc <UART_SetConfig+0xe8>
 8004c96:	a201      	add	r2, pc, #4	; (adr r2, 8004c9c <UART_SetConfig+0xb8>)
 8004c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c9c:	08004cad 	.word	0x08004cad
 8004ca0:	08004cbd 	.word	0x08004cbd
 8004ca4:	08004cb5 	.word	0x08004cb5
 8004ca8:	08004cc5 	.word	0x08004cc5
 8004cac:	2301      	movs	r3, #1
 8004cae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cb2:	e0d6      	b.n	8004e62 <UART_SetConfig+0x27e>
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cba:	e0d2      	b.n	8004e62 <UART_SetConfig+0x27e>
 8004cbc:	2304      	movs	r3, #4
 8004cbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cc2:	e0ce      	b.n	8004e62 <UART_SetConfig+0x27e>
 8004cc4:	2308      	movs	r3, #8
 8004cc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cca:	e0ca      	b.n	8004e62 <UART_SetConfig+0x27e>
 8004ccc:	2310      	movs	r3, #16
 8004cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cd2:	e0c6      	b.n	8004e62 <UART_SetConfig+0x27e>
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a7d      	ldr	r2, [pc, #500]	; (8004ed0 <UART_SetConfig+0x2ec>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d138      	bne.n	8004d50 <UART_SetConfig+0x16c>
 8004cde:	4b7b      	ldr	r3, [pc, #492]	; (8004ecc <UART_SetConfig+0x2e8>)
 8004ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce4:	f003 030c 	and.w	r3, r3, #12
 8004ce8:	2b0c      	cmp	r3, #12
 8004cea:	d82d      	bhi.n	8004d48 <UART_SetConfig+0x164>
 8004cec:	a201      	add	r2, pc, #4	; (adr r2, 8004cf4 <UART_SetConfig+0x110>)
 8004cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf2:	bf00      	nop
 8004cf4:	08004d29 	.word	0x08004d29
 8004cf8:	08004d49 	.word	0x08004d49
 8004cfc:	08004d49 	.word	0x08004d49
 8004d00:	08004d49 	.word	0x08004d49
 8004d04:	08004d39 	.word	0x08004d39
 8004d08:	08004d49 	.word	0x08004d49
 8004d0c:	08004d49 	.word	0x08004d49
 8004d10:	08004d49 	.word	0x08004d49
 8004d14:	08004d31 	.word	0x08004d31
 8004d18:	08004d49 	.word	0x08004d49
 8004d1c:	08004d49 	.word	0x08004d49
 8004d20:	08004d49 	.word	0x08004d49
 8004d24:	08004d41 	.word	0x08004d41
 8004d28:	2300      	movs	r3, #0
 8004d2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d2e:	e098      	b.n	8004e62 <UART_SetConfig+0x27e>
 8004d30:	2302      	movs	r3, #2
 8004d32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d36:	e094      	b.n	8004e62 <UART_SetConfig+0x27e>
 8004d38:	2304      	movs	r3, #4
 8004d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d3e:	e090      	b.n	8004e62 <UART_SetConfig+0x27e>
 8004d40:	2308      	movs	r3, #8
 8004d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d46:	e08c      	b.n	8004e62 <UART_SetConfig+0x27e>
 8004d48:	2310      	movs	r3, #16
 8004d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d4e:	e088      	b.n	8004e62 <UART_SetConfig+0x27e>
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a5f      	ldr	r2, [pc, #380]	; (8004ed4 <UART_SetConfig+0x2f0>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d125      	bne.n	8004da6 <UART_SetConfig+0x1c2>
 8004d5a:	4b5c      	ldr	r3, [pc, #368]	; (8004ecc <UART_SetConfig+0x2e8>)
 8004d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d60:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d64:	2b30      	cmp	r3, #48	; 0x30
 8004d66:	d016      	beq.n	8004d96 <UART_SetConfig+0x1b2>
 8004d68:	2b30      	cmp	r3, #48	; 0x30
 8004d6a:	d818      	bhi.n	8004d9e <UART_SetConfig+0x1ba>
 8004d6c:	2b20      	cmp	r3, #32
 8004d6e:	d00a      	beq.n	8004d86 <UART_SetConfig+0x1a2>
 8004d70:	2b20      	cmp	r3, #32
 8004d72:	d814      	bhi.n	8004d9e <UART_SetConfig+0x1ba>
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d002      	beq.n	8004d7e <UART_SetConfig+0x19a>
 8004d78:	2b10      	cmp	r3, #16
 8004d7a:	d008      	beq.n	8004d8e <UART_SetConfig+0x1aa>
 8004d7c:	e00f      	b.n	8004d9e <UART_SetConfig+0x1ba>
 8004d7e:	2300      	movs	r3, #0
 8004d80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d84:	e06d      	b.n	8004e62 <UART_SetConfig+0x27e>
 8004d86:	2302      	movs	r3, #2
 8004d88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d8c:	e069      	b.n	8004e62 <UART_SetConfig+0x27e>
 8004d8e:	2304      	movs	r3, #4
 8004d90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d94:	e065      	b.n	8004e62 <UART_SetConfig+0x27e>
 8004d96:	2308      	movs	r3, #8
 8004d98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d9c:	e061      	b.n	8004e62 <UART_SetConfig+0x27e>
 8004d9e:	2310      	movs	r3, #16
 8004da0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004da4:	e05d      	b.n	8004e62 <UART_SetConfig+0x27e>
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a4b      	ldr	r2, [pc, #300]	; (8004ed8 <UART_SetConfig+0x2f4>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d125      	bne.n	8004dfc <UART_SetConfig+0x218>
 8004db0:	4b46      	ldr	r3, [pc, #280]	; (8004ecc <UART_SetConfig+0x2e8>)
 8004db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004dba:	2bc0      	cmp	r3, #192	; 0xc0
 8004dbc:	d016      	beq.n	8004dec <UART_SetConfig+0x208>
 8004dbe:	2bc0      	cmp	r3, #192	; 0xc0
 8004dc0:	d818      	bhi.n	8004df4 <UART_SetConfig+0x210>
 8004dc2:	2b80      	cmp	r3, #128	; 0x80
 8004dc4:	d00a      	beq.n	8004ddc <UART_SetConfig+0x1f8>
 8004dc6:	2b80      	cmp	r3, #128	; 0x80
 8004dc8:	d814      	bhi.n	8004df4 <UART_SetConfig+0x210>
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d002      	beq.n	8004dd4 <UART_SetConfig+0x1f0>
 8004dce:	2b40      	cmp	r3, #64	; 0x40
 8004dd0:	d008      	beq.n	8004de4 <UART_SetConfig+0x200>
 8004dd2:	e00f      	b.n	8004df4 <UART_SetConfig+0x210>
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dda:	e042      	b.n	8004e62 <UART_SetConfig+0x27e>
 8004ddc:	2302      	movs	r3, #2
 8004dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004de2:	e03e      	b.n	8004e62 <UART_SetConfig+0x27e>
 8004de4:	2304      	movs	r3, #4
 8004de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dea:	e03a      	b.n	8004e62 <UART_SetConfig+0x27e>
 8004dec:	2308      	movs	r3, #8
 8004dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004df2:	e036      	b.n	8004e62 <UART_SetConfig+0x27e>
 8004df4:	2310      	movs	r3, #16
 8004df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dfa:	e032      	b.n	8004e62 <UART_SetConfig+0x27e>
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a30      	ldr	r2, [pc, #192]	; (8004ec4 <UART_SetConfig+0x2e0>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d12a      	bne.n	8004e5c <UART_SetConfig+0x278>
 8004e06:	4b31      	ldr	r3, [pc, #196]	; (8004ecc <UART_SetConfig+0x2e8>)
 8004e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e14:	d01a      	beq.n	8004e4c <UART_SetConfig+0x268>
 8004e16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e1a:	d81b      	bhi.n	8004e54 <UART_SetConfig+0x270>
 8004e1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e20:	d00c      	beq.n	8004e3c <UART_SetConfig+0x258>
 8004e22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e26:	d815      	bhi.n	8004e54 <UART_SetConfig+0x270>
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d003      	beq.n	8004e34 <UART_SetConfig+0x250>
 8004e2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e30:	d008      	beq.n	8004e44 <UART_SetConfig+0x260>
 8004e32:	e00f      	b.n	8004e54 <UART_SetConfig+0x270>
 8004e34:	2300      	movs	r3, #0
 8004e36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e3a:	e012      	b.n	8004e62 <UART_SetConfig+0x27e>
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e42:	e00e      	b.n	8004e62 <UART_SetConfig+0x27e>
 8004e44:	2304      	movs	r3, #4
 8004e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e4a:	e00a      	b.n	8004e62 <UART_SetConfig+0x27e>
 8004e4c:	2308      	movs	r3, #8
 8004e4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e52:	e006      	b.n	8004e62 <UART_SetConfig+0x27e>
 8004e54:	2310      	movs	r3, #16
 8004e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e5a:	e002      	b.n	8004e62 <UART_SetConfig+0x27e>
 8004e5c:	2310      	movs	r3, #16
 8004e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a17      	ldr	r2, [pc, #92]	; (8004ec4 <UART_SetConfig+0x2e0>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	f040 80a8 	bne.w	8004fbe <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e72:	2b08      	cmp	r3, #8
 8004e74:	d834      	bhi.n	8004ee0 <UART_SetConfig+0x2fc>
 8004e76:	a201      	add	r2, pc, #4	; (adr r2, 8004e7c <UART_SetConfig+0x298>)
 8004e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e7c:	08004ea1 	.word	0x08004ea1
 8004e80:	08004ee1 	.word	0x08004ee1
 8004e84:	08004ea9 	.word	0x08004ea9
 8004e88:	08004ee1 	.word	0x08004ee1
 8004e8c:	08004eaf 	.word	0x08004eaf
 8004e90:	08004ee1 	.word	0x08004ee1
 8004e94:	08004ee1 	.word	0x08004ee1
 8004e98:	08004ee1 	.word	0x08004ee1
 8004e9c:	08004eb7 	.word	0x08004eb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ea0:	f7fd ff3a 	bl	8002d18 <HAL_RCC_GetPCLK1Freq>
 8004ea4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ea6:	e021      	b.n	8004eec <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ea8:	4b0c      	ldr	r3, [pc, #48]	; (8004edc <UART_SetConfig+0x2f8>)
 8004eaa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004eac:	e01e      	b.n	8004eec <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eae:	f7fd fec5 	bl	8002c3c <HAL_RCC_GetSysClockFreq>
 8004eb2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004eb4:	e01a      	b.n	8004eec <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ebc:	e016      	b.n	8004eec <UART_SetConfig+0x308>
 8004ebe:	bf00      	nop
 8004ec0:	cfff69f3 	.word	0xcfff69f3
 8004ec4:	40008000 	.word	0x40008000
 8004ec8:	40013800 	.word	0x40013800
 8004ecc:	40021000 	.word	0x40021000
 8004ed0:	40004400 	.word	0x40004400
 8004ed4:	40004800 	.word	0x40004800
 8004ed8:	40004c00 	.word	0x40004c00
 8004edc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004eea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f000 812a 	beq.w	8005148 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef8:	4a9e      	ldr	r2, [pc, #632]	; (8005174 <UART_SetConfig+0x590>)
 8004efa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004efe:	461a      	mov	r2, r3
 8004f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f02:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f06:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	685a      	ldr	r2, [r3, #4]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	005b      	lsls	r3, r3, #1
 8004f10:	4413      	add	r3, r2
 8004f12:	69ba      	ldr	r2, [r7, #24]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d305      	bcc.n	8004f24 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f1e:	69ba      	ldr	r2, [r7, #24]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d903      	bls.n	8004f2c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004f2a:	e10d      	b.n	8005148 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2e:	2200      	movs	r2, #0
 8004f30:	60bb      	str	r3, [r7, #8]
 8004f32:	60fa      	str	r2, [r7, #12]
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f38:	4a8e      	ldr	r2, [pc, #568]	; (8005174 <UART_SetConfig+0x590>)
 8004f3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	2200      	movs	r2, #0
 8004f42:	603b      	str	r3, [r7, #0]
 8004f44:	607a      	str	r2, [r7, #4]
 8004f46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f4e:	f7fb fea3 	bl	8000c98 <__aeabi_uldivmod>
 8004f52:	4602      	mov	r2, r0
 8004f54:	460b      	mov	r3, r1
 8004f56:	4610      	mov	r0, r2
 8004f58:	4619      	mov	r1, r3
 8004f5a:	f04f 0200 	mov.w	r2, #0
 8004f5e:	f04f 0300 	mov.w	r3, #0
 8004f62:	020b      	lsls	r3, r1, #8
 8004f64:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004f68:	0202      	lsls	r2, r0, #8
 8004f6a:	6979      	ldr	r1, [r7, #20]
 8004f6c:	6849      	ldr	r1, [r1, #4]
 8004f6e:	0849      	lsrs	r1, r1, #1
 8004f70:	2000      	movs	r0, #0
 8004f72:	460c      	mov	r4, r1
 8004f74:	4605      	mov	r5, r0
 8004f76:	eb12 0804 	adds.w	r8, r2, r4
 8004f7a:	eb43 0905 	adc.w	r9, r3, r5
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	469a      	mov	sl, r3
 8004f86:	4693      	mov	fp, r2
 8004f88:	4652      	mov	r2, sl
 8004f8a:	465b      	mov	r3, fp
 8004f8c:	4640      	mov	r0, r8
 8004f8e:	4649      	mov	r1, r9
 8004f90:	f7fb fe82 	bl	8000c98 <__aeabi_uldivmod>
 8004f94:	4602      	mov	r2, r0
 8004f96:	460b      	mov	r3, r1
 8004f98:	4613      	mov	r3, r2
 8004f9a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f9c:	6a3b      	ldr	r3, [r7, #32]
 8004f9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fa2:	d308      	bcc.n	8004fb6 <UART_SetConfig+0x3d2>
 8004fa4:	6a3b      	ldr	r3, [r7, #32]
 8004fa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004faa:	d204      	bcs.n	8004fb6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6a3a      	ldr	r2, [r7, #32]
 8004fb2:	60da      	str	r2, [r3, #12]
 8004fb4:	e0c8      	b.n	8005148 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004fbc:	e0c4      	b.n	8005148 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fc6:	d167      	bne.n	8005098 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004fc8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004fcc:	2b08      	cmp	r3, #8
 8004fce:	d828      	bhi.n	8005022 <UART_SetConfig+0x43e>
 8004fd0:	a201      	add	r2, pc, #4	; (adr r2, 8004fd8 <UART_SetConfig+0x3f4>)
 8004fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd6:	bf00      	nop
 8004fd8:	08004ffd 	.word	0x08004ffd
 8004fdc:	08005005 	.word	0x08005005
 8004fe0:	0800500d 	.word	0x0800500d
 8004fe4:	08005023 	.word	0x08005023
 8004fe8:	08005013 	.word	0x08005013
 8004fec:	08005023 	.word	0x08005023
 8004ff0:	08005023 	.word	0x08005023
 8004ff4:	08005023 	.word	0x08005023
 8004ff8:	0800501b 	.word	0x0800501b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ffc:	f7fd fe8c 	bl	8002d18 <HAL_RCC_GetPCLK1Freq>
 8005000:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005002:	e014      	b.n	800502e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005004:	f7fd fe9e 	bl	8002d44 <HAL_RCC_GetPCLK2Freq>
 8005008:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800500a:	e010      	b.n	800502e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800500c:	4b5a      	ldr	r3, [pc, #360]	; (8005178 <UART_SetConfig+0x594>)
 800500e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005010:	e00d      	b.n	800502e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005012:	f7fd fe13 	bl	8002c3c <HAL_RCC_GetSysClockFreq>
 8005016:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005018:	e009      	b.n	800502e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800501a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800501e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005020:	e005      	b.n	800502e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8005022:	2300      	movs	r3, #0
 8005024:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800502c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800502e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005030:	2b00      	cmp	r3, #0
 8005032:	f000 8089 	beq.w	8005148 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503a:	4a4e      	ldr	r2, [pc, #312]	; (8005174 <UART_SetConfig+0x590>)
 800503c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005040:	461a      	mov	r2, r3
 8005042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005044:	fbb3 f3f2 	udiv	r3, r3, r2
 8005048:	005a      	lsls	r2, r3, #1
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	085b      	lsrs	r3, r3, #1
 8005050:	441a      	add	r2, r3
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	fbb2 f3f3 	udiv	r3, r2, r3
 800505a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800505c:	6a3b      	ldr	r3, [r7, #32]
 800505e:	2b0f      	cmp	r3, #15
 8005060:	d916      	bls.n	8005090 <UART_SetConfig+0x4ac>
 8005062:	6a3b      	ldr	r3, [r7, #32]
 8005064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005068:	d212      	bcs.n	8005090 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800506a:	6a3b      	ldr	r3, [r7, #32]
 800506c:	b29b      	uxth	r3, r3
 800506e:	f023 030f 	bic.w	r3, r3, #15
 8005072:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005074:	6a3b      	ldr	r3, [r7, #32]
 8005076:	085b      	lsrs	r3, r3, #1
 8005078:	b29b      	uxth	r3, r3
 800507a:	f003 0307 	and.w	r3, r3, #7
 800507e:	b29a      	uxth	r2, r3
 8005080:	8bfb      	ldrh	r3, [r7, #30]
 8005082:	4313      	orrs	r3, r2
 8005084:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	8bfa      	ldrh	r2, [r7, #30]
 800508c:	60da      	str	r2, [r3, #12]
 800508e:	e05b      	b.n	8005148 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005096:	e057      	b.n	8005148 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005098:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800509c:	2b08      	cmp	r3, #8
 800509e:	d828      	bhi.n	80050f2 <UART_SetConfig+0x50e>
 80050a0:	a201      	add	r2, pc, #4	; (adr r2, 80050a8 <UART_SetConfig+0x4c4>)
 80050a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a6:	bf00      	nop
 80050a8:	080050cd 	.word	0x080050cd
 80050ac:	080050d5 	.word	0x080050d5
 80050b0:	080050dd 	.word	0x080050dd
 80050b4:	080050f3 	.word	0x080050f3
 80050b8:	080050e3 	.word	0x080050e3
 80050bc:	080050f3 	.word	0x080050f3
 80050c0:	080050f3 	.word	0x080050f3
 80050c4:	080050f3 	.word	0x080050f3
 80050c8:	080050eb 	.word	0x080050eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050cc:	f7fd fe24 	bl	8002d18 <HAL_RCC_GetPCLK1Freq>
 80050d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80050d2:	e014      	b.n	80050fe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050d4:	f7fd fe36 	bl	8002d44 <HAL_RCC_GetPCLK2Freq>
 80050d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80050da:	e010      	b.n	80050fe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050dc:	4b26      	ldr	r3, [pc, #152]	; (8005178 <UART_SetConfig+0x594>)
 80050de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80050e0:	e00d      	b.n	80050fe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050e2:	f7fd fdab 	bl	8002c3c <HAL_RCC_GetSysClockFreq>
 80050e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80050e8:	e009      	b.n	80050fe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80050f0:	e005      	b.n	80050fe <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80050f2:	2300      	movs	r3, #0
 80050f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80050fc:	bf00      	nop
    }

    if (pclk != 0U)
 80050fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005100:	2b00      	cmp	r3, #0
 8005102:	d021      	beq.n	8005148 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005108:	4a1a      	ldr	r2, [pc, #104]	; (8005174 <UART_SetConfig+0x590>)
 800510a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800510e:	461a      	mov	r2, r3
 8005110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005112:	fbb3 f2f2 	udiv	r2, r3, r2
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	085b      	lsrs	r3, r3, #1
 800511c:	441a      	add	r2, r3
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	fbb2 f3f3 	udiv	r3, r2, r3
 8005126:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005128:	6a3b      	ldr	r3, [r7, #32]
 800512a:	2b0f      	cmp	r3, #15
 800512c:	d909      	bls.n	8005142 <UART_SetConfig+0x55e>
 800512e:	6a3b      	ldr	r3, [r7, #32]
 8005130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005134:	d205      	bcs.n	8005142 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005136:	6a3b      	ldr	r3, [r7, #32]
 8005138:	b29a      	uxth	r2, r3
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	60da      	str	r2, [r3, #12]
 8005140:	e002      	b.n	8005148 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	2201      	movs	r2, #1
 800514c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	2201      	movs	r2, #1
 8005154:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	2200      	movs	r2, #0
 800515c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	2200      	movs	r2, #0
 8005162:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005164:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005168:	4618      	mov	r0, r3
 800516a:	3730      	adds	r7, #48	; 0x30
 800516c:	46bd      	mov	sp, r7
 800516e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005172:	bf00      	nop
 8005174:	08008380 	.word	0x08008380
 8005178:	00f42400 	.word	0x00f42400

0800517c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005188:	f003 0301 	and.w	r3, r3, #1
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00a      	beq.n	80051a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	430a      	orrs	r2, r1
 80051a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00a      	beq.n	80051c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	430a      	orrs	r2, r1
 80051c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051cc:	f003 0304 	and.w	r3, r3, #4
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00a      	beq.n	80051ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	430a      	orrs	r2, r1
 80051e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ee:	f003 0308 	and.w	r3, r3, #8
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00a      	beq.n	800520c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	430a      	orrs	r2, r1
 800520a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005210:	f003 0310 	and.w	r3, r3, #16
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00a      	beq.n	800522e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	430a      	orrs	r2, r1
 800522c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005232:	f003 0320 	and.w	r3, r3, #32
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00a      	beq.n	8005250 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	430a      	orrs	r2, r1
 800524e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005258:	2b00      	cmp	r3, #0
 800525a:	d01a      	beq.n	8005292 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	430a      	orrs	r2, r1
 8005270:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005276:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800527a:	d10a      	bne.n	8005292 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	430a      	orrs	r2, r1
 8005290:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00a      	beq.n	80052b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	430a      	orrs	r2, r1
 80052b2:	605a      	str	r2, [r3, #4]
  }
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af02      	add	r7, sp, #8
 80052c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052d0:	f7fc fd06 	bl	8001ce0 <HAL_GetTick>
 80052d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0308 	and.w	r3, r3, #8
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d10e      	bne.n	8005302 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052e8:	9300      	str	r3, [sp, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f82f 	bl	8005356 <UART_WaitOnFlagUntilTimeout>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d001      	beq.n	8005302 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e025      	b.n	800534e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0304 	and.w	r3, r3, #4
 800530c:	2b04      	cmp	r3, #4
 800530e:	d10e      	bne.n	800532e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005310:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005314:	9300      	str	r3, [sp, #0]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f819 	bl	8005356 <UART_WaitOnFlagUntilTimeout>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e00f      	b.n	800534e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2220      	movs	r2, #32
 8005332:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2220      	movs	r2, #32
 800533a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b09c      	sub	sp, #112	; 0x70
 800535a:	af00      	add	r7, sp, #0
 800535c:	60f8      	str	r0, [r7, #12]
 800535e:	60b9      	str	r1, [r7, #8]
 8005360:	603b      	str	r3, [r7, #0]
 8005362:	4613      	mov	r3, r2
 8005364:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005366:	e0a9      	b.n	80054bc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005368:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800536a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800536e:	f000 80a5 	beq.w	80054bc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005372:	f7fc fcb5 	bl	8001ce0 <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800537e:	429a      	cmp	r2, r3
 8005380:	d302      	bcc.n	8005388 <UART_WaitOnFlagUntilTimeout+0x32>
 8005382:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005384:	2b00      	cmp	r3, #0
 8005386:	d140      	bne.n	800540a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005390:	e853 3f00 	ldrex	r3, [r3]
 8005394:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005398:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800539c:	667b      	str	r3, [r7, #100]	; 0x64
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	461a      	mov	r2, r3
 80053a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053a8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80053ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80053ae:	e841 2300 	strex	r3, r2, [r1]
 80053b2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80053b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1e6      	bne.n	8005388 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	3308      	adds	r3, #8
 80053c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053c4:	e853 3f00 	ldrex	r3, [r3]
 80053c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053cc:	f023 0301 	bic.w	r3, r3, #1
 80053d0:	663b      	str	r3, [r7, #96]	; 0x60
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	3308      	adds	r3, #8
 80053d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80053da:	64ba      	str	r2, [r7, #72]	; 0x48
 80053dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80053e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053e2:	e841 2300 	strex	r3, r2, [r1]
 80053e6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80053e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1e5      	bne.n	80053ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2220      	movs	r2, #32
 80053f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2220      	movs	r2, #32
 80053fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e069      	b.n	80054de <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0304 	and.w	r3, r3, #4
 8005414:	2b00      	cmp	r3, #0
 8005416:	d051      	beq.n	80054bc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	69db      	ldr	r3, [r3, #28]
 800541e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005422:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005426:	d149      	bne.n	80054bc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005430:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543a:	e853 3f00 	ldrex	r3, [r3]
 800543e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005442:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005446:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	461a      	mov	r2, r3
 800544e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005450:	637b      	str	r3, [r7, #52]	; 0x34
 8005452:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005454:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005456:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005458:	e841 2300 	strex	r3, r2, [r1]
 800545c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800545e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1e6      	bne.n	8005432 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	3308      	adds	r3, #8
 800546a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	e853 3f00 	ldrex	r3, [r3]
 8005472:	613b      	str	r3, [r7, #16]
   return(result);
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	f023 0301 	bic.w	r3, r3, #1
 800547a:	66bb      	str	r3, [r7, #104]	; 0x68
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	3308      	adds	r3, #8
 8005482:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005484:	623a      	str	r2, [r7, #32]
 8005486:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005488:	69f9      	ldr	r1, [r7, #28]
 800548a:	6a3a      	ldr	r2, [r7, #32]
 800548c:	e841 2300 	strex	r3, r2, [r1]
 8005490:	61bb      	str	r3, [r7, #24]
   return(result);
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1e5      	bne.n	8005464 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2220      	movs	r2, #32
 800549c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2220      	movs	r2, #32
 80054a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2220      	movs	r2, #32
 80054ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e010      	b.n	80054de <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	69da      	ldr	r2, [r3, #28]
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	4013      	ands	r3, r2
 80054c6:	68ba      	ldr	r2, [r7, #8]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	bf0c      	ite	eq
 80054cc:	2301      	moveq	r3, #1
 80054ce:	2300      	movne	r3, #0
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	461a      	mov	r2, r3
 80054d4:	79fb      	ldrb	r3, [r7, #7]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	f43f af46 	beq.w	8005368 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3770      	adds	r7, #112	; 0x70
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b085      	sub	sp, #20
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d101      	bne.n	80054fc <HAL_UARTEx_DisableFifoMode+0x16>
 80054f8:	2302      	movs	r3, #2
 80054fa:	e027      	b.n	800554c <HAL_UARTEx_DisableFifoMode+0x66>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2224      	movs	r2, #36	; 0x24
 8005508:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f022 0201 	bic.w	r2, r2, #1
 8005522:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800552a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2220      	movs	r2, #32
 800553e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3714      	adds	r7, #20
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005568:	2b01      	cmp	r3, #1
 800556a:	d101      	bne.n	8005570 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800556c:	2302      	movs	r3, #2
 800556e:	e02d      	b.n	80055cc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2224      	movs	r2, #36	; 0x24
 800557c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 0201 	bic.w	r2, r2, #1
 8005596:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 f84f 	bl	8005650 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2220      	movs	r2, #32
 80055be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3710      	adds	r7, #16
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d101      	bne.n	80055ec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80055e8:	2302      	movs	r3, #2
 80055ea:	e02d      	b.n	8005648 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2224      	movs	r2, #36	; 0x24
 80055f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f022 0201 	bic.w	r2, r2, #1
 8005612:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	683a      	ldr	r2, [r7, #0]
 8005624:	430a      	orrs	r2, r1
 8005626:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 f811 	bl	8005650 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2220      	movs	r2, #32
 800563a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800565c:	2b00      	cmp	r3, #0
 800565e:	d108      	bne.n	8005672 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005670:	e031      	b.n	80056d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005672:	2308      	movs	r3, #8
 8005674:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005676:	2308      	movs	r3, #8
 8005678:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	0e5b      	lsrs	r3, r3, #25
 8005682:	b2db      	uxtb	r3, r3
 8005684:	f003 0307 	and.w	r3, r3, #7
 8005688:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	0f5b      	lsrs	r3, r3, #29
 8005692:	b2db      	uxtb	r3, r3
 8005694:	f003 0307 	and.w	r3, r3, #7
 8005698:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800569a:	7bbb      	ldrb	r3, [r7, #14]
 800569c:	7b3a      	ldrb	r2, [r7, #12]
 800569e:	4911      	ldr	r1, [pc, #68]	; (80056e4 <UARTEx_SetNbDataToProcess+0x94>)
 80056a0:	5c8a      	ldrb	r2, [r1, r2]
 80056a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80056a6:	7b3a      	ldrb	r2, [r7, #12]
 80056a8:	490f      	ldr	r1, [pc, #60]	; (80056e8 <UARTEx_SetNbDataToProcess+0x98>)
 80056aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056b8:	7bfb      	ldrb	r3, [r7, #15]
 80056ba:	7b7a      	ldrb	r2, [r7, #13]
 80056bc:	4909      	ldr	r1, [pc, #36]	; (80056e4 <UARTEx_SetNbDataToProcess+0x94>)
 80056be:	5c8a      	ldrb	r2, [r1, r2]
 80056c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80056c4:	7b7a      	ldrb	r2, [r7, #13]
 80056c6:	4908      	ldr	r1, [pc, #32]	; (80056e8 <UARTEx_SetNbDataToProcess+0x98>)
 80056c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80056d6:	bf00      	nop
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	08008398 	.word	0x08008398
 80056e8:	080083a0 	.word	0x080083a0

080056ec <__errno>:
 80056ec:	4b01      	ldr	r3, [pc, #4]	; (80056f4 <__errno+0x8>)
 80056ee:	6818      	ldr	r0, [r3, #0]
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	2000001c 	.word	0x2000001c

080056f8 <__libc_init_array>:
 80056f8:	b570      	push	{r4, r5, r6, lr}
 80056fa:	4d0d      	ldr	r5, [pc, #52]	; (8005730 <__libc_init_array+0x38>)
 80056fc:	4c0d      	ldr	r4, [pc, #52]	; (8005734 <__libc_init_array+0x3c>)
 80056fe:	1b64      	subs	r4, r4, r5
 8005700:	10a4      	asrs	r4, r4, #2
 8005702:	2600      	movs	r6, #0
 8005704:	42a6      	cmp	r6, r4
 8005706:	d109      	bne.n	800571c <__libc_init_array+0x24>
 8005708:	4d0b      	ldr	r5, [pc, #44]	; (8005738 <__libc_init_array+0x40>)
 800570a:	4c0c      	ldr	r4, [pc, #48]	; (800573c <__libc_init_array+0x44>)
 800570c:	f002 fe1a 	bl	8008344 <_init>
 8005710:	1b64      	subs	r4, r4, r5
 8005712:	10a4      	asrs	r4, r4, #2
 8005714:	2600      	movs	r6, #0
 8005716:	42a6      	cmp	r6, r4
 8005718:	d105      	bne.n	8005726 <__libc_init_array+0x2e>
 800571a:	bd70      	pop	{r4, r5, r6, pc}
 800571c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005720:	4798      	blx	r3
 8005722:	3601      	adds	r6, #1
 8005724:	e7ee      	b.n	8005704 <__libc_init_array+0xc>
 8005726:	f855 3b04 	ldr.w	r3, [r5], #4
 800572a:	4798      	blx	r3
 800572c:	3601      	adds	r6, #1
 800572e:	e7f2      	b.n	8005716 <__libc_init_array+0x1e>
 8005730:	0800878c 	.word	0x0800878c
 8005734:	0800878c 	.word	0x0800878c
 8005738:	0800878c 	.word	0x0800878c
 800573c:	08008790 	.word	0x08008790

08005740 <memset>:
 8005740:	4402      	add	r2, r0
 8005742:	4603      	mov	r3, r0
 8005744:	4293      	cmp	r3, r2
 8005746:	d100      	bne.n	800574a <memset+0xa>
 8005748:	4770      	bx	lr
 800574a:	f803 1b01 	strb.w	r1, [r3], #1
 800574e:	e7f9      	b.n	8005744 <memset+0x4>

08005750 <__cvt>:
 8005750:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005754:	ec55 4b10 	vmov	r4, r5, d0
 8005758:	2d00      	cmp	r5, #0
 800575a:	460e      	mov	r6, r1
 800575c:	4619      	mov	r1, r3
 800575e:	462b      	mov	r3, r5
 8005760:	bfbb      	ittet	lt
 8005762:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005766:	461d      	movlt	r5, r3
 8005768:	2300      	movge	r3, #0
 800576a:	232d      	movlt	r3, #45	; 0x2d
 800576c:	700b      	strb	r3, [r1, #0]
 800576e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005770:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005774:	4691      	mov	r9, r2
 8005776:	f023 0820 	bic.w	r8, r3, #32
 800577a:	bfbc      	itt	lt
 800577c:	4622      	movlt	r2, r4
 800577e:	4614      	movlt	r4, r2
 8005780:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005784:	d005      	beq.n	8005792 <__cvt+0x42>
 8005786:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800578a:	d100      	bne.n	800578e <__cvt+0x3e>
 800578c:	3601      	adds	r6, #1
 800578e:	2102      	movs	r1, #2
 8005790:	e000      	b.n	8005794 <__cvt+0x44>
 8005792:	2103      	movs	r1, #3
 8005794:	ab03      	add	r3, sp, #12
 8005796:	9301      	str	r3, [sp, #4]
 8005798:	ab02      	add	r3, sp, #8
 800579a:	9300      	str	r3, [sp, #0]
 800579c:	ec45 4b10 	vmov	d0, r4, r5
 80057a0:	4653      	mov	r3, sl
 80057a2:	4632      	mov	r2, r6
 80057a4:	f000 fdb0 	bl	8006308 <_dtoa_r>
 80057a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80057ac:	4607      	mov	r7, r0
 80057ae:	d102      	bne.n	80057b6 <__cvt+0x66>
 80057b0:	f019 0f01 	tst.w	r9, #1
 80057b4:	d022      	beq.n	80057fc <__cvt+0xac>
 80057b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80057ba:	eb07 0906 	add.w	r9, r7, r6
 80057be:	d110      	bne.n	80057e2 <__cvt+0x92>
 80057c0:	783b      	ldrb	r3, [r7, #0]
 80057c2:	2b30      	cmp	r3, #48	; 0x30
 80057c4:	d10a      	bne.n	80057dc <__cvt+0x8c>
 80057c6:	2200      	movs	r2, #0
 80057c8:	2300      	movs	r3, #0
 80057ca:	4620      	mov	r0, r4
 80057cc:	4629      	mov	r1, r5
 80057ce:	f7fb f9a3 	bl	8000b18 <__aeabi_dcmpeq>
 80057d2:	b918      	cbnz	r0, 80057dc <__cvt+0x8c>
 80057d4:	f1c6 0601 	rsb	r6, r6, #1
 80057d8:	f8ca 6000 	str.w	r6, [sl]
 80057dc:	f8da 3000 	ldr.w	r3, [sl]
 80057e0:	4499      	add	r9, r3
 80057e2:	2200      	movs	r2, #0
 80057e4:	2300      	movs	r3, #0
 80057e6:	4620      	mov	r0, r4
 80057e8:	4629      	mov	r1, r5
 80057ea:	f7fb f995 	bl	8000b18 <__aeabi_dcmpeq>
 80057ee:	b108      	cbz	r0, 80057f4 <__cvt+0xa4>
 80057f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80057f4:	2230      	movs	r2, #48	; 0x30
 80057f6:	9b03      	ldr	r3, [sp, #12]
 80057f8:	454b      	cmp	r3, r9
 80057fa:	d307      	bcc.n	800580c <__cvt+0xbc>
 80057fc:	9b03      	ldr	r3, [sp, #12]
 80057fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005800:	1bdb      	subs	r3, r3, r7
 8005802:	4638      	mov	r0, r7
 8005804:	6013      	str	r3, [r2, #0]
 8005806:	b004      	add	sp, #16
 8005808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800580c:	1c59      	adds	r1, r3, #1
 800580e:	9103      	str	r1, [sp, #12]
 8005810:	701a      	strb	r2, [r3, #0]
 8005812:	e7f0      	b.n	80057f6 <__cvt+0xa6>

08005814 <__exponent>:
 8005814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005816:	4603      	mov	r3, r0
 8005818:	2900      	cmp	r1, #0
 800581a:	bfb8      	it	lt
 800581c:	4249      	neglt	r1, r1
 800581e:	f803 2b02 	strb.w	r2, [r3], #2
 8005822:	bfb4      	ite	lt
 8005824:	222d      	movlt	r2, #45	; 0x2d
 8005826:	222b      	movge	r2, #43	; 0x2b
 8005828:	2909      	cmp	r1, #9
 800582a:	7042      	strb	r2, [r0, #1]
 800582c:	dd2a      	ble.n	8005884 <__exponent+0x70>
 800582e:	f10d 0407 	add.w	r4, sp, #7
 8005832:	46a4      	mov	ip, r4
 8005834:	270a      	movs	r7, #10
 8005836:	46a6      	mov	lr, r4
 8005838:	460a      	mov	r2, r1
 800583a:	fb91 f6f7 	sdiv	r6, r1, r7
 800583e:	fb07 1516 	mls	r5, r7, r6, r1
 8005842:	3530      	adds	r5, #48	; 0x30
 8005844:	2a63      	cmp	r2, #99	; 0x63
 8005846:	f104 34ff 	add.w	r4, r4, #4294967295
 800584a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800584e:	4631      	mov	r1, r6
 8005850:	dcf1      	bgt.n	8005836 <__exponent+0x22>
 8005852:	3130      	adds	r1, #48	; 0x30
 8005854:	f1ae 0502 	sub.w	r5, lr, #2
 8005858:	f804 1c01 	strb.w	r1, [r4, #-1]
 800585c:	1c44      	adds	r4, r0, #1
 800585e:	4629      	mov	r1, r5
 8005860:	4561      	cmp	r1, ip
 8005862:	d30a      	bcc.n	800587a <__exponent+0x66>
 8005864:	f10d 0209 	add.w	r2, sp, #9
 8005868:	eba2 020e 	sub.w	r2, r2, lr
 800586c:	4565      	cmp	r5, ip
 800586e:	bf88      	it	hi
 8005870:	2200      	movhi	r2, #0
 8005872:	4413      	add	r3, r2
 8005874:	1a18      	subs	r0, r3, r0
 8005876:	b003      	add	sp, #12
 8005878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800587a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800587e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005882:	e7ed      	b.n	8005860 <__exponent+0x4c>
 8005884:	2330      	movs	r3, #48	; 0x30
 8005886:	3130      	adds	r1, #48	; 0x30
 8005888:	7083      	strb	r3, [r0, #2]
 800588a:	70c1      	strb	r1, [r0, #3]
 800588c:	1d03      	adds	r3, r0, #4
 800588e:	e7f1      	b.n	8005874 <__exponent+0x60>

08005890 <_printf_float>:
 8005890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005894:	ed2d 8b02 	vpush	{d8}
 8005898:	b08d      	sub	sp, #52	; 0x34
 800589a:	460c      	mov	r4, r1
 800589c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80058a0:	4616      	mov	r6, r2
 80058a2:	461f      	mov	r7, r3
 80058a4:	4605      	mov	r5, r0
 80058a6:	f001 fcd5 	bl	8007254 <_localeconv_r>
 80058aa:	f8d0 a000 	ldr.w	sl, [r0]
 80058ae:	4650      	mov	r0, sl
 80058b0:	f7fa fcb6 	bl	8000220 <strlen>
 80058b4:	2300      	movs	r3, #0
 80058b6:	930a      	str	r3, [sp, #40]	; 0x28
 80058b8:	6823      	ldr	r3, [r4, #0]
 80058ba:	9305      	str	r3, [sp, #20]
 80058bc:	f8d8 3000 	ldr.w	r3, [r8]
 80058c0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80058c4:	3307      	adds	r3, #7
 80058c6:	f023 0307 	bic.w	r3, r3, #7
 80058ca:	f103 0208 	add.w	r2, r3, #8
 80058ce:	f8c8 2000 	str.w	r2, [r8]
 80058d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80058da:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80058de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80058e2:	9307      	str	r3, [sp, #28]
 80058e4:	f8cd 8018 	str.w	r8, [sp, #24]
 80058e8:	ee08 0a10 	vmov	s16, r0
 80058ec:	4b9f      	ldr	r3, [pc, #636]	; (8005b6c <_printf_float+0x2dc>)
 80058ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058f2:	f04f 32ff 	mov.w	r2, #4294967295
 80058f6:	f7fb f941 	bl	8000b7c <__aeabi_dcmpun>
 80058fa:	bb88      	cbnz	r0, 8005960 <_printf_float+0xd0>
 80058fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005900:	4b9a      	ldr	r3, [pc, #616]	; (8005b6c <_printf_float+0x2dc>)
 8005902:	f04f 32ff 	mov.w	r2, #4294967295
 8005906:	f7fb f91b 	bl	8000b40 <__aeabi_dcmple>
 800590a:	bb48      	cbnz	r0, 8005960 <_printf_float+0xd0>
 800590c:	2200      	movs	r2, #0
 800590e:	2300      	movs	r3, #0
 8005910:	4640      	mov	r0, r8
 8005912:	4649      	mov	r1, r9
 8005914:	f7fb f90a 	bl	8000b2c <__aeabi_dcmplt>
 8005918:	b110      	cbz	r0, 8005920 <_printf_float+0x90>
 800591a:	232d      	movs	r3, #45	; 0x2d
 800591c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005920:	4b93      	ldr	r3, [pc, #588]	; (8005b70 <_printf_float+0x2e0>)
 8005922:	4894      	ldr	r0, [pc, #592]	; (8005b74 <_printf_float+0x2e4>)
 8005924:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005928:	bf94      	ite	ls
 800592a:	4698      	movls	r8, r3
 800592c:	4680      	movhi	r8, r0
 800592e:	2303      	movs	r3, #3
 8005930:	6123      	str	r3, [r4, #16]
 8005932:	9b05      	ldr	r3, [sp, #20]
 8005934:	f023 0204 	bic.w	r2, r3, #4
 8005938:	6022      	str	r2, [r4, #0]
 800593a:	f04f 0900 	mov.w	r9, #0
 800593e:	9700      	str	r7, [sp, #0]
 8005940:	4633      	mov	r3, r6
 8005942:	aa0b      	add	r2, sp, #44	; 0x2c
 8005944:	4621      	mov	r1, r4
 8005946:	4628      	mov	r0, r5
 8005948:	f000 f9d8 	bl	8005cfc <_printf_common>
 800594c:	3001      	adds	r0, #1
 800594e:	f040 8090 	bne.w	8005a72 <_printf_float+0x1e2>
 8005952:	f04f 30ff 	mov.w	r0, #4294967295
 8005956:	b00d      	add	sp, #52	; 0x34
 8005958:	ecbd 8b02 	vpop	{d8}
 800595c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005960:	4642      	mov	r2, r8
 8005962:	464b      	mov	r3, r9
 8005964:	4640      	mov	r0, r8
 8005966:	4649      	mov	r1, r9
 8005968:	f7fb f908 	bl	8000b7c <__aeabi_dcmpun>
 800596c:	b140      	cbz	r0, 8005980 <_printf_float+0xf0>
 800596e:	464b      	mov	r3, r9
 8005970:	2b00      	cmp	r3, #0
 8005972:	bfbc      	itt	lt
 8005974:	232d      	movlt	r3, #45	; 0x2d
 8005976:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800597a:	487f      	ldr	r0, [pc, #508]	; (8005b78 <_printf_float+0x2e8>)
 800597c:	4b7f      	ldr	r3, [pc, #508]	; (8005b7c <_printf_float+0x2ec>)
 800597e:	e7d1      	b.n	8005924 <_printf_float+0x94>
 8005980:	6863      	ldr	r3, [r4, #4]
 8005982:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005986:	9206      	str	r2, [sp, #24]
 8005988:	1c5a      	adds	r2, r3, #1
 800598a:	d13f      	bne.n	8005a0c <_printf_float+0x17c>
 800598c:	2306      	movs	r3, #6
 800598e:	6063      	str	r3, [r4, #4]
 8005990:	9b05      	ldr	r3, [sp, #20]
 8005992:	6861      	ldr	r1, [r4, #4]
 8005994:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005998:	2300      	movs	r3, #0
 800599a:	9303      	str	r3, [sp, #12]
 800599c:	ab0a      	add	r3, sp, #40	; 0x28
 800599e:	e9cd b301 	strd	fp, r3, [sp, #4]
 80059a2:	ab09      	add	r3, sp, #36	; 0x24
 80059a4:	ec49 8b10 	vmov	d0, r8, r9
 80059a8:	9300      	str	r3, [sp, #0]
 80059aa:	6022      	str	r2, [r4, #0]
 80059ac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80059b0:	4628      	mov	r0, r5
 80059b2:	f7ff fecd 	bl	8005750 <__cvt>
 80059b6:	9b06      	ldr	r3, [sp, #24]
 80059b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80059ba:	2b47      	cmp	r3, #71	; 0x47
 80059bc:	4680      	mov	r8, r0
 80059be:	d108      	bne.n	80059d2 <_printf_float+0x142>
 80059c0:	1cc8      	adds	r0, r1, #3
 80059c2:	db02      	blt.n	80059ca <_printf_float+0x13a>
 80059c4:	6863      	ldr	r3, [r4, #4]
 80059c6:	4299      	cmp	r1, r3
 80059c8:	dd41      	ble.n	8005a4e <_printf_float+0x1be>
 80059ca:	f1ab 0b02 	sub.w	fp, fp, #2
 80059ce:	fa5f fb8b 	uxtb.w	fp, fp
 80059d2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80059d6:	d820      	bhi.n	8005a1a <_printf_float+0x18a>
 80059d8:	3901      	subs	r1, #1
 80059da:	465a      	mov	r2, fp
 80059dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80059e0:	9109      	str	r1, [sp, #36]	; 0x24
 80059e2:	f7ff ff17 	bl	8005814 <__exponent>
 80059e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059e8:	1813      	adds	r3, r2, r0
 80059ea:	2a01      	cmp	r2, #1
 80059ec:	4681      	mov	r9, r0
 80059ee:	6123      	str	r3, [r4, #16]
 80059f0:	dc02      	bgt.n	80059f8 <_printf_float+0x168>
 80059f2:	6822      	ldr	r2, [r4, #0]
 80059f4:	07d2      	lsls	r2, r2, #31
 80059f6:	d501      	bpl.n	80059fc <_printf_float+0x16c>
 80059f8:	3301      	adds	r3, #1
 80059fa:	6123      	str	r3, [r4, #16]
 80059fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d09c      	beq.n	800593e <_printf_float+0xae>
 8005a04:	232d      	movs	r3, #45	; 0x2d
 8005a06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a0a:	e798      	b.n	800593e <_printf_float+0xae>
 8005a0c:	9a06      	ldr	r2, [sp, #24]
 8005a0e:	2a47      	cmp	r2, #71	; 0x47
 8005a10:	d1be      	bne.n	8005990 <_printf_float+0x100>
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1bc      	bne.n	8005990 <_printf_float+0x100>
 8005a16:	2301      	movs	r3, #1
 8005a18:	e7b9      	b.n	800598e <_printf_float+0xfe>
 8005a1a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005a1e:	d118      	bne.n	8005a52 <_printf_float+0x1c2>
 8005a20:	2900      	cmp	r1, #0
 8005a22:	6863      	ldr	r3, [r4, #4]
 8005a24:	dd0b      	ble.n	8005a3e <_printf_float+0x1ae>
 8005a26:	6121      	str	r1, [r4, #16]
 8005a28:	b913      	cbnz	r3, 8005a30 <_printf_float+0x1a0>
 8005a2a:	6822      	ldr	r2, [r4, #0]
 8005a2c:	07d0      	lsls	r0, r2, #31
 8005a2e:	d502      	bpl.n	8005a36 <_printf_float+0x1a6>
 8005a30:	3301      	adds	r3, #1
 8005a32:	440b      	add	r3, r1
 8005a34:	6123      	str	r3, [r4, #16]
 8005a36:	65a1      	str	r1, [r4, #88]	; 0x58
 8005a38:	f04f 0900 	mov.w	r9, #0
 8005a3c:	e7de      	b.n	80059fc <_printf_float+0x16c>
 8005a3e:	b913      	cbnz	r3, 8005a46 <_printf_float+0x1b6>
 8005a40:	6822      	ldr	r2, [r4, #0]
 8005a42:	07d2      	lsls	r2, r2, #31
 8005a44:	d501      	bpl.n	8005a4a <_printf_float+0x1ba>
 8005a46:	3302      	adds	r3, #2
 8005a48:	e7f4      	b.n	8005a34 <_printf_float+0x1a4>
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e7f2      	b.n	8005a34 <_printf_float+0x1a4>
 8005a4e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005a52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a54:	4299      	cmp	r1, r3
 8005a56:	db05      	blt.n	8005a64 <_printf_float+0x1d4>
 8005a58:	6823      	ldr	r3, [r4, #0]
 8005a5a:	6121      	str	r1, [r4, #16]
 8005a5c:	07d8      	lsls	r0, r3, #31
 8005a5e:	d5ea      	bpl.n	8005a36 <_printf_float+0x1a6>
 8005a60:	1c4b      	adds	r3, r1, #1
 8005a62:	e7e7      	b.n	8005a34 <_printf_float+0x1a4>
 8005a64:	2900      	cmp	r1, #0
 8005a66:	bfd4      	ite	le
 8005a68:	f1c1 0202 	rsble	r2, r1, #2
 8005a6c:	2201      	movgt	r2, #1
 8005a6e:	4413      	add	r3, r2
 8005a70:	e7e0      	b.n	8005a34 <_printf_float+0x1a4>
 8005a72:	6823      	ldr	r3, [r4, #0]
 8005a74:	055a      	lsls	r2, r3, #21
 8005a76:	d407      	bmi.n	8005a88 <_printf_float+0x1f8>
 8005a78:	6923      	ldr	r3, [r4, #16]
 8005a7a:	4642      	mov	r2, r8
 8005a7c:	4631      	mov	r1, r6
 8005a7e:	4628      	mov	r0, r5
 8005a80:	47b8      	blx	r7
 8005a82:	3001      	adds	r0, #1
 8005a84:	d12c      	bne.n	8005ae0 <_printf_float+0x250>
 8005a86:	e764      	b.n	8005952 <_printf_float+0xc2>
 8005a88:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005a8c:	f240 80e0 	bls.w	8005c50 <_printf_float+0x3c0>
 8005a90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a94:	2200      	movs	r2, #0
 8005a96:	2300      	movs	r3, #0
 8005a98:	f7fb f83e 	bl	8000b18 <__aeabi_dcmpeq>
 8005a9c:	2800      	cmp	r0, #0
 8005a9e:	d034      	beq.n	8005b0a <_printf_float+0x27a>
 8005aa0:	4a37      	ldr	r2, [pc, #220]	; (8005b80 <_printf_float+0x2f0>)
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	4631      	mov	r1, r6
 8005aa6:	4628      	mov	r0, r5
 8005aa8:	47b8      	blx	r7
 8005aaa:	3001      	adds	r0, #1
 8005aac:	f43f af51 	beq.w	8005952 <_printf_float+0xc2>
 8005ab0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	db02      	blt.n	8005abe <_printf_float+0x22e>
 8005ab8:	6823      	ldr	r3, [r4, #0]
 8005aba:	07d8      	lsls	r0, r3, #31
 8005abc:	d510      	bpl.n	8005ae0 <_printf_float+0x250>
 8005abe:	ee18 3a10 	vmov	r3, s16
 8005ac2:	4652      	mov	r2, sl
 8005ac4:	4631      	mov	r1, r6
 8005ac6:	4628      	mov	r0, r5
 8005ac8:	47b8      	blx	r7
 8005aca:	3001      	adds	r0, #1
 8005acc:	f43f af41 	beq.w	8005952 <_printf_float+0xc2>
 8005ad0:	f04f 0800 	mov.w	r8, #0
 8005ad4:	f104 091a 	add.w	r9, r4, #26
 8005ad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ada:	3b01      	subs	r3, #1
 8005adc:	4543      	cmp	r3, r8
 8005ade:	dc09      	bgt.n	8005af4 <_printf_float+0x264>
 8005ae0:	6823      	ldr	r3, [r4, #0]
 8005ae2:	079b      	lsls	r3, r3, #30
 8005ae4:	f100 8105 	bmi.w	8005cf2 <_printf_float+0x462>
 8005ae8:	68e0      	ldr	r0, [r4, #12]
 8005aea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005aec:	4298      	cmp	r0, r3
 8005aee:	bfb8      	it	lt
 8005af0:	4618      	movlt	r0, r3
 8005af2:	e730      	b.n	8005956 <_printf_float+0xc6>
 8005af4:	2301      	movs	r3, #1
 8005af6:	464a      	mov	r2, r9
 8005af8:	4631      	mov	r1, r6
 8005afa:	4628      	mov	r0, r5
 8005afc:	47b8      	blx	r7
 8005afe:	3001      	adds	r0, #1
 8005b00:	f43f af27 	beq.w	8005952 <_printf_float+0xc2>
 8005b04:	f108 0801 	add.w	r8, r8, #1
 8005b08:	e7e6      	b.n	8005ad8 <_printf_float+0x248>
 8005b0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	dc39      	bgt.n	8005b84 <_printf_float+0x2f4>
 8005b10:	4a1b      	ldr	r2, [pc, #108]	; (8005b80 <_printf_float+0x2f0>)
 8005b12:	2301      	movs	r3, #1
 8005b14:	4631      	mov	r1, r6
 8005b16:	4628      	mov	r0, r5
 8005b18:	47b8      	blx	r7
 8005b1a:	3001      	adds	r0, #1
 8005b1c:	f43f af19 	beq.w	8005952 <_printf_float+0xc2>
 8005b20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b24:	4313      	orrs	r3, r2
 8005b26:	d102      	bne.n	8005b2e <_printf_float+0x29e>
 8005b28:	6823      	ldr	r3, [r4, #0]
 8005b2a:	07d9      	lsls	r1, r3, #31
 8005b2c:	d5d8      	bpl.n	8005ae0 <_printf_float+0x250>
 8005b2e:	ee18 3a10 	vmov	r3, s16
 8005b32:	4652      	mov	r2, sl
 8005b34:	4631      	mov	r1, r6
 8005b36:	4628      	mov	r0, r5
 8005b38:	47b8      	blx	r7
 8005b3a:	3001      	adds	r0, #1
 8005b3c:	f43f af09 	beq.w	8005952 <_printf_float+0xc2>
 8005b40:	f04f 0900 	mov.w	r9, #0
 8005b44:	f104 0a1a 	add.w	sl, r4, #26
 8005b48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b4a:	425b      	negs	r3, r3
 8005b4c:	454b      	cmp	r3, r9
 8005b4e:	dc01      	bgt.n	8005b54 <_printf_float+0x2c4>
 8005b50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b52:	e792      	b.n	8005a7a <_printf_float+0x1ea>
 8005b54:	2301      	movs	r3, #1
 8005b56:	4652      	mov	r2, sl
 8005b58:	4631      	mov	r1, r6
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	47b8      	blx	r7
 8005b5e:	3001      	adds	r0, #1
 8005b60:	f43f aef7 	beq.w	8005952 <_printf_float+0xc2>
 8005b64:	f109 0901 	add.w	r9, r9, #1
 8005b68:	e7ee      	b.n	8005b48 <_printf_float+0x2b8>
 8005b6a:	bf00      	nop
 8005b6c:	7fefffff 	.word	0x7fefffff
 8005b70:	080083ac 	.word	0x080083ac
 8005b74:	080083b0 	.word	0x080083b0
 8005b78:	080083b8 	.word	0x080083b8
 8005b7c:	080083b4 	.word	0x080083b4
 8005b80:	080083bc 	.word	0x080083bc
 8005b84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	bfa8      	it	ge
 8005b8c:	461a      	movge	r2, r3
 8005b8e:	2a00      	cmp	r2, #0
 8005b90:	4691      	mov	r9, r2
 8005b92:	dc37      	bgt.n	8005c04 <_printf_float+0x374>
 8005b94:	f04f 0b00 	mov.w	fp, #0
 8005b98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b9c:	f104 021a 	add.w	r2, r4, #26
 8005ba0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ba2:	9305      	str	r3, [sp, #20]
 8005ba4:	eba3 0309 	sub.w	r3, r3, r9
 8005ba8:	455b      	cmp	r3, fp
 8005baa:	dc33      	bgt.n	8005c14 <_printf_float+0x384>
 8005bac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	db3b      	blt.n	8005c2c <_printf_float+0x39c>
 8005bb4:	6823      	ldr	r3, [r4, #0]
 8005bb6:	07da      	lsls	r2, r3, #31
 8005bb8:	d438      	bmi.n	8005c2c <_printf_float+0x39c>
 8005bba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bbc:	9a05      	ldr	r2, [sp, #20]
 8005bbe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005bc0:	1a9a      	subs	r2, r3, r2
 8005bc2:	eba3 0901 	sub.w	r9, r3, r1
 8005bc6:	4591      	cmp	r9, r2
 8005bc8:	bfa8      	it	ge
 8005bca:	4691      	movge	r9, r2
 8005bcc:	f1b9 0f00 	cmp.w	r9, #0
 8005bd0:	dc35      	bgt.n	8005c3e <_printf_float+0x3ae>
 8005bd2:	f04f 0800 	mov.w	r8, #0
 8005bd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bda:	f104 0a1a 	add.w	sl, r4, #26
 8005bde:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005be2:	1a9b      	subs	r3, r3, r2
 8005be4:	eba3 0309 	sub.w	r3, r3, r9
 8005be8:	4543      	cmp	r3, r8
 8005bea:	f77f af79 	ble.w	8005ae0 <_printf_float+0x250>
 8005bee:	2301      	movs	r3, #1
 8005bf0:	4652      	mov	r2, sl
 8005bf2:	4631      	mov	r1, r6
 8005bf4:	4628      	mov	r0, r5
 8005bf6:	47b8      	blx	r7
 8005bf8:	3001      	adds	r0, #1
 8005bfa:	f43f aeaa 	beq.w	8005952 <_printf_float+0xc2>
 8005bfe:	f108 0801 	add.w	r8, r8, #1
 8005c02:	e7ec      	b.n	8005bde <_printf_float+0x34e>
 8005c04:	4613      	mov	r3, r2
 8005c06:	4631      	mov	r1, r6
 8005c08:	4642      	mov	r2, r8
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	47b8      	blx	r7
 8005c0e:	3001      	adds	r0, #1
 8005c10:	d1c0      	bne.n	8005b94 <_printf_float+0x304>
 8005c12:	e69e      	b.n	8005952 <_printf_float+0xc2>
 8005c14:	2301      	movs	r3, #1
 8005c16:	4631      	mov	r1, r6
 8005c18:	4628      	mov	r0, r5
 8005c1a:	9205      	str	r2, [sp, #20]
 8005c1c:	47b8      	blx	r7
 8005c1e:	3001      	adds	r0, #1
 8005c20:	f43f ae97 	beq.w	8005952 <_printf_float+0xc2>
 8005c24:	9a05      	ldr	r2, [sp, #20]
 8005c26:	f10b 0b01 	add.w	fp, fp, #1
 8005c2a:	e7b9      	b.n	8005ba0 <_printf_float+0x310>
 8005c2c:	ee18 3a10 	vmov	r3, s16
 8005c30:	4652      	mov	r2, sl
 8005c32:	4631      	mov	r1, r6
 8005c34:	4628      	mov	r0, r5
 8005c36:	47b8      	blx	r7
 8005c38:	3001      	adds	r0, #1
 8005c3a:	d1be      	bne.n	8005bba <_printf_float+0x32a>
 8005c3c:	e689      	b.n	8005952 <_printf_float+0xc2>
 8005c3e:	9a05      	ldr	r2, [sp, #20]
 8005c40:	464b      	mov	r3, r9
 8005c42:	4442      	add	r2, r8
 8005c44:	4631      	mov	r1, r6
 8005c46:	4628      	mov	r0, r5
 8005c48:	47b8      	blx	r7
 8005c4a:	3001      	adds	r0, #1
 8005c4c:	d1c1      	bne.n	8005bd2 <_printf_float+0x342>
 8005c4e:	e680      	b.n	8005952 <_printf_float+0xc2>
 8005c50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c52:	2a01      	cmp	r2, #1
 8005c54:	dc01      	bgt.n	8005c5a <_printf_float+0x3ca>
 8005c56:	07db      	lsls	r3, r3, #31
 8005c58:	d538      	bpl.n	8005ccc <_printf_float+0x43c>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	4642      	mov	r2, r8
 8005c5e:	4631      	mov	r1, r6
 8005c60:	4628      	mov	r0, r5
 8005c62:	47b8      	blx	r7
 8005c64:	3001      	adds	r0, #1
 8005c66:	f43f ae74 	beq.w	8005952 <_printf_float+0xc2>
 8005c6a:	ee18 3a10 	vmov	r3, s16
 8005c6e:	4652      	mov	r2, sl
 8005c70:	4631      	mov	r1, r6
 8005c72:	4628      	mov	r0, r5
 8005c74:	47b8      	blx	r7
 8005c76:	3001      	adds	r0, #1
 8005c78:	f43f ae6b 	beq.w	8005952 <_printf_float+0xc2>
 8005c7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c80:	2200      	movs	r2, #0
 8005c82:	2300      	movs	r3, #0
 8005c84:	f7fa ff48 	bl	8000b18 <__aeabi_dcmpeq>
 8005c88:	b9d8      	cbnz	r0, 8005cc2 <_printf_float+0x432>
 8005c8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c8c:	f108 0201 	add.w	r2, r8, #1
 8005c90:	3b01      	subs	r3, #1
 8005c92:	4631      	mov	r1, r6
 8005c94:	4628      	mov	r0, r5
 8005c96:	47b8      	blx	r7
 8005c98:	3001      	adds	r0, #1
 8005c9a:	d10e      	bne.n	8005cba <_printf_float+0x42a>
 8005c9c:	e659      	b.n	8005952 <_printf_float+0xc2>
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	4652      	mov	r2, sl
 8005ca2:	4631      	mov	r1, r6
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	47b8      	blx	r7
 8005ca8:	3001      	adds	r0, #1
 8005caa:	f43f ae52 	beq.w	8005952 <_printf_float+0xc2>
 8005cae:	f108 0801 	add.w	r8, r8, #1
 8005cb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	4543      	cmp	r3, r8
 8005cb8:	dcf1      	bgt.n	8005c9e <_printf_float+0x40e>
 8005cba:	464b      	mov	r3, r9
 8005cbc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005cc0:	e6dc      	b.n	8005a7c <_printf_float+0x1ec>
 8005cc2:	f04f 0800 	mov.w	r8, #0
 8005cc6:	f104 0a1a 	add.w	sl, r4, #26
 8005cca:	e7f2      	b.n	8005cb2 <_printf_float+0x422>
 8005ccc:	2301      	movs	r3, #1
 8005cce:	4642      	mov	r2, r8
 8005cd0:	e7df      	b.n	8005c92 <_printf_float+0x402>
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	464a      	mov	r2, r9
 8005cd6:	4631      	mov	r1, r6
 8005cd8:	4628      	mov	r0, r5
 8005cda:	47b8      	blx	r7
 8005cdc:	3001      	adds	r0, #1
 8005cde:	f43f ae38 	beq.w	8005952 <_printf_float+0xc2>
 8005ce2:	f108 0801 	add.w	r8, r8, #1
 8005ce6:	68e3      	ldr	r3, [r4, #12]
 8005ce8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005cea:	1a5b      	subs	r3, r3, r1
 8005cec:	4543      	cmp	r3, r8
 8005cee:	dcf0      	bgt.n	8005cd2 <_printf_float+0x442>
 8005cf0:	e6fa      	b.n	8005ae8 <_printf_float+0x258>
 8005cf2:	f04f 0800 	mov.w	r8, #0
 8005cf6:	f104 0919 	add.w	r9, r4, #25
 8005cfa:	e7f4      	b.n	8005ce6 <_printf_float+0x456>

08005cfc <_printf_common>:
 8005cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d00:	4616      	mov	r6, r2
 8005d02:	4699      	mov	r9, r3
 8005d04:	688a      	ldr	r2, [r1, #8]
 8005d06:	690b      	ldr	r3, [r1, #16]
 8005d08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	bfb8      	it	lt
 8005d10:	4613      	movlt	r3, r2
 8005d12:	6033      	str	r3, [r6, #0]
 8005d14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d18:	4607      	mov	r7, r0
 8005d1a:	460c      	mov	r4, r1
 8005d1c:	b10a      	cbz	r2, 8005d22 <_printf_common+0x26>
 8005d1e:	3301      	adds	r3, #1
 8005d20:	6033      	str	r3, [r6, #0]
 8005d22:	6823      	ldr	r3, [r4, #0]
 8005d24:	0699      	lsls	r1, r3, #26
 8005d26:	bf42      	ittt	mi
 8005d28:	6833      	ldrmi	r3, [r6, #0]
 8005d2a:	3302      	addmi	r3, #2
 8005d2c:	6033      	strmi	r3, [r6, #0]
 8005d2e:	6825      	ldr	r5, [r4, #0]
 8005d30:	f015 0506 	ands.w	r5, r5, #6
 8005d34:	d106      	bne.n	8005d44 <_printf_common+0x48>
 8005d36:	f104 0a19 	add.w	sl, r4, #25
 8005d3a:	68e3      	ldr	r3, [r4, #12]
 8005d3c:	6832      	ldr	r2, [r6, #0]
 8005d3e:	1a9b      	subs	r3, r3, r2
 8005d40:	42ab      	cmp	r3, r5
 8005d42:	dc26      	bgt.n	8005d92 <_printf_common+0x96>
 8005d44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d48:	1e13      	subs	r3, r2, #0
 8005d4a:	6822      	ldr	r2, [r4, #0]
 8005d4c:	bf18      	it	ne
 8005d4e:	2301      	movne	r3, #1
 8005d50:	0692      	lsls	r2, r2, #26
 8005d52:	d42b      	bmi.n	8005dac <_printf_common+0xb0>
 8005d54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d58:	4649      	mov	r1, r9
 8005d5a:	4638      	mov	r0, r7
 8005d5c:	47c0      	blx	r8
 8005d5e:	3001      	adds	r0, #1
 8005d60:	d01e      	beq.n	8005da0 <_printf_common+0xa4>
 8005d62:	6823      	ldr	r3, [r4, #0]
 8005d64:	68e5      	ldr	r5, [r4, #12]
 8005d66:	6832      	ldr	r2, [r6, #0]
 8005d68:	f003 0306 	and.w	r3, r3, #6
 8005d6c:	2b04      	cmp	r3, #4
 8005d6e:	bf08      	it	eq
 8005d70:	1aad      	subeq	r5, r5, r2
 8005d72:	68a3      	ldr	r3, [r4, #8]
 8005d74:	6922      	ldr	r2, [r4, #16]
 8005d76:	bf0c      	ite	eq
 8005d78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d7c:	2500      	movne	r5, #0
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	bfc4      	itt	gt
 8005d82:	1a9b      	subgt	r3, r3, r2
 8005d84:	18ed      	addgt	r5, r5, r3
 8005d86:	2600      	movs	r6, #0
 8005d88:	341a      	adds	r4, #26
 8005d8a:	42b5      	cmp	r5, r6
 8005d8c:	d11a      	bne.n	8005dc4 <_printf_common+0xc8>
 8005d8e:	2000      	movs	r0, #0
 8005d90:	e008      	b.n	8005da4 <_printf_common+0xa8>
 8005d92:	2301      	movs	r3, #1
 8005d94:	4652      	mov	r2, sl
 8005d96:	4649      	mov	r1, r9
 8005d98:	4638      	mov	r0, r7
 8005d9a:	47c0      	blx	r8
 8005d9c:	3001      	adds	r0, #1
 8005d9e:	d103      	bne.n	8005da8 <_printf_common+0xac>
 8005da0:	f04f 30ff 	mov.w	r0, #4294967295
 8005da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005da8:	3501      	adds	r5, #1
 8005daa:	e7c6      	b.n	8005d3a <_printf_common+0x3e>
 8005dac:	18e1      	adds	r1, r4, r3
 8005dae:	1c5a      	adds	r2, r3, #1
 8005db0:	2030      	movs	r0, #48	; 0x30
 8005db2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005db6:	4422      	add	r2, r4
 8005db8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005dbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005dc0:	3302      	adds	r3, #2
 8005dc2:	e7c7      	b.n	8005d54 <_printf_common+0x58>
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	4622      	mov	r2, r4
 8005dc8:	4649      	mov	r1, r9
 8005dca:	4638      	mov	r0, r7
 8005dcc:	47c0      	blx	r8
 8005dce:	3001      	adds	r0, #1
 8005dd0:	d0e6      	beq.n	8005da0 <_printf_common+0xa4>
 8005dd2:	3601      	adds	r6, #1
 8005dd4:	e7d9      	b.n	8005d8a <_printf_common+0x8e>
	...

08005dd8 <_printf_i>:
 8005dd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ddc:	7e0f      	ldrb	r7, [r1, #24]
 8005dde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005de0:	2f78      	cmp	r7, #120	; 0x78
 8005de2:	4691      	mov	r9, r2
 8005de4:	4680      	mov	r8, r0
 8005de6:	460c      	mov	r4, r1
 8005de8:	469a      	mov	sl, r3
 8005dea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005dee:	d807      	bhi.n	8005e00 <_printf_i+0x28>
 8005df0:	2f62      	cmp	r7, #98	; 0x62
 8005df2:	d80a      	bhi.n	8005e0a <_printf_i+0x32>
 8005df4:	2f00      	cmp	r7, #0
 8005df6:	f000 80d8 	beq.w	8005faa <_printf_i+0x1d2>
 8005dfa:	2f58      	cmp	r7, #88	; 0x58
 8005dfc:	f000 80a3 	beq.w	8005f46 <_printf_i+0x16e>
 8005e00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e08:	e03a      	b.n	8005e80 <_printf_i+0xa8>
 8005e0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e0e:	2b15      	cmp	r3, #21
 8005e10:	d8f6      	bhi.n	8005e00 <_printf_i+0x28>
 8005e12:	a101      	add	r1, pc, #4	; (adr r1, 8005e18 <_printf_i+0x40>)
 8005e14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e18:	08005e71 	.word	0x08005e71
 8005e1c:	08005e85 	.word	0x08005e85
 8005e20:	08005e01 	.word	0x08005e01
 8005e24:	08005e01 	.word	0x08005e01
 8005e28:	08005e01 	.word	0x08005e01
 8005e2c:	08005e01 	.word	0x08005e01
 8005e30:	08005e85 	.word	0x08005e85
 8005e34:	08005e01 	.word	0x08005e01
 8005e38:	08005e01 	.word	0x08005e01
 8005e3c:	08005e01 	.word	0x08005e01
 8005e40:	08005e01 	.word	0x08005e01
 8005e44:	08005f91 	.word	0x08005f91
 8005e48:	08005eb5 	.word	0x08005eb5
 8005e4c:	08005f73 	.word	0x08005f73
 8005e50:	08005e01 	.word	0x08005e01
 8005e54:	08005e01 	.word	0x08005e01
 8005e58:	08005fb3 	.word	0x08005fb3
 8005e5c:	08005e01 	.word	0x08005e01
 8005e60:	08005eb5 	.word	0x08005eb5
 8005e64:	08005e01 	.word	0x08005e01
 8005e68:	08005e01 	.word	0x08005e01
 8005e6c:	08005f7b 	.word	0x08005f7b
 8005e70:	682b      	ldr	r3, [r5, #0]
 8005e72:	1d1a      	adds	r2, r3, #4
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	602a      	str	r2, [r5, #0]
 8005e78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e80:	2301      	movs	r3, #1
 8005e82:	e0a3      	b.n	8005fcc <_printf_i+0x1f4>
 8005e84:	6820      	ldr	r0, [r4, #0]
 8005e86:	6829      	ldr	r1, [r5, #0]
 8005e88:	0606      	lsls	r6, r0, #24
 8005e8a:	f101 0304 	add.w	r3, r1, #4
 8005e8e:	d50a      	bpl.n	8005ea6 <_printf_i+0xce>
 8005e90:	680e      	ldr	r6, [r1, #0]
 8005e92:	602b      	str	r3, [r5, #0]
 8005e94:	2e00      	cmp	r6, #0
 8005e96:	da03      	bge.n	8005ea0 <_printf_i+0xc8>
 8005e98:	232d      	movs	r3, #45	; 0x2d
 8005e9a:	4276      	negs	r6, r6
 8005e9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ea0:	485e      	ldr	r0, [pc, #376]	; (800601c <_printf_i+0x244>)
 8005ea2:	230a      	movs	r3, #10
 8005ea4:	e019      	b.n	8005eda <_printf_i+0x102>
 8005ea6:	680e      	ldr	r6, [r1, #0]
 8005ea8:	602b      	str	r3, [r5, #0]
 8005eaa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005eae:	bf18      	it	ne
 8005eb0:	b236      	sxthne	r6, r6
 8005eb2:	e7ef      	b.n	8005e94 <_printf_i+0xbc>
 8005eb4:	682b      	ldr	r3, [r5, #0]
 8005eb6:	6820      	ldr	r0, [r4, #0]
 8005eb8:	1d19      	adds	r1, r3, #4
 8005eba:	6029      	str	r1, [r5, #0]
 8005ebc:	0601      	lsls	r1, r0, #24
 8005ebe:	d501      	bpl.n	8005ec4 <_printf_i+0xec>
 8005ec0:	681e      	ldr	r6, [r3, #0]
 8005ec2:	e002      	b.n	8005eca <_printf_i+0xf2>
 8005ec4:	0646      	lsls	r6, r0, #25
 8005ec6:	d5fb      	bpl.n	8005ec0 <_printf_i+0xe8>
 8005ec8:	881e      	ldrh	r6, [r3, #0]
 8005eca:	4854      	ldr	r0, [pc, #336]	; (800601c <_printf_i+0x244>)
 8005ecc:	2f6f      	cmp	r7, #111	; 0x6f
 8005ece:	bf0c      	ite	eq
 8005ed0:	2308      	moveq	r3, #8
 8005ed2:	230a      	movne	r3, #10
 8005ed4:	2100      	movs	r1, #0
 8005ed6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005eda:	6865      	ldr	r5, [r4, #4]
 8005edc:	60a5      	str	r5, [r4, #8]
 8005ede:	2d00      	cmp	r5, #0
 8005ee0:	bfa2      	ittt	ge
 8005ee2:	6821      	ldrge	r1, [r4, #0]
 8005ee4:	f021 0104 	bicge.w	r1, r1, #4
 8005ee8:	6021      	strge	r1, [r4, #0]
 8005eea:	b90e      	cbnz	r6, 8005ef0 <_printf_i+0x118>
 8005eec:	2d00      	cmp	r5, #0
 8005eee:	d04d      	beq.n	8005f8c <_printf_i+0x1b4>
 8005ef0:	4615      	mov	r5, r2
 8005ef2:	fbb6 f1f3 	udiv	r1, r6, r3
 8005ef6:	fb03 6711 	mls	r7, r3, r1, r6
 8005efa:	5dc7      	ldrb	r7, [r0, r7]
 8005efc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f00:	4637      	mov	r7, r6
 8005f02:	42bb      	cmp	r3, r7
 8005f04:	460e      	mov	r6, r1
 8005f06:	d9f4      	bls.n	8005ef2 <_printf_i+0x11a>
 8005f08:	2b08      	cmp	r3, #8
 8005f0a:	d10b      	bne.n	8005f24 <_printf_i+0x14c>
 8005f0c:	6823      	ldr	r3, [r4, #0]
 8005f0e:	07de      	lsls	r6, r3, #31
 8005f10:	d508      	bpl.n	8005f24 <_printf_i+0x14c>
 8005f12:	6923      	ldr	r3, [r4, #16]
 8005f14:	6861      	ldr	r1, [r4, #4]
 8005f16:	4299      	cmp	r1, r3
 8005f18:	bfde      	ittt	le
 8005f1a:	2330      	movle	r3, #48	; 0x30
 8005f1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f20:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f24:	1b52      	subs	r2, r2, r5
 8005f26:	6122      	str	r2, [r4, #16]
 8005f28:	f8cd a000 	str.w	sl, [sp]
 8005f2c:	464b      	mov	r3, r9
 8005f2e:	aa03      	add	r2, sp, #12
 8005f30:	4621      	mov	r1, r4
 8005f32:	4640      	mov	r0, r8
 8005f34:	f7ff fee2 	bl	8005cfc <_printf_common>
 8005f38:	3001      	adds	r0, #1
 8005f3a:	d14c      	bne.n	8005fd6 <_printf_i+0x1fe>
 8005f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f40:	b004      	add	sp, #16
 8005f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f46:	4835      	ldr	r0, [pc, #212]	; (800601c <_printf_i+0x244>)
 8005f48:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005f4c:	6829      	ldr	r1, [r5, #0]
 8005f4e:	6823      	ldr	r3, [r4, #0]
 8005f50:	f851 6b04 	ldr.w	r6, [r1], #4
 8005f54:	6029      	str	r1, [r5, #0]
 8005f56:	061d      	lsls	r5, r3, #24
 8005f58:	d514      	bpl.n	8005f84 <_printf_i+0x1ac>
 8005f5a:	07df      	lsls	r7, r3, #31
 8005f5c:	bf44      	itt	mi
 8005f5e:	f043 0320 	orrmi.w	r3, r3, #32
 8005f62:	6023      	strmi	r3, [r4, #0]
 8005f64:	b91e      	cbnz	r6, 8005f6e <_printf_i+0x196>
 8005f66:	6823      	ldr	r3, [r4, #0]
 8005f68:	f023 0320 	bic.w	r3, r3, #32
 8005f6c:	6023      	str	r3, [r4, #0]
 8005f6e:	2310      	movs	r3, #16
 8005f70:	e7b0      	b.n	8005ed4 <_printf_i+0xfc>
 8005f72:	6823      	ldr	r3, [r4, #0]
 8005f74:	f043 0320 	orr.w	r3, r3, #32
 8005f78:	6023      	str	r3, [r4, #0]
 8005f7a:	2378      	movs	r3, #120	; 0x78
 8005f7c:	4828      	ldr	r0, [pc, #160]	; (8006020 <_printf_i+0x248>)
 8005f7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f82:	e7e3      	b.n	8005f4c <_printf_i+0x174>
 8005f84:	0659      	lsls	r1, r3, #25
 8005f86:	bf48      	it	mi
 8005f88:	b2b6      	uxthmi	r6, r6
 8005f8a:	e7e6      	b.n	8005f5a <_printf_i+0x182>
 8005f8c:	4615      	mov	r5, r2
 8005f8e:	e7bb      	b.n	8005f08 <_printf_i+0x130>
 8005f90:	682b      	ldr	r3, [r5, #0]
 8005f92:	6826      	ldr	r6, [r4, #0]
 8005f94:	6961      	ldr	r1, [r4, #20]
 8005f96:	1d18      	adds	r0, r3, #4
 8005f98:	6028      	str	r0, [r5, #0]
 8005f9a:	0635      	lsls	r5, r6, #24
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	d501      	bpl.n	8005fa4 <_printf_i+0x1cc>
 8005fa0:	6019      	str	r1, [r3, #0]
 8005fa2:	e002      	b.n	8005faa <_printf_i+0x1d2>
 8005fa4:	0670      	lsls	r0, r6, #25
 8005fa6:	d5fb      	bpl.n	8005fa0 <_printf_i+0x1c8>
 8005fa8:	8019      	strh	r1, [r3, #0]
 8005faa:	2300      	movs	r3, #0
 8005fac:	6123      	str	r3, [r4, #16]
 8005fae:	4615      	mov	r5, r2
 8005fb0:	e7ba      	b.n	8005f28 <_printf_i+0x150>
 8005fb2:	682b      	ldr	r3, [r5, #0]
 8005fb4:	1d1a      	adds	r2, r3, #4
 8005fb6:	602a      	str	r2, [r5, #0]
 8005fb8:	681d      	ldr	r5, [r3, #0]
 8005fba:	6862      	ldr	r2, [r4, #4]
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	4628      	mov	r0, r5
 8005fc0:	f7fa f936 	bl	8000230 <memchr>
 8005fc4:	b108      	cbz	r0, 8005fca <_printf_i+0x1f2>
 8005fc6:	1b40      	subs	r0, r0, r5
 8005fc8:	6060      	str	r0, [r4, #4]
 8005fca:	6863      	ldr	r3, [r4, #4]
 8005fcc:	6123      	str	r3, [r4, #16]
 8005fce:	2300      	movs	r3, #0
 8005fd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fd4:	e7a8      	b.n	8005f28 <_printf_i+0x150>
 8005fd6:	6923      	ldr	r3, [r4, #16]
 8005fd8:	462a      	mov	r2, r5
 8005fda:	4649      	mov	r1, r9
 8005fdc:	4640      	mov	r0, r8
 8005fde:	47d0      	blx	sl
 8005fe0:	3001      	adds	r0, #1
 8005fe2:	d0ab      	beq.n	8005f3c <_printf_i+0x164>
 8005fe4:	6823      	ldr	r3, [r4, #0]
 8005fe6:	079b      	lsls	r3, r3, #30
 8005fe8:	d413      	bmi.n	8006012 <_printf_i+0x23a>
 8005fea:	68e0      	ldr	r0, [r4, #12]
 8005fec:	9b03      	ldr	r3, [sp, #12]
 8005fee:	4298      	cmp	r0, r3
 8005ff0:	bfb8      	it	lt
 8005ff2:	4618      	movlt	r0, r3
 8005ff4:	e7a4      	b.n	8005f40 <_printf_i+0x168>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	4632      	mov	r2, r6
 8005ffa:	4649      	mov	r1, r9
 8005ffc:	4640      	mov	r0, r8
 8005ffe:	47d0      	blx	sl
 8006000:	3001      	adds	r0, #1
 8006002:	d09b      	beq.n	8005f3c <_printf_i+0x164>
 8006004:	3501      	adds	r5, #1
 8006006:	68e3      	ldr	r3, [r4, #12]
 8006008:	9903      	ldr	r1, [sp, #12]
 800600a:	1a5b      	subs	r3, r3, r1
 800600c:	42ab      	cmp	r3, r5
 800600e:	dcf2      	bgt.n	8005ff6 <_printf_i+0x21e>
 8006010:	e7eb      	b.n	8005fea <_printf_i+0x212>
 8006012:	2500      	movs	r5, #0
 8006014:	f104 0619 	add.w	r6, r4, #25
 8006018:	e7f5      	b.n	8006006 <_printf_i+0x22e>
 800601a:	bf00      	nop
 800601c:	080083be 	.word	0x080083be
 8006020:	080083cf 	.word	0x080083cf

08006024 <iprintf>:
 8006024:	b40f      	push	{r0, r1, r2, r3}
 8006026:	4b0a      	ldr	r3, [pc, #40]	; (8006050 <iprintf+0x2c>)
 8006028:	b513      	push	{r0, r1, r4, lr}
 800602a:	681c      	ldr	r4, [r3, #0]
 800602c:	b124      	cbz	r4, 8006038 <iprintf+0x14>
 800602e:	69a3      	ldr	r3, [r4, #24]
 8006030:	b913      	cbnz	r3, 8006038 <iprintf+0x14>
 8006032:	4620      	mov	r0, r4
 8006034:	f001 f870 	bl	8007118 <__sinit>
 8006038:	ab05      	add	r3, sp, #20
 800603a:	9a04      	ldr	r2, [sp, #16]
 800603c:	68a1      	ldr	r1, [r4, #8]
 800603e:	9301      	str	r3, [sp, #4]
 8006040:	4620      	mov	r0, r4
 8006042:	f001 fe2d 	bl	8007ca0 <_vfiprintf_r>
 8006046:	b002      	add	sp, #8
 8006048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800604c:	b004      	add	sp, #16
 800604e:	4770      	bx	lr
 8006050:	2000001c 	.word	0x2000001c

08006054 <setbuf>:
 8006054:	2900      	cmp	r1, #0
 8006056:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800605a:	bf0c      	ite	eq
 800605c:	2202      	moveq	r2, #2
 800605e:	2200      	movne	r2, #0
 8006060:	f000 b800 	b.w	8006064 <setvbuf>

08006064 <setvbuf>:
 8006064:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006068:	461d      	mov	r5, r3
 800606a:	4b5d      	ldr	r3, [pc, #372]	; (80061e0 <setvbuf+0x17c>)
 800606c:	681f      	ldr	r7, [r3, #0]
 800606e:	4604      	mov	r4, r0
 8006070:	460e      	mov	r6, r1
 8006072:	4690      	mov	r8, r2
 8006074:	b127      	cbz	r7, 8006080 <setvbuf+0x1c>
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	b913      	cbnz	r3, 8006080 <setvbuf+0x1c>
 800607a:	4638      	mov	r0, r7
 800607c:	f001 f84c 	bl	8007118 <__sinit>
 8006080:	4b58      	ldr	r3, [pc, #352]	; (80061e4 <setvbuf+0x180>)
 8006082:	429c      	cmp	r4, r3
 8006084:	d167      	bne.n	8006156 <setvbuf+0xf2>
 8006086:	687c      	ldr	r4, [r7, #4]
 8006088:	f1b8 0f02 	cmp.w	r8, #2
 800608c:	d006      	beq.n	800609c <setvbuf+0x38>
 800608e:	f1b8 0f01 	cmp.w	r8, #1
 8006092:	f200 809f 	bhi.w	80061d4 <setvbuf+0x170>
 8006096:	2d00      	cmp	r5, #0
 8006098:	f2c0 809c 	blt.w	80061d4 <setvbuf+0x170>
 800609c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800609e:	07db      	lsls	r3, r3, #31
 80060a0:	d405      	bmi.n	80060ae <setvbuf+0x4a>
 80060a2:	89a3      	ldrh	r3, [r4, #12]
 80060a4:	0598      	lsls	r0, r3, #22
 80060a6:	d402      	bmi.n	80060ae <setvbuf+0x4a>
 80060a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060aa:	f001 f8d8 	bl	800725e <__retarget_lock_acquire_recursive>
 80060ae:	4621      	mov	r1, r4
 80060b0:	4638      	mov	r0, r7
 80060b2:	f000 ff9d 	bl	8006ff0 <_fflush_r>
 80060b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060b8:	b141      	cbz	r1, 80060cc <setvbuf+0x68>
 80060ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060be:	4299      	cmp	r1, r3
 80060c0:	d002      	beq.n	80060c8 <setvbuf+0x64>
 80060c2:	4638      	mov	r0, r7
 80060c4:	f001 fce2 	bl	8007a8c <_free_r>
 80060c8:	2300      	movs	r3, #0
 80060ca:	6363      	str	r3, [r4, #52]	; 0x34
 80060cc:	2300      	movs	r3, #0
 80060ce:	61a3      	str	r3, [r4, #24]
 80060d0:	6063      	str	r3, [r4, #4]
 80060d2:	89a3      	ldrh	r3, [r4, #12]
 80060d4:	0619      	lsls	r1, r3, #24
 80060d6:	d503      	bpl.n	80060e0 <setvbuf+0x7c>
 80060d8:	6921      	ldr	r1, [r4, #16]
 80060da:	4638      	mov	r0, r7
 80060dc:	f001 fcd6 	bl	8007a8c <_free_r>
 80060e0:	89a3      	ldrh	r3, [r4, #12]
 80060e2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80060e6:	f023 0303 	bic.w	r3, r3, #3
 80060ea:	f1b8 0f02 	cmp.w	r8, #2
 80060ee:	81a3      	strh	r3, [r4, #12]
 80060f0:	d06c      	beq.n	80061cc <setvbuf+0x168>
 80060f2:	ab01      	add	r3, sp, #4
 80060f4:	466a      	mov	r2, sp
 80060f6:	4621      	mov	r1, r4
 80060f8:	4638      	mov	r0, r7
 80060fa:	f001 f8b2 	bl	8007262 <__swhatbuf_r>
 80060fe:	89a3      	ldrh	r3, [r4, #12]
 8006100:	4318      	orrs	r0, r3
 8006102:	81a0      	strh	r0, [r4, #12]
 8006104:	2d00      	cmp	r5, #0
 8006106:	d130      	bne.n	800616a <setvbuf+0x106>
 8006108:	9d00      	ldr	r5, [sp, #0]
 800610a:	4628      	mov	r0, r5
 800610c:	f001 f90e 	bl	800732c <malloc>
 8006110:	4606      	mov	r6, r0
 8006112:	2800      	cmp	r0, #0
 8006114:	d155      	bne.n	80061c2 <setvbuf+0x15e>
 8006116:	f8dd 9000 	ldr.w	r9, [sp]
 800611a:	45a9      	cmp	r9, r5
 800611c:	d14a      	bne.n	80061b4 <setvbuf+0x150>
 800611e:	f04f 35ff 	mov.w	r5, #4294967295
 8006122:	2200      	movs	r2, #0
 8006124:	60a2      	str	r2, [r4, #8]
 8006126:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800612a:	6022      	str	r2, [r4, #0]
 800612c:	6122      	str	r2, [r4, #16]
 800612e:	2201      	movs	r2, #1
 8006130:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006134:	6162      	str	r2, [r4, #20]
 8006136:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006138:	f043 0302 	orr.w	r3, r3, #2
 800613c:	07d2      	lsls	r2, r2, #31
 800613e:	81a3      	strh	r3, [r4, #12]
 8006140:	d405      	bmi.n	800614e <setvbuf+0xea>
 8006142:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006146:	d102      	bne.n	800614e <setvbuf+0xea>
 8006148:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800614a:	f001 f889 	bl	8007260 <__retarget_lock_release_recursive>
 800614e:	4628      	mov	r0, r5
 8006150:	b003      	add	sp, #12
 8006152:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006156:	4b24      	ldr	r3, [pc, #144]	; (80061e8 <setvbuf+0x184>)
 8006158:	429c      	cmp	r4, r3
 800615a:	d101      	bne.n	8006160 <setvbuf+0xfc>
 800615c:	68bc      	ldr	r4, [r7, #8]
 800615e:	e793      	b.n	8006088 <setvbuf+0x24>
 8006160:	4b22      	ldr	r3, [pc, #136]	; (80061ec <setvbuf+0x188>)
 8006162:	429c      	cmp	r4, r3
 8006164:	bf08      	it	eq
 8006166:	68fc      	ldreq	r4, [r7, #12]
 8006168:	e78e      	b.n	8006088 <setvbuf+0x24>
 800616a:	2e00      	cmp	r6, #0
 800616c:	d0cd      	beq.n	800610a <setvbuf+0xa6>
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	b913      	cbnz	r3, 8006178 <setvbuf+0x114>
 8006172:	4638      	mov	r0, r7
 8006174:	f000 ffd0 	bl	8007118 <__sinit>
 8006178:	f1b8 0f01 	cmp.w	r8, #1
 800617c:	bf08      	it	eq
 800617e:	89a3      	ldrheq	r3, [r4, #12]
 8006180:	6026      	str	r6, [r4, #0]
 8006182:	bf04      	itt	eq
 8006184:	f043 0301 	orreq.w	r3, r3, #1
 8006188:	81a3      	strheq	r3, [r4, #12]
 800618a:	89a2      	ldrh	r2, [r4, #12]
 800618c:	f012 0308 	ands.w	r3, r2, #8
 8006190:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006194:	d01c      	beq.n	80061d0 <setvbuf+0x16c>
 8006196:	07d3      	lsls	r3, r2, #31
 8006198:	bf41      	itttt	mi
 800619a:	2300      	movmi	r3, #0
 800619c:	426d      	negmi	r5, r5
 800619e:	60a3      	strmi	r3, [r4, #8]
 80061a0:	61a5      	strmi	r5, [r4, #24]
 80061a2:	bf58      	it	pl
 80061a4:	60a5      	strpl	r5, [r4, #8]
 80061a6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80061a8:	f015 0501 	ands.w	r5, r5, #1
 80061ac:	d115      	bne.n	80061da <setvbuf+0x176>
 80061ae:	f412 7f00 	tst.w	r2, #512	; 0x200
 80061b2:	e7c8      	b.n	8006146 <setvbuf+0xe2>
 80061b4:	4648      	mov	r0, r9
 80061b6:	f001 f8b9 	bl	800732c <malloc>
 80061ba:	4606      	mov	r6, r0
 80061bc:	2800      	cmp	r0, #0
 80061be:	d0ae      	beq.n	800611e <setvbuf+0xba>
 80061c0:	464d      	mov	r5, r9
 80061c2:	89a3      	ldrh	r3, [r4, #12]
 80061c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061c8:	81a3      	strh	r3, [r4, #12]
 80061ca:	e7d0      	b.n	800616e <setvbuf+0x10a>
 80061cc:	2500      	movs	r5, #0
 80061ce:	e7a8      	b.n	8006122 <setvbuf+0xbe>
 80061d0:	60a3      	str	r3, [r4, #8]
 80061d2:	e7e8      	b.n	80061a6 <setvbuf+0x142>
 80061d4:	f04f 35ff 	mov.w	r5, #4294967295
 80061d8:	e7b9      	b.n	800614e <setvbuf+0xea>
 80061da:	2500      	movs	r5, #0
 80061dc:	e7b7      	b.n	800614e <setvbuf+0xea>
 80061de:	bf00      	nop
 80061e0:	2000001c 	.word	0x2000001c
 80061e4:	08008490 	.word	0x08008490
 80061e8:	080084b0 	.word	0x080084b0
 80061ec:	08008470 	.word	0x08008470

080061f0 <quorem>:
 80061f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061f4:	6903      	ldr	r3, [r0, #16]
 80061f6:	690c      	ldr	r4, [r1, #16]
 80061f8:	42a3      	cmp	r3, r4
 80061fa:	4607      	mov	r7, r0
 80061fc:	f2c0 8081 	blt.w	8006302 <quorem+0x112>
 8006200:	3c01      	subs	r4, #1
 8006202:	f101 0814 	add.w	r8, r1, #20
 8006206:	f100 0514 	add.w	r5, r0, #20
 800620a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800620e:	9301      	str	r3, [sp, #4]
 8006210:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006214:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006218:	3301      	adds	r3, #1
 800621a:	429a      	cmp	r2, r3
 800621c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006220:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006224:	fbb2 f6f3 	udiv	r6, r2, r3
 8006228:	d331      	bcc.n	800628e <quorem+0x9e>
 800622a:	f04f 0e00 	mov.w	lr, #0
 800622e:	4640      	mov	r0, r8
 8006230:	46ac      	mov	ip, r5
 8006232:	46f2      	mov	sl, lr
 8006234:	f850 2b04 	ldr.w	r2, [r0], #4
 8006238:	b293      	uxth	r3, r2
 800623a:	fb06 e303 	mla	r3, r6, r3, lr
 800623e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006242:	b29b      	uxth	r3, r3
 8006244:	ebaa 0303 	sub.w	r3, sl, r3
 8006248:	f8dc a000 	ldr.w	sl, [ip]
 800624c:	0c12      	lsrs	r2, r2, #16
 800624e:	fa13 f38a 	uxtah	r3, r3, sl
 8006252:	fb06 e202 	mla	r2, r6, r2, lr
 8006256:	9300      	str	r3, [sp, #0]
 8006258:	9b00      	ldr	r3, [sp, #0]
 800625a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800625e:	b292      	uxth	r2, r2
 8006260:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006264:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006268:	f8bd 3000 	ldrh.w	r3, [sp]
 800626c:	4581      	cmp	r9, r0
 800626e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006272:	f84c 3b04 	str.w	r3, [ip], #4
 8006276:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800627a:	d2db      	bcs.n	8006234 <quorem+0x44>
 800627c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006280:	b92b      	cbnz	r3, 800628e <quorem+0x9e>
 8006282:	9b01      	ldr	r3, [sp, #4]
 8006284:	3b04      	subs	r3, #4
 8006286:	429d      	cmp	r5, r3
 8006288:	461a      	mov	r2, r3
 800628a:	d32e      	bcc.n	80062ea <quorem+0xfa>
 800628c:	613c      	str	r4, [r7, #16]
 800628e:	4638      	mov	r0, r7
 8006290:	f001 fae4 	bl	800785c <__mcmp>
 8006294:	2800      	cmp	r0, #0
 8006296:	db24      	blt.n	80062e2 <quorem+0xf2>
 8006298:	3601      	adds	r6, #1
 800629a:	4628      	mov	r0, r5
 800629c:	f04f 0c00 	mov.w	ip, #0
 80062a0:	f858 2b04 	ldr.w	r2, [r8], #4
 80062a4:	f8d0 e000 	ldr.w	lr, [r0]
 80062a8:	b293      	uxth	r3, r2
 80062aa:	ebac 0303 	sub.w	r3, ip, r3
 80062ae:	0c12      	lsrs	r2, r2, #16
 80062b0:	fa13 f38e 	uxtah	r3, r3, lr
 80062b4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80062b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80062bc:	b29b      	uxth	r3, r3
 80062be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80062c2:	45c1      	cmp	r9, r8
 80062c4:	f840 3b04 	str.w	r3, [r0], #4
 80062c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80062cc:	d2e8      	bcs.n	80062a0 <quorem+0xb0>
 80062ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80062d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80062d6:	b922      	cbnz	r2, 80062e2 <quorem+0xf2>
 80062d8:	3b04      	subs	r3, #4
 80062da:	429d      	cmp	r5, r3
 80062dc:	461a      	mov	r2, r3
 80062de:	d30a      	bcc.n	80062f6 <quorem+0x106>
 80062e0:	613c      	str	r4, [r7, #16]
 80062e2:	4630      	mov	r0, r6
 80062e4:	b003      	add	sp, #12
 80062e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062ea:	6812      	ldr	r2, [r2, #0]
 80062ec:	3b04      	subs	r3, #4
 80062ee:	2a00      	cmp	r2, #0
 80062f0:	d1cc      	bne.n	800628c <quorem+0x9c>
 80062f2:	3c01      	subs	r4, #1
 80062f4:	e7c7      	b.n	8006286 <quorem+0x96>
 80062f6:	6812      	ldr	r2, [r2, #0]
 80062f8:	3b04      	subs	r3, #4
 80062fa:	2a00      	cmp	r2, #0
 80062fc:	d1f0      	bne.n	80062e0 <quorem+0xf0>
 80062fe:	3c01      	subs	r4, #1
 8006300:	e7eb      	b.n	80062da <quorem+0xea>
 8006302:	2000      	movs	r0, #0
 8006304:	e7ee      	b.n	80062e4 <quorem+0xf4>
	...

08006308 <_dtoa_r>:
 8006308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800630c:	ed2d 8b04 	vpush	{d8-d9}
 8006310:	ec57 6b10 	vmov	r6, r7, d0
 8006314:	b093      	sub	sp, #76	; 0x4c
 8006316:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006318:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800631c:	9106      	str	r1, [sp, #24]
 800631e:	ee10 aa10 	vmov	sl, s0
 8006322:	4604      	mov	r4, r0
 8006324:	9209      	str	r2, [sp, #36]	; 0x24
 8006326:	930c      	str	r3, [sp, #48]	; 0x30
 8006328:	46bb      	mov	fp, r7
 800632a:	b975      	cbnz	r5, 800634a <_dtoa_r+0x42>
 800632c:	2010      	movs	r0, #16
 800632e:	f000 fffd 	bl	800732c <malloc>
 8006332:	4602      	mov	r2, r0
 8006334:	6260      	str	r0, [r4, #36]	; 0x24
 8006336:	b920      	cbnz	r0, 8006342 <_dtoa_r+0x3a>
 8006338:	4ba7      	ldr	r3, [pc, #668]	; (80065d8 <_dtoa_r+0x2d0>)
 800633a:	21ea      	movs	r1, #234	; 0xea
 800633c:	48a7      	ldr	r0, [pc, #668]	; (80065dc <_dtoa_r+0x2d4>)
 800633e:	f001 ff05 	bl	800814c <__assert_func>
 8006342:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006346:	6005      	str	r5, [r0, #0]
 8006348:	60c5      	str	r5, [r0, #12]
 800634a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800634c:	6819      	ldr	r1, [r3, #0]
 800634e:	b151      	cbz	r1, 8006366 <_dtoa_r+0x5e>
 8006350:	685a      	ldr	r2, [r3, #4]
 8006352:	604a      	str	r2, [r1, #4]
 8006354:	2301      	movs	r3, #1
 8006356:	4093      	lsls	r3, r2
 8006358:	608b      	str	r3, [r1, #8]
 800635a:	4620      	mov	r0, r4
 800635c:	f001 f83c 	bl	80073d8 <_Bfree>
 8006360:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006362:	2200      	movs	r2, #0
 8006364:	601a      	str	r2, [r3, #0]
 8006366:	1e3b      	subs	r3, r7, #0
 8006368:	bfaa      	itet	ge
 800636a:	2300      	movge	r3, #0
 800636c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006370:	f8c8 3000 	strge.w	r3, [r8]
 8006374:	4b9a      	ldr	r3, [pc, #616]	; (80065e0 <_dtoa_r+0x2d8>)
 8006376:	bfbc      	itt	lt
 8006378:	2201      	movlt	r2, #1
 800637a:	f8c8 2000 	strlt.w	r2, [r8]
 800637e:	ea33 030b 	bics.w	r3, r3, fp
 8006382:	d11b      	bne.n	80063bc <_dtoa_r+0xb4>
 8006384:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006386:	f242 730f 	movw	r3, #9999	; 0x270f
 800638a:	6013      	str	r3, [r2, #0]
 800638c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006390:	4333      	orrs	r3, r6
 8006392:	f000 8592 	beq.w	8006eba <_dtoa_r+0xbb2>
 8006396:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006398:	b963      	cbnz	r3, 80063b4 <_dtoa_r+0xac>
 800639a:	4b92      	ldr	r3, [pc, #584]	; (80065e4 <_dtoa_r+0x2dc>)
 800639c:	e022      	b.n	80063e4 <_dtoa_r+0xdc>
 800639e:	4b92      	ldr	r3, [pc, #584]	; (80065e8 <_dtoa_r+0x2e0>)
 80063a0:	9301      	str	r3, [sp, #4]
 80063a2:	3308      	adds	r3, #8
 80063a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80063a6:	6013      	str	r3, [r2, #0]
 80063a8:	9801      	ldr	r0, [sp, #4]
 80063aa:	b013      	add	sp, #76	; 0x4c
 80063ac:	ecbd 8b04 	vpop	{d8-d9}
 80063b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063b4:	4b8b      	ldr	r3, [pc, #556]	; (80065e4 <_dtoa_r+0x2dc>)
 80063b6:	9301      	str	r3, [sp, #4]
 80063b8:	3303      	adds	r3, #3
 80063ba:	e7f3      	b.n	80063a4 <_dtoa_r+0x9c>
 80063bc:	2200      	movs	r2, #0
 80063be:	2300      	movs	r3, #0
 80063c0:	4650      	mov	r0, sl
 80063c2:	4659      	mov	r1, fp
 80063c4:	f7fa fba8 	bl	8000b18 <__aeabi_dcmpeq>
 80063c8:	ec4b ab19 	vmov	d9, sl, fp
 80063cc:	4680      	mov	r8, r0
 80063ce:	b158      	cbz	r0, 80063e8 <_dtoa_r+0xe0>
 80063d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80063d2:	2301      	movs	r3, #1
 80063d4:	6013      	str	r3, [r2, #0]
 80063d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f000 856b 	beq.w	8006eb4 <_dtoa_r+0xbac>
 80063de:	4883      	ldr	r0, [pc, #524]	; (80065ec <_dtoa_r+0x2e4>)
 80063e0:	6018      	str	r0, [r3, #0]
 80063e2:	1e43      	subs	r3, r0, #1
 80063e4:	9301      	str	r3, [sp, #4]
 80063e6:	e7df      	b.n	80063a8 <_dtoa_r+0xa0>
 80063e8:	ec4b ab10 	vmov	d0, sl, fp
 80063ec:	aa10      	add	r2, sp, #64	; 0x40
 80063ee:	a911      	add	r1, sp, #68	; 0x44
 80063f0:	4620      	mov	r0, r4
 80063f2:	f001 fad9 	bl	80079a8 <__d2b>
 80063f6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80063fa:	ee08 0a10 	vmov	s16, r0
 80063fe:	2d00      	cmp	r5, #0
 8006400:	f000 8084 	beq.w	800650c <_dtoa_r+0x204>
 8006404:	ee19 3a90 	vmov	r3, s19
 8006408:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800640c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006410:	4656      	mov	r6, sl
 8006412:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006416:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800641a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800641e:	4b74      	ldr	r3, [pc, #464]	; (80065f0 <_dtoa_r+0x2e8>)
 8006420:	2200      	movs	r2, #0
 8006422:	4630      	mov	r0, r6
 8006424:	4639      	mov	r1, r7
 8006426:	f7f9 ff57 	bl	80002d8 <__aeabi_dsub>
 800642a:	a365      	add	r3, pc, #404	; (adr r3, 80065c0 <_dtoa_r+0x2b8>)
 800642c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006430:	f7fa f90a 	bl	8000648 <__aeabi_dmul>
 8006434:	a364      	add	r3, pc, #400	; (adr r3, 80065c8 <_dtoa_r+0x2c0>)
 8006436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643a:	f7f9 ff4f 	bl	80002dc <__adddf3>
 800643e:	4606      	mov	r6, r0
 8006440:	4628      	mov	r0, r5
 8006442:	460f      	mov	r7, r1
 8006444:	f7fa f896 	bl	8000574 <__aeabi_i2d>
 8006448:	a361      	add	r3, pc, #388	; (adr r3, 80065d0 <_dtoa_r+0x2c8>)
 800644a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644e:	f7fa f8fb 	bl	8000648 <__aeabi_dmul>
 8006452:	4602      	mov	r2, r0
 8006454:	460b      	mov	r3, r1
 8006456:	4630      	mov	r0, r6
 8006458:	4639      	mov	r1, r7
 800645a:	f7f9 ff3f 	bl	80002dc <__adddf3>
 800645e:	4606      	mov	r6, r0
 8006460:	460f      	mov	r7, r1
 8006462:	f7fa fba1 	bl	8000ba8 <__aeabi_d2iz>
 8006466:	2200      	movs	r2, #0
 8006468:	9000      	str	r0, [sp, #0]
 800646a:	2300      	movs	r3, #0
 800646c:	4630      	mov	r0, r6
 800646e:	4639      	mov	r1, r7
 8006470:	f7fa fb5c 	bl	8000b2c <__aeabi_dcmplt>
 8006474:	b150      	cbz	r0, 800648c <_dtoa_r+0x184>
 8006476:	9800      	ldr	r0, [sp, #0]
 8006478:	f7fa f87c 	bl	8000574 <__aeabi_i2d>
 800647c:	4632      	mov	r2, r6
 800647e:	463b      	mov	r3, r7
 8006480:	f7fa fb4a 	bl	8000b18 <__aeabi_dcmpeq>
 8006484:	b910      	cbnz	r0, 800648c <_dtoa_r+0x184>
 8006486:	9b00      	ldr	r3, [sp, #0]
 8006488:	3b01      	subs	r3, #1
 800648a:	9300      	str	r3, [sp, #0]
 800648c:	9b00      	ldr	r3, [sp, #0]
 800648e:	2b16      	cmp	r3, #22
 8006490:	d85a      	bhi.n	8006548 <_dtoa_r+0x240>
 8006492:	9a00      	ldr	r2, [sp, #0]
 8006494:	4b57      	ldr	r3, [pc, #348]	; (80065f4 <_dtoa_r+0x2ec>)
 8006496:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800649a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649e:	ec51 0b19 	vmov	r0, r1, d9
 80064a2:	f7fa fb43 	bl	8000b2c <__aeabi_dcmplt>
 80064a6:	2800      	cmp	r0, #0
 80064a8:	d050      	beq.n	800654c <_dtoa_r+0x244>
 80064aa:	9b00      	ldr	r3, [sp, #0]
 80064ac:	3b01      	subs	r3, #1
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	2300      	movs	r3, #0
 80064b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80064b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80064b6:	1b5d      	subs	r5, r3, r5
 80064b8:	1e6b      	subs	r3, r5, #1
 80064ba:	9305      	str	r3, [sp, #20]
 80064bc:	bf45      	ittet	mi
 80064be:	f1c5 0301 	rsbmi	r3, r5, #1
 80064c2:	9304      	strmi	r3, [sp, #16]
 80064c4:	2300      	movpl	r3, #0
 80064c6:	2300      	movmi	r3, #0
 80064c8:	bf4c      	ite	mi
 80064ca:	9305      	strmi	r3, [sp, #20]
 80064cc:	9304      	strpl	r3, [sp, #16]
 80064ce:	9b00      	ldr	r3, [sp, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	db3d      	blt.n	8006550 <_dtoa_r+0x248>
 80064d4:	9b05      	ldr	r3, [sp, #20]
 80064d6:	9a00      	ldr	r2, [sp, #0]
 80064d8:	920a      	str	r2, [sp, #40]	; 0x28
 80064da:	4413      	add	r3, r2
 80064dc:	9305      	str	r3, [sp, #20]
 80064de:	2300      	movs	r3, #0
 80064e0:	9307      	str	r3, [sp, #28]
 80064e2:	9b06      	ldr	r3, [sp, #24]
 80064e4:	2b09      	cmp	r3, #9
 80064e6:	f200 8089 	bhi.w	80065fc <_dtoa_r+0x2f4>
 80064ea:	2b05      	cmp	r3, #5
 80064ec:	bfc4      	itt	gt
 80064ee:	3b04      	subgt	r3, #4
 80064f0:	9306      	strgt	r3, [sp, #24]
 80064f2:	9b06      	ldr	r3, [sp, #24]
 80064f4:	f1a3 0302 	sub.w	r3, r3, #2
 80064f8:	bfcc      	ite	gt
 80064fa:	2500      	movgt	r5, #0
 80064fc:	2501      	movle	r5, #1
 80064fe:	2b03      	cmp	r3, #3
 8006500:	f200 8087 	bhi.w	8006612 <_dtoa_r+0x30a>
 8006504:	e8df f003 	tbb	[pc, r3]
 8006508:	59383a2d 	.word	0x59383a2d
 800650c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006510:	441d      	add	r5, r3
 8006512:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006516:	2b20      	cmp	r3, #32
 8006518:	bfc1      	itttt	gt
 800651a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800651e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006522:	fa0b f303 	lslgt.w	r3, fp, r3
 8006526:	fa26 f000 	lsrgt.w	r0, r6, r0
 800652a:	bfda      	itte	le
 800652c:	f1c3 0320 	rsble	r3, r3, #32
 8006530:	fa06 f003 	lslle.w	r0, r6, r3
 8006534:	4318      	orrgt	r0, r3
 8006536:	f7fa f80d 	bl	8000554 <__aeabi_ui2d>
 800653a:	2301      	movs	r3, #1
 800653c:	4606      	mov	r6, r0
 800653e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006542:	3d01      	subs	r5, #1
 8006544:	930e      	str	r3, [sp, #56]	; 0x38
 8006546:	e76a      	b.n	800641e <_dtoa_r+0x116>
 8006548:	2301      	movs	r3, #1
 800654a:	e7b2      	b.n	80064b2 <_dtoa_r+0x1aa>
 800654c:	900b      	str	r0, [sp, #44]	; 0x2c
 800654e:	e7b1      	b.n	80064b4 <_dtoa_r+0x1ac>
 8006550:	9b04      	ldr	r3, [sp, #16]
 8006552:	9a00      	ldr	r2, [sp, #0]
 8006554:	1a9b      	subs	r3, r3, r2
 8006556:	9304      	str	r3, [sp, #16]
 8006558:	4253      	negs	r3, r2
 800655a:	9307      	str	r3, [sp, #28]
 800655c:	2300      	movs	r3, #0
 800655e:	930a      	str	r3, [sp, #40]	; 0x28
 8006560:	e7bf      	b.n	80064e2 <_dtoa_r+0x1da>
 8006562:	2300      	movs	r3, #0
 8006564:	9308      	str	r3, [sp, #32]
 8006566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006568:	2b00      	cmp	r3, #0
 800656a:	dc55      	bgt.n	8006618 <_dtoa_r+0x310>
 800656c:	2301      	movs	r3, #1
 800656e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006572:	461a      	mov	r2, r3
 8006574:	9209      	str	r2, [sp, #36]	; 0x24
 8006576:	e00c      	b.n	8006592 <_dtoa_r+0x28a>
 8006578:	2301      	movs	r3, #1
 800657a:	e7f3      	b.n	8006564 <_dtoa_r+0x25c>
 800657c:	2300      	movs	r3, #0
 800657e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006580:	9308      	str	r3, [sp, #32]
 8006582:	9b00      	ldr	r3, [sp, #0]
 8006584:	4413      	add	r3, r2
 8006586:	9302      	str	r3, [sp, #8]
 8006588:	3301      	adds	r3, #1
 800658a:	2b01      	cmp	r3, #1
 800658c:	9303      	str	r3, [sp, #12]
 800658e:	bfb8      	it	lt
 8006590:	2301      	movlt	r3, #1
 8006592:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006594:	2200      	movs	r2, #0
 8006596:	6042      	str	r2, [r0, #4]
 8006598:	2204      	movs	r2, #4
 800659a:	f102 0614 	add.w	r6, r2, #20
 800659e:	429e      	cmp	r6, r3
 80065a0:	6841      	ldr	r1, [r0, #4]
 80065a2:	d93d      	bls.n	8006620 <_dtoa_r+0x318>
 80065a4:	4620      	mov	r0, r4
 80065a6:	f000 fed7 	bl	8007358 <_Balloc>
 80065aa:	9001      	str	r0, [sp, #4]
 80065ac:	2800      	cmp	r0, #0
 80065ae:	d13b      	bne.n	8006628 <_dtoa_r+0x320>
 80065b0:	4b11      	ldr	r3, [pc, #68]	; (80065f8 <_dtoa_r+0x2f0>)
 80065b2:	4602      	mov	r2, r0
 80065b4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80065b8:	e6c0      	b.n	800633c <_dtoa_r+0x34>
 80065ba:	2301      	movs	r3, #1
 80065bc:	e7df      	b.n	800657e <_dtoa_r+0x276>
 80065be:	bf00      	nop
 80065c0:	636f4361 	.word	0x636f4361
 80065c4:	3fd287a7 	.word	0x3fd287a7
 80065c8:	8b60c8b3 	.word	0x8b60c8b3
 80065cc:	3fc68a28 	.word	0x3fc68a28
 80065d0:	509f79fb 	.word	0x509f79fb
 80065d4:	3fd34413 	.word	0x3fd34413
 80065d8:	080083ed 	.word	0x080083ed
 80065dc:	08008404 	.word	0x08008404
 80065e0:	7ff00000 	.word	0x7ff00000
 80065e4:	080083e9 	.word	0x080083e9
 80065e8:	080083e0 	.word	0x080083e0
 80065ec:	080083bd 	.word	0x080083bd
 80065f0:	3ff80000 	.word	0x3ff80000
 80065f4:	08008558 	.word	0x08008558
 80065f8:	0800845f 	.word	0x0800845f
 80065fc:	2501      	movs	r5, #1
 80065fe:	2300      	movs	r3, #0
 8006600:	9306      	str	r3, [sp, #24]
 8006602:	9508      	str	r5, [sp, #32]
 8006604:	f04f 33ff 	mov.w	r3, #4294967295
 8006608:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800660c:	2200      	movs	r2, #0
 800660e:	2312      	movs	r3, #18
 8006610:	e7b0      	b.n	8006574 <_dtoa_r+0x26c>
 8006612:	2301      	movs	r3, #1
 8006614:	9308      	str	r3, [sp, #32]
 8006616:	e7f5      	b.n	8006604 <_dtoa_r+0x2fc>
 8006618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800661a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800661e:	e7b8      	b.n	8006592 <_dtoa_r+0x28a>
 8006620:	3101      	adds	r1, #1
 8006622:	6041      	str	r1, [r0, #4]
 8006624:	0052      	lsls	r2, r2, #1
 8006626:	e7b8      	b.n	800659a <_dtoa_r+0x292>
 8006628:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800662a:	9a01      	ldr	r2, [sp, #4]
 800662c:	601a      	str	r2, [r3, #0]
 800662e:	9b03      	ldr	r3, [sp, #12]
 8006630:	2b0e      	cmp	r3, #14
 8006632:	f200 809d 	bhi.w	8006770 <_dtoa_r+0x468>
 8006636:	2d00      	cmp	r5, #0
 8006638:	f000 809a 	beq.w	8006770 <_dtoa_r+0x468>
 800663c:	9b00      	ldr	r3, [sp, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	dd32      	ble.n	80066a8 <_dtoa_r+0x3a0>
 8006642:	4ab7      	ldr	r2, [pc, #732]	; (8006920 <_dtoa_r+0x618>)
 8006644:	f003 030f 	and.w	r3, r3, #15
 8006648:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800664c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006650:	9b00      	ldr	r3, [sp, #0]
 8006652:	05d8      	lsls	r0, r3, #23
 8006654:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006658:	d516      	bpl.n	8006688 <_dtoa_r+0x380>
 800665a:	4bb2      	ldr	r3, [pc, #712]	; (8006924 <_dtoa_r+0x61c>)
 800665c:	ec51 0b19 	vmov	r0, r1, d9
 8006660:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006664:	f7fa f91a 	bl	800089c <__aeabi_ddiv>
 8006668:	f007 070f 	and.w	r7, r7, #15
 800666c:	4682      	mov	sl, r0
 800666e:	468b      	mov	fp, r1
 8006670:	2503      	movs	r5, #3
 8006672:	4eac      	ldr	r6, [pc, #688]	; (8006924 <_dtoa_r+0x61c>)
 8006674:	b957      	cbnz	r7, 800668c <_dtoa_r+0x384>
 8006676:	4642      	mov	r2, r8
 8006678:	464b      	mov	r3, r9
 800667a:	4650      	mov	r0, sl
 800667c:	4659      	mov	r1, fp
 800667e:	f7fa f90d 	bl	800089c <__aeabi_ddiv>
 8006682:	4682      	mov	sl, r0
 8006684:	468b      	mov	fp, r1
 8006686:	e028      	b.n	80066da <_dtoa_r+0x3d2>
 8006688:	2502      	movs	r5, #2
 800668a:	e7f2      	b.n	8006672 <_dtoa_r+0x36a>
 800668c:	07f9      	lsls	r1, r7, #31
 800668e:	d508      	bpl.n	80066a2 <_dtoa_r+0x39a>
 8006690:	4640      	mov	r0, r8
 8006692:	4649      	mov	r1, r9
 8006694:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006698:	f7f9 ffd6 	bl	8000648 <__aeabi_dmul>
 800669c:	3501      	adds	r5, #1
 800669e:	4680      	mov	r8, r0
 80066a0:	4689      	mov	r9, r1
 80066a2:	107f      	asrs	r7, r7, #1
 80066a4:	3608      	adds	r6, #8
 80066a6:	e7e5      	b.n	8006674 <_dtoa_r+0x36c>
 80066a8:	f000 809b 	beq.w	80067e2 <_dtoa_r+0x4da>
 80066ac:	9b00      	ldr	r3, [sp, #0]
 80066ae:	4f9d      	ldr	r7, [pc, #628]	; (8006924 <_dtoa_r+0x61c>)
 80066b0:	425e      	negs	r6, r3
 80066b2:	4b9b      	ldr	r3, [pc, #620]	; (8006920 <_dtoa_r+0x618>)
 80066b4:	f006 020f 	and.w	r2, r6, #15
 80066b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c0:	ec51 0b19 	vmov	r0, r1, d9
 80066c4:	f7f9 ffc0 	bl	8000648 <__aeabi_dmul>
 80066c8:	1136      	asrs	r6, r6, #4
 80066ca:	4682      	mov	sl, r0
 80066cc:	468b      	mov	fp, r1
 80066ce:	2300      	movs	r3, #0
 80066d0:	2502      	movs	r5, #2
 80066d2:	2e00      	cmp	r6, #0
 80066d4:	d17a      	bne.n	80067cc <_dtoa_r+0x4c4>
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1d3      	bne.n	8006682 <_dtoa_r+0x37a>
 80066da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f000 8082 	beq.w	80067e6 <_dtoa_r+0x4de>
 80066e2:	4b91      	ldr	r3, [pc, #580]	; (8006928 <_dtoa_r+0x620>)
 80066e4:	2200      	movs	r2, #0
 80066e6:	4650      	mov	r0, sl
 80066e8:	4659      	mov	r1, fp
 80066ea:	f7fa fa1f 	bl	8000b2c <__aeabi_dcmplt>
 80066ee:	2800      	cmp	r0, #0
 80066f0:	d079      	beq.n	80067e6 <_dtoa_r+0x4de>
 80066f2:	9b03      	ldr	r3, [sp, #12]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d076      	beq.n	80067e6 <_dtoa_r+0x4de>
 80066f8:	9b02      	ldr	r3, [sp, #8]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	dd36      	ble.n	800676c <_dtoa_r+0x464>
 80066fe:	9b00      	ldr	r3, [sp, #0]
 8006700:	4650      	mov	r0, sl
 8006702:	4659      	mov	r1, fp
 8006704:	1e5f      	subs	r7, r3, #1
 8006706:	2200      	movs	r2, #0
 8006708:	4b88      	ldr	r3, [pc, #544]	; (800692c <_dtoa_r+0x624>)
 800670a:	f7f9 ff9d 	bl	8000648 <__aeabi_dmul>
 800670e:	9e02      	ldr	r6, [sp, #8]
 8006710:	4682      	mov	sl, r0
 8006712:	468b      	mov	fp, r1
 8006714:	3501      	adds	r5, #1
 8006716:	4628      	mov	r0, r5
 8006718:	f7f9 ff2c 	bl	8000574 <__aeabi_i2d>
 800671c:	4652      	mov	r2, sl
 800671e:	465b      	mov	r3, fp
 8006720:	f7f9 ff92 	bl	8000648 <__aeabi_dmul>
 8006724:	4b82      	ldr	r3, [pc, #520]	; (8006930 <_dtoa_r+0x628>)
 8006726:	2200      	movs	r2, #0
 8006728:	f7f9 fdd8 	bl	80002dc <__adddf3>
 800672c:	46d0      	mov	r8, sl
 800672e:	46d9      	mov	r9, fp
 8006730:	4682      	mov	sl, r0
 8006732:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006736:	2e00      	cmp	r6, #0
 8006738:	d158      	bne.n	80067ec <_dtoa_r+0x4e4>
 800673a:	4b7e      	ldr	r3, [pc, #504]	; (8006934 <_dtoa_r+0x62c>)
 800673c:	2200      	movs	r2, #0
 800673e:	4640      	mov	r0, r8
 8006740:	4649      	mov	r1, r9
 8006742:	f7f9 fdc9 	bl	80002d8 <__aeabi_dsub>
 8006746:	4652      	mov	r2, sl
 8006748:	465b      	mov	r3, fp
 800674a:	4680      	mov	r8, r0
 800674c:	4689      	mov	r9, r1
 800674e:	f7fa fa0b 	bl	8000b68 <__aeabi_dcmpgt>
 8006752:	2800      	cmp	r0, #0
 8006754:	f040 8295 	bne.w	8006c82 <_dtoa_r+0x97a>
 8006758:	4652      	mov	r2, sl
 800675a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800675e:	4640      	mov	r0, r8
 8006760:	4649      	mov	r1, r9
 8006762:	f7fa f9e3 	bl	8000b2c <__aeabi_dcmplt>
 8006766:	2800      	cmp	r0, #0
 8006768:	f040 8289 	bne.w	8006c7e <_dtoa_r+0x976>
 800676c:	ec5b ab19 	vmov	sl, fp, d9
 8006770:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006772:	2b00      	cmp	r3, #0
 8006774:	f2c0 8148 	blt.w	8006a08 <_dtoa_r+0x700>
 8006778:	9a00      	ldr	r2, [sp, #0]
 800677a:	2a0e      	cmp	r2, #14
 800677c:	f300 8144 	bgt.w	8006a08 <_dtoa_r+0x700>
 8006780:	4b67      	ldr	r3, [pc, #412]	; (8006920 <_dtoa_r+0x618>)
 8006782:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006786:	e9d3 8900 	ldrd	r8, r9, [r3]
 800678a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800678c:	2b00      	cmp	r3, #0
 800678e:	f280 80d5 	bge.w	800693c <_dtoa_r+0x634>
 8006792:	9b03      	ldr	r3, [sp, #12]
 8006794:	2b00      	cmp	r3, #0
 8006796:	f300 80d1 	bgt.w	800693c <_dtoa_r+0x634>
 800679a:	f040 826f 	bne.w	8006c7c <_dtoa_r+0x974>
 800679e:	4b65      	ldr	r3, [pc, #404]	; (8006934 <_dtoa_r+0x62c>)
 80067a0:	2200      	movs	r2, #0
 80067a2:	4640      	mov	r0, r8
 80067a4:	4649      	mov	r1, r9
 80067a6:	f7f9 ff4f 	bl	8000648 <__aeabi_dmul>
 80067aa:	4652      	mov	r2, sl
 80067ac:	465b      	mov	r3, fp
 80067ae:	f7fa f9d1 	bl	8000b54 <__aeabi_dcmpge>
 80067b2:	9e03      	ldr	r6, [sp, #12]
 80067b4:	4637      	mov	r7, r6
 80067b6:	2800      	cmp	r0, #0
 80067b8:	f040 8245 	bne.w	8006c46 <_dtoa_r+0x93e>
 80067bc:	9d01      	ldr	r5, [sp, #4]
 80067be:	2331      	movs	r3, #49	; 0x31
 80067c0:	f805 3b01 	strb.w	r3, [r5], #1
 80067c4:	9b00      	ldr	r3, [sp, #0]
 80067c6:	3301      	adds	r3, #1
 80067c8:	9300      	str	r3, [sp, #0]
 80067ca:	e240      	b.n	8006c4e <_dtoa_r+0x946>
 80067cc:	07f2      	lsls	r2, r6, #31
 80067ce:	d505      	bpl.n	80067dc <_dtoa_r+0x4d4>
 80067d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067d4:	f7f9 ff38 	bl	8000648 <__aeabi_dmul>
 80067d8:	3501      	adds	r5, #1
 80067da:	2301      	movs	r3, #1
 80067dc:	1076      	asrs	r6, r6, #1
 80067de:	3708      	adds	r7, #8
 80067e0:	e777      	b.n	80066d2 <_dtoa_r+0x3ca>
 80067e2:	2502      	movs	r5, #2
 80067e4:	e779      	b.n	80066da <_dtoa_r+0x3d2>
 80067e6:	9f00      	ldr	r7, [sp, #0]
 80067e8:	9e03      	ldr	r6, [sp, #12]
 80067ea:	e794      	b.n	8006716 <_dtoa_r+0x40e>
 80067ec:	9901      	ldr	r1, [sp, #4]
 80067ee:	4b4c      	ldr	r3, [pc, #304]	; (8006920 <_dtoa_r+0x618>)
 80067f0:	4431      	add	r1, r6
 80067f2:	910d      	str	r1, [sp, #52]	; 0x34
 80067f4:	9908      	ldr	r1, [sp, #32]
 80067f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80067fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80067fe:	2900      	cmp	r1, #0
 8006800:	d043      	beq.n	800688a <_dtoa_r+0x582>
 8006802:	494d      	ldr	r1, [pc, #308]	; (8006938 <_dtoa_r+0x630>)
 8006804:	2000      	movs	r0, #0
 8006806:	f7fa f849 	bl	800089c <__aeabi_ddiv>
 800680a:	4652      	mov	r2, sl
 800680c:	465b      	mov	r3, fp
 800680e:	f7f9 fd63 	bl	80002d8 <__aeabi_dsub>
 8006812:	9d01      	ldr	r5, [sp, #4]
 8006814:	4682      	mov	sl, r0
 8006816:	468b      	mov	fp, r1
 8006818:	4649      	mov	r1, r9
 800681a:	4640      	mov	r0, r8
 800681c:	f7fa f9c4 	bl	8000ba8 <__aeabi_d2iz>
 8006820:	4606      	mov	r6, r0
 8006822:	f7f9 fea7 	bl	8000574 <__aeabi_i2d>
 8006826:	4602      	mov	r2, r0
 8006828:	460b      	mov	r3, r1
 800682a:	4640      	mov	r0, r8
 800682c:	4649      	mov	r1, r9
 800682e:	f7f9 fd53 	bl	80002d8 <__aeabi_dsub>
 8006832:	3630      	adds	r6, #48	; 0x30
 8006834:	f805 6b01 	strb.w	r6, [r5], #1
 8006838:	4652      	mov	r2, sl
 800683a:	465b      	mov	r3, fp
 800683c:	4680      	mov	r8, r0
 800683e:	4689      	mov	r9, r1
 8006840:	f7fa f974 	bl	8000b2c <__aeabi_dcmplt>
 8006844:	2800      	cmp	r0, #0
 8006846:	d163      	bne.n	8006910 <_dtoa_r+0x608>
 8006848:	4642      	mov	r2, r8
 800684a:	464b      	mov	r3, r9
 800684c:	4936      	ldr	r1, [pc, #216]	; (8006928 <_dtoa_r+0x620>)
 800684e:	2000      	movs	r0, #0
 8006850:	f7f9 fd42 	bl	80002d8 <__aeabi_dsub>
 8006854:	4652      	mov	r2, sl
 8006856:	465b      	mov	r3, fp
 8006858:	f7fa f968 	bl	8000b2c <__aeabi_dcmplt>
 800685c:	2800      	cmp	r0, #0
 800685e:	f040 80b5 	bne.w	80069cc <_dtoa_r+0x6c4>
 8006862:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006864:	429d      	cmp	r5, r3
 8006866:	d081      	beq.n	800676c <_dtoa_r+0x464>
 8006868:	4b30      	ldr	r3, [pc, #192]	; (800692c <_dtoa_r+0x624>)
 800686a:	2200      	movs	r2, #0
 800686c:	4650      	mov	r0, sl
 800686e:	4659      	mov	r1, fp
 8006870:	f7f9 feea 	bl	8000648 <__aeabi_dmul>
 8006874:	4b2d      	ldr	r3, [pc, #180]	; (800692c <_dtoa_r+0x624>)
 8006876:	4682      	mov	sl, r0
 8006878:	468b      	mov	fp, r1
 800687a:	4640      	mov	r0, r8
 800687c:	4649      	mov	r1, r9
 800687e:	2200      	movs	r2, #0
 8006880:	f7f9 fee2 	bl	8000648 <__aeabi_dmul>
 8006884:	4680      	mov	r8, r0
 8006886:	4689      	mov	r9, r1
 8006888:	e7c6      	b.n	8006818 <_dtoa_r+0x510>
 800688a:	4650      	mov	r0, sl
 800688c:	4659      	mov	r1, fp
 800688e:	f7f9 fedb 	bl	8000648 <__aeabi_dmul>
 8006892:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006894:	9d01      	ldr	r5, [sp, #4]
 8006896:	930f      	str	r3, [sp, #60]	; 0x3c
 8006898:	4682      	mov	sl, r0
 800689a:	468b      	mov	fp, r1
 800689c:	4649      	mov	r1, r9
 800689e:	4640      	mov	r0, r8
 80068a0:	f7fa f982 	bl	8000ba8 <__aeabi_d2iz>
 80068a4:	4606      	mov	r6, r0
 80068a6:	f7f9 fe65 	bl	8000574 <__aeabi_i2d>
 80068aa:	3630      	adds	r6, #48	; 0x30
 80068ac:	4602      	mov	r2, r0
 80068ae:	460b      	mov	r3, r1
 80068b0:	4640      	mov	r0, r8
 80068b2:	4649      	mov	r1, r9
 80068b4:	f7f9 fd10 	bl	80002d8 <__aeabi_dsub>
 80068b8:	f805 6b01 	strb.w	r6, [r5], #1
 80068bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068be:	429d      	cmp	r5, r3
 80068c0:	4680      	mov	r8, r0
 80068c2:	4689      	mov	r9, r1
 80068c4:	f04f 0200 	mov.w	r2, #0
 80068c8:	d124      	bne.n	8006914 <_dtoa_r+0x60c>
 80068ca:	4b1b      	ldr	r3, [pc, #108]	; (8006938 <_dtoa_r+0x630>)
 80068cc:	4650      	mov	r0, sl
 80068ce:	4659      	mov	r1, fp
 80068d0:	f7f9 fd04 	bl	80002dc <__adddf3>
 80068d4:	4602      	mov	r2, r0
 80068d6:	460b      	mov	r3, r1
 80068d8:	4640      	mov	r0, r8
 80068da:	4649      	mov	r1, r9
 80068dc:	f7fa f944 	bl	8000b68 <__aeabi_dcmpgt>
 80068e0:	2800      	cmp	r0, #0
 80068e2:	d173      	bne.n	80069cc <_dtoa_r+0x6c4>
 80068e4:	4652      	mov	r2, sl
 80068e6:	465b      	mov	r3, fp
 80068e8:	4913      	ldr	r1, [pc, #76]	; (8006938 <_dtoa_r+0x630>)
 80068ea:	2000      	movs	r0, #0
 80068ec:	f7f9 fcf4 	bl	80002d8 <__aeabi_dsub>
 80068f0:	4602      	mov	r2, r0
 80068f2:	460b      	mov	r3, r1
 80068f4:	4640      	mov	r0, r8
 80068f6:	4649      	mov	r1, r9
 80068f8:	f7fa f918 	bl	8000b2c <__aeabi_dcmplt>
 80068fc:	2800      	cmp	r0, #0
 80068fe:	f43f af35 	beq.w	800676c <_dtoa_r+0x464>
 8006902:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006904:	1e6b      	subs	r3, r5, #1
 8006906:	930f      	str	r3, [sp, #60]	; 0x3c
 8006908:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800690c:	2b30      	cmp	r3, #48	; 0x30
 800690e:	d0f8      	beq.n	8006902 <_dtoa_r+0x5fa>
 8006910:	9700      	str	r7, [sp, #0]
 8006912:	e049      	b.n	80069a8 <_dtoa_r+0x6a0>
 8006914:	4b05      	ldr	r3, [pc, #20]	; (800692c <_dtoa_r+0x624>)
 8006916:	f7f9 fe97 	bl	8000648 <__aeabi_dmul>
 800691a:	4680      	mov	r8, r0
 800691c:	4689      	mov	r9, r1
 800691e:	e7bd      	b.n	800689c <_dtoa_r+0x594>
 8006920:	08008558 	.word	0x08008558
 8006924:	08008530 	.word	0x08008530
 8006928:	3ff00000 	.word	0x3ff00000
 800692c:	40240000 	.word	0x40240000
 8006930:	401c0000 	.word	0x401c0000
 8006934:	40140000 	.word	0x40140000
 8006938:	3fe00000 	.word	0x3fe00000
 800693c:	9d01      	ldr	r5, [sp, #4]
 800693e:	4656      	mov	r6, sl
 8006940:	465f      	mov	r7, fp
 8006942:	4642      	mov	r2, r8
 8006944:	464b      	mov	r3, r9
 8006946:	4630      	mov	r0, r6
 8006948:	4639      	mov	r1, r7
 800694a:	f7f9 ffa7 	bl	800089c <__aeabi_ddiv>
 800694e:	f7fa f92b 	bl	8000ba8 <__aeabi_d2iz>
 8006952:	4682      	mov	sl, r0
 8006954:	f7f9 fe0e 	bl	8000574 <__aeabi_i2d>
 8006958:	4642      	mov	r2, r8
 800695a:	464b      	mov	r3, r9
 800695c:	f7f9 fe74 	bl	8000648 <__aeabi_dmul>
 8006960:	4602      	mov	r2, r0
 8006962:	460b      	mov	r3, r1
 8006964:	4630      	mov	r0, r6
 8006966:	4639      	mov	r1, r7
 8006968:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800696c:	f7f9 fcb4 	bl	80002d8 <__aeabi_dsub>
 8006970:	f805 6b01 	strb.w	r6, [r5], #1
 8006974:	9e01      	ldr	r6, [sp, #4]
 8006976:	9f03      	ldr	r7, [sp, #12]
 8006978:	1bae      	subs	r6, r5, r6
 800697a:	42b7      	cmp	r7, r6
 800697c:	4602      	mov	r2, r0
 800697e:	460b      	mov	r3, r1
 8006980:	d135      	bne.n	80069ee <_dtoa_r+0x6e6>
 8006982:	f7f9 fcab 	bl	80002dc <__adddf3>
 8006986:	4642      	mov	r2, r8
 8006988:	464b      	mov	r3, r9
 800698a:	4606      	mov	r6, r0
 800698c:	460f      	mov	r7, r1
 800698e:	f7fa f8eb 	bl	8000b68 <__aeabi_dcmpgt>
 8006992:	b9d0      	cbnz	r0, 80069ca <_dtoa_r+0x6c2>
 8006994:	4642      	mov	r2, r8
 8006996:	464b      	mov	r3, r9
 8006998:	4630      	mov	r0, r6
 800699a:	4639      	mov	r1, r7
 800699c:	f7fa f8bc 	bl	8000b18 <__aeabi_dcmpeq>
 80069a0:	b110      	cbz	r0, 80069a8 <_dtoa_r+0x6a0>
 80069a2:	f01a 0f01 	tst.w	sl, #1
 80069a6:	d110      	bne.n	80069ca <_dtoa_r+0x6c2>
 80069a8:	4620      	mov	r0, r4
 80069aa:	ee18 1a10 	vmov	r1, s16
 80069ae:	f000 fd13 	bl	80073d8 <_Bfree>
 80069b2:	2300      	movs	r3, #0
 80069b4:	9800      	ldr	r0, [sp, #0]
 80069b6:	702b      	strb	r3, [r5, #0]
 80069b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069ba:	3001      	adds	r0, #1
 80069bc:	6018      	str	r0, [r3, #0]
 80069be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	f43f acf1 	beq.w	80063a8 <_dtoa_r+0xa0>
 80069c6:	601d      	str	r5, [r3, #0]
 80069c8:	e4ee      	b.n	80063a8 <_dtoa_r+0xa0>
 80069ca:	9f00      	ldr	r7, [sp, #0]
 80069cc:	462b      	mov	r3, r5
 80069ce:	461d      	mov	r5, r3
 80069d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80069d4:	2a39      	cmp	r2, #57	; 0x39
 80069d6:	d106      	bne.n	80069e6 <_dtoa_r+0x6de>
 80069d8:	9a01      	ldr	r2, [sp, #4]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d1f7      	bne.n	80069ce <_dtoa_r+0x6c6>
 80069de:	9901      	ldr	r1, [sp, #4]
 80069e0:	2230      	movs	r2, #48	; 0x30
 80069e2:	3701      	adds	r7, #1
 80069e4:	700a      	strb	r2, [r1, #0]
 80069e6:	781a      	ldrb	r2, [r3, #0]
 80069e8:	3201      	adds	r2, #1
 80069ea:	701a      	strb	r2, [r3, #0]
 80069ec:	e790      	b.n	8006910 <_dtoa_r+0x608>
 80069ee:	4ba6      	ldr	r3, [pc, #664]	; (8006c88 <_dtoa_r+0x980>)
 80069f0:	2200      	movs	r2, #0
 80069f2:	f7f9 fe29 	bl	8000648 <__aeabi_dmul>
 80069f6:	2200      	movs	r2, #0
 80069f8:	2300      	movs	r3, #0
 80069fa:	4606      	mov	r6, r0
 80069fc:	460f      	mov	r7, r1
 80069fe:	f7fa f88b 	bl	8000b18 <__aeabi_dcmpeq>
 8006a02:	2800      	cmp	r0, #0
 8006a04:	d09d      	beq.n	8006942 <_dtoa_r+0x63a>
 8006a06:	e7cf      	b.n	80069a8 <_dtoa_r+0x6a0>
 8006a08:	9a08      	ldr	r2, [sp, #32]
 8006a0a:	2a00      	cmp	r2, #0
 8006a0c:	f000 80d7 	beq.w	8006bbe <_dtoa_r+0x8b6>
 8006a10:	9a06      	ldr	r2, [sp, #24]
 8006a12:	2a01      	cmp	r2, #1
 8006a14:	f300 80ba 	bgt.w	8006b8c <_dtoa_r+0x884>
 8006a18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a1a:	2a00      	cmp	r2, #0
 8006a1c:	f000 80b2 	beq.w	8006b84 <_dtoa_r+0x87c>
 8006a20:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006a24:	9e07      	ldr	r6, [sp, #28]
 8006a26:	9d04      	ldr	r5, [sp, #16]
 8006a28:	9a04      	ldr	r2, [sp, #16]
 8006a2a:	441a      	add	r2, r3
 8006a2c:	9204      	str	r2, [sp, #16]
 8006a2e:	9a05      	ldr	r2, [sp, #20]
 8006a30:	2101      	movs	r1, #1
 8006a32:	441a      	add	r2, r3
 8006a34:	4620      	mov	r0, r4
 8006a36:	9205      	str	r2, [sp, #20]
 8006a38:	f000 fd86 	bl	8007548 <__i2b>
 8006a3c:	4607      	mov	r7, r0
 8006a3e:	2d00      	cmp	r5, #0
 8006a40:	dd0c      	ble.n	8006a5c <_dtoa_r+0x754>
 8006a42:	9b05      	ldr	r3, [sp, #20]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	dd09      	ble.n	8006a5c <_dtoa_r+0x754>
 8006a48:	42ab      	cmp	r3, r5
 8006a4a:	9a04      	ldr	r2, [sp, #16]
 8006a4c:	bfa8      	it	ge
 8006a4e:	462b      	movge	r3, r5
 8006a50:	1ad2      	subs	r2, r2, r3
 8006a52:	9204      	str	r2, [sp, #16]
 8006a54:	9a05      	ldr	r2, [sp, #20]
 8006a56:	1aed      	subs	r5, r5, r3
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	9305      	str	r3, [sp, #20]
 8006a5c:	9b07      	ldr	r3, [sp, #28]
 8006a5e:	b31b      	cbz	r3, 8006aa8 <_dtoa_r+0x7a0>
 8006a60:	9b08      	ldr	r3, [sp, #32]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f000 80af 	beq.w	8006bc6 <_dtoa_r+0x8be>
 8006a68:	2e00      	cmp	r6, #0
 8006a6a:	dd13      	ble.n	8006a94 <_dtoa_r+0x78c>
 8006a6c:	4639      	mov	r1, r7
 8006a6e:	4632      	mov	r2, r6
 8006a70:	4620      	mov	r0, r4
 8006a72:	f000 fe29 	bl	80076c8 <__pow5mult>
 8006a76:	ee18 2a10 	vmov	r2, s16
 8006a7a:	4601      	mov	r1, r0
 8006a7c:	4607      	mov	r7, r0
 8006a7e:	4620      	mov	r0, r4
 8006a80:	f000 fd78 	bl	8007574 <__multiply>
 8006a84:	ee18 1a10 	vmov	r1, s16
 8006a88:	4680      	mov	r8, r0
 8006a8a:	4620      	mov	r0, r4
 8006a8c:	f000 fca4 	bl	80073d8 <_Bfree>
 8006a90:	ee08 8a10 	vmov	s16, r8
 8006a94:	9b07      	ldr	r3, [sp, #28]
 8006a96:	1b9a      	subs	r2, r3, r6
 8006a98:	d006      	beq.n	8006aa8 <_dtoa_r+0x7a0>
 8006a9a:	ee18 1a10 	vmov	r1, s16
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	f000 fe12 	bl	80076c8 <__pow5mult>
 8006aa4:	ee08 0a10 	vmov	s16, r0
 8006aa8:	2101      	movs	r1, #1
 8006aaa:	4620      	mov	r0, r4
 8006aac:	f000 fd4c 	bl	8007548 <__i2b>
 8006ab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	4606      	mov	r6, r0
 8006ab6:	f340 8088 	ble.w	8006bca <_dtoa_r+0x8c2>
 8006aba:	461a      	mov	r2, r3
 8006abc:	4601      	mov	r1, r0
 8006abe:	4620      	mov	r0, r4
 8006ac0:	f000 fe02 	bl	80076c8 <__pow5mult>
 8006ac4:	9b06      	ldr	r3, [sp, #24]
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	4606      	mov	r6, r0
 8006aca:	f340 8081 	ble.w	8006bd0 <_dtoa_r+0x8c8>
 8006ace:	f04f 0800 	mov.w	r8, #0
 8006ad2:	6933      	ldr	r3, [r6, #16]
 8006ad4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006ad8:	6918      	ldr	r0, [r3, #16]
 8006ada:	f000 fce5 	bl	80074a8 <__hi0bits>
 8006ade:	f1c0 0020 	rsb	r0, r0, #32
 8006ae2:	9b05      	ldr	r3, [sp, #20]
 8006ae4:	4418      	add	r0, r3
 8006ae6:	f010 001f 	ands.w	r0, r0, #31
 8006aea:	f000 8092 	beq.w	8006c12 <_dtoa_r+0x90a>
 8006aee:	f1c0 0320 	rsb	r3, r0, #32
 8006af2:	2b04      	cmp	r3, #4
 8006af4:	f340 808a 	ble.w	8006c0c <_dtoa_r+0x904>
 8006af8:	f1c0 001c 	rsb	r0, r0, #28
 8006afc:	9b04      	ldr	r3, [sp, #16]
 8006afe:	4403      	add	r3, r0
 8006b00:	9304      	str	r3, [sp, #16]
 8006b02:	9b05      	ldr	r3, [sp, #20]
 8006b04:	4403      	add	r3, r0
 8006b06:	4405      	add	r5, r0
 8006b08:	9305      	str	r3, [sp, #20]
 8006b0a:	9b04      	ldr	r3, [sp, #16]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	dd07      	ble.n	8006b20 <_dtoa_r+0x818>
 8006b10:	ee18 1a10 	vmov	r1, s16
 8006b14:	461a      	mov	r2, r3
 8006b16:	4620      	mov	r0, r4
 8006b18:	f000 fe30 	bl	800777c <__lshift>
 8006b1c:	ee08 0a10 	vmov	s16, r0
 8006b20:	9b05      	ldr	r3, [sp, #20]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	dd05      	ble.n	8006b32 <_dtoa_r+0x82a>
 8006b26:	4631      	mov	r1, r6
 8006b28:	461a      	mov	r2, r3
 8006b2a:	4620      	mov	r0, r4
 8006b2c:	f000 fe26 	bl	800777c <__lshift>
 8006b30:	4606      	mov	r6, r0
 8006b32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d06e      	beq.n	8006c16 <_dtoa_r+0x90e>
 8006b38:	ee18 0a10 	vmov	r0, s16
 8006b3c:	4631      	mov	r1, r6
 8006b3e:	f000 fe8d 	bl	800785c <__mcmp>
 8006b42:	2800      	cmp	r0, #0
 8006b44:	da67      	bge.n	8006c16 <_dtoa_r+0x90e>
 8006b46:	9b00      	ldr	r3, [sp, #0]
 8006b48:	3b01      	subs	r3, #1
 8006b4a:	ee18 1a10 	vmov	r1, s16
 8006b4e:	9300      	str	r3, [sp, #0]
 8006b50:	220a      	movs	r2, #10
 8006b52:	2300      	movs	r3, #0
 8006b54:	4620      	mov	r0, r4
 8006b56:	f000 fc61 	bl	800741c <__multadd>
 8006b5a:	9b08      	ldr	r3, [sp, #32]
 8006b5c:	ee08 0a10 	vmov	s16, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f000 81b1 	beq.w	8006ec8 <_dtoa_r+0xbc0>
 8006b66:	2300      	movs	r3, #0
 8006b68:	4639      	mov	r1, r7
 8006b6a:	220a      	movs	r2, #10
 8006b6c:	4620      	mov	r0, r4
 8006b6e:	f000 fc55 	bl	800741c <__multadd>
 8006b72:	9b02      	ldr	r3, [sp, #8]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	4607      	mov	r7, r0
 8006b78:	f300 808e 	bgt.w	8006c98 <_dtoa_r+0x990>
 8006b7c:	9b06      	ldr	r3, [sp, #24]
 8006b7e:	2b02      	cmp	r3, #2
 8006b80:	dc51      	bgt.n	8006c26 <_dtoa_r+0x91e>
 8006b82:	e089      	b.n	8006c98 <_dtoa_r+0x990>
 8006b84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006b8a:	e74b      	b.n	8006a24 <_dtoa_r+0x71c>
 8006b8c:	9b03      	ldr	r3, [sp, #12]
 8006b8e:	1e5e      	subs	r6, r3, #1
 8006b90:	9b07      	ldr	r3, [sp, #28]
 8006b92:	42b3      	cmp	r3, r6
 8006b94:	bfbf      	itttt	lt
 8006b96:	9b07      	ldrlt	r3, [sp, #28]
 8006b98:	9607      	strlt	r6, [sp, #28]
 8006b9a:	1af2      	sublt	r2, r6, r3
 8006b9c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006b9e:	bfb6      	itet	lt
 8006ba0:	189b      	addlt	r3, r3, r2
 8006ba2:	1b9e      	subge	r6, r3, r6
 8006ba4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006ba6:	9b03      	ldr	r3, [sp, #12]
 8006ba8:	bfb8      	it	lt
 8006baa:	2600      	movlt	r6, #0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	bfb7      	itett	lt
 8006bb0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006bb4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006bb8:	1a9d      	sublt	r5, r3, r2
 8006bba:	2300      	movlt	r3, #0
 8006bbc:	e734      	b.n	8006a28 <_dtoa_r+0x720>
 8006bbe:	9e07      	ldr	r6, [sp, #28]
 8006bc0:	9d04      	ldr	r5, [sp, #16]
 8006bc2:	9f08      	ldr	r7, [sp, #32]
 8006bc4:	e73b      	b.n	8006a3e <_dtoa_r+0x736>
 8006bc6:	9a07      	ldr	r2, [sp, #28]
 8006bc8:	e767      	b.n	8006a9a <_dtoa_r+0x792>
 8006bca:	9b06      	ldr	r3, [sp, #24]
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	dc18      	bgt.n	8006c02 <_dtoa_r+0x8fa>
 8006bd0:	f1ba 0f00 	cmp.w	sl, #0
 8006bd4:	d115      	bne.n	8006c02 <_dtoa_r+0x8fa>
 8006bd6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006bda:	b993      	cbnz	r3, 8006c02 <_dtoa_r+0x8fa>
 8006bdc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006be0:	0d1b      	lsrs	r3, r3, #20
 8006be2:	051b      	lsls	r3, r3, #20
 8006be4:	b183      	cbz	r3, 8006c08 <_dtoa_r+0x900>
 8006be6:	9b04      	ldr	r3, [sp, #16]
 8006be8:	3301      	adds	r3, #1
 8006bea:	9304      	str	r3, [sp, #16]
 8006bec:	9b05      	ldr	r3, [sp, #20]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	9305      	str	r3, [sp, #20]
 8006bf2:	f04f 0801 	mov.w	r8, #1
 8006bf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	f47f af6a 	bne.w	8006ad2 <_dtoa_r+0x7ca>
 8006bfe:	2001      	movs	r0, #1
 8006c00:	e76f      	b.n	8006ae2 <_dtoa_r+0x7da>
 8006c02:	f04f 0800 	mov.w	r8, #0
 8006c06:	e7f6      	b.n	8006bf6 <_dtoa_r+0x8ee>
 8006c08:	4698      	mov	r8, r3
 8006c0a:	e7f4      	b.n	8006bf6 <_dtoa_r+0x8ee>
 8006c0c:	f43f af7d 	beq.w	8006b0a <_dtoa_r+0x802>
 8006c10:	4618      	mov	r0, r3
 8006c12:	301c      	adds	r0, #28
 8006c14:	e772      	b.n	8006afc <_dtoa_r+0x7f4>
 8006c16:	9b03      	ldr	r3, [sp, #12]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	dc37      	bgt.n	8006c8c <_dtoa_r+0x984>
 8006c1c:	9b06      	ldr	r3, [sp, #24]
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	dd34      	ble.n	8006c8c <_dtoa_r+0x984>
 8006c22:	9b03      	ldr	r3, [sp, #12]
 8006c24:	9302      	str	r3, [sp, #8]
 8006c26:	9b02      	ldr	r3, [sp, #8]
 8006c28:	b96b      	cbnz	r3, 8006c46 <_dtoa_r+0x93e>
 8006c2a:	4631      	mov	r1, r6
 8006c2c:	2205      	movs	r2, #5
 8006c2e:	4620      	mov	r0, r4
 8006c30:	f000 fbf4 	bl	800741c <__multadd>
 8006c34:	4601      	mov	r1, r0
 8006c36:	4606      	mov	r6, r0
 8006c38:	ee18 0a10 	vmov	r0, s16
 8006c3c:	f000 fe0e 	bl	800785c <__mcmp>
 8006c40:	2800      	cmp	r0, #0
 8006c42:	f73f adbb 	bgt.w	80067bc <_dtoa_r+0x4b4>
 8006c46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c48:	9d01      	ldr	r5, [sp, #4]
 8006c4a:	43db      	mvns	r3, r3
 8006c4c:	9300      	str	r3, [sp, #0]
 8006c4e:	f04f 0800 	mov.w	r8, #0
 8006c52:	4631      	mov	r1, r6
 8006c54:	4620      	mov	r0, r4
 8006c56:	f000 fbbf 	bl	80073d8 <_Bfree>
 8006c5a:	2f00      	cmp	r7, #0
 8006c5c:	f43f aea4 	beq.w	80069a8 <_dtoa_r+0x6a0>
 8006c60:	f1b8 0f00 	cmp.w	r8, #0
 8006c64:	d005      	beq.n	8006c72 <_dtoa_r+0x96a>
 8006c66:	45b8      	cmp	r8, r7
 8006c68:	d003      	beq.n	8006c72 <_dtoa_r+0x96a>
 8006c6a:	4641      	mov	r1, r8
 8006c6c:	4620      	mov	r0, r4
 8006c6e:	f000 fbb3 	bl	80073d8 <_Bfree>
 8006c72:	4639      	mov	r1, r7
 8006c74:	4620      	mov	r0, r4
 8006c76:	f000 fbaf 	bl	80073d8 <_Bfree>
 8006c7a:	e695      	b.n	80069a8 <_dtoa_r+0x6a0>
 8006c7c:	2600      	movs	r6, #0
 8006c7e:	4637      	mov	r7, r6
 8006c80:	e7e1      	b.n	8006c46 <_dtoa_r+0x93e>
 8006c82:	9700      	str	r7, [sp, #0]
 8006c84:	4637      	mov	r7, r6
 8006c86:	e599      	b.n	80067bc <_dtoa_r+0x4b4>
 8006c88:	40240000 	.word	0x40240000
 8006c8c:	9b08      	ldr	r3, [sp, #32]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	f000 80ca 	beq.w	8006e28 <_dtoa_r+0xb20>
 8006c94:	9b03      	ldr	r3, [sp, #12]
 8006c96:	9302      	str	r3, [sp, #8]
 8006c98:	2d00      	cmp	r5, #0
 8006c9a:	dd05      	ble.n	8006ca8 <_dtoa_r+0x9a0>
 8006c9c:	4639      	mov	r1, r7
 8006c9e:	462a      	mov	r2, r5
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	f000 fd6b 	bl	800777c <__lshift>
 8006ca6:	4607      	mov	r7, r0
 8006ca8:	f1b8 0f00 	cmp.w	r8, #0
 8006cac:	d05b      	beq.n	8006d66 <_dtoa_r+0xa5e>
 8006cae:	6879      	ldr	r1, [r7, #4]
 8006cb0:	4620      	mov	r0, r4
 8006cb2:	f000 fb51 	bl	8007358 <_Balloc>
 8006cb6:	4605      	mov	r5, r0
 8006cb8:	b928      	cbnz	r0, 8006cc6 <_dtoa_r+0x9be>
 8006cba:	4b87      	ldr	r3, [pc, #540]	; (8006ed8 <_dtoa_r+0xbd0>)
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006cc2:	f7ff bb3b 	b.w	800633c <_dtoa_r+0x34>
 8006cc6:	693a      	ldr	r2, [r7, #16]
 8006cc8:	3202      	adds	r2, #2
 8006cca:	0092      	lsls	r2, r2, #2
 8006ccc:	f107 010c 	add.w	r1, r7, #12
 8006cd0:	300c      	adds	r0, #12
 8006cd2:	f000 fb33 	bl	800733c <memcpy>
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	4629      	mov	r1, r5
 8006cda:	4620      	mov	r0, r4
 8006cdc:	f000 fd4e 	bl	800777c <__lshift>
 8006ce0:	9b01      	ldr	r3, [sp, #4]
 8006ce2:	f103 0901 	add.w	r9, r3, #1
 8006ce6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006cea:	4413      	add	r3, r2
 8006cec:	9305      	str	r3, [sp, #20]
 8006cee:	f00a 0301 	and.w	r3, sl, #1
 8006cf2:	46b8      	mov	r8, r7
 8006cf4:	9304      	str	r3, [sp, #16]
 8006cf6:	4607      	mov	r7, r0
 8006cf8:	4631      	mov	r1, r6
 8006cfa:	ee18 0a10 	vmov	r0, s16
 8006cfe:	f7ff fa77 	bl	80061f0 <quorem>
 8006d02:	4641      	mov	r1, r8
 8006d04:	9002      	str	r0, [sp, #8]
 8006d06:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006d0a:	ee18 0a10 	vmov	r0, s16
 8006d0e:	f000 fda5 	bl	800785c <__mcmp>
 8006d12:	463a      	mov	r2, r7
 8006d14:	9003      	str	r0, [sp, #12]
 8006d16:	4631      	mov	r1, r6
 8006d18:	4620      	mov	r0, r4
 8006d1a:	f000 fdbb 	bl	8007894 <__mdiff>
 8006d1e:	68c2      	ldr	r2, [r0, #12]
 8006d20:	f109 3bff 	add.w	fp, r9, #4294967295
 8006d24:	4605      	mov	r5, r0
 8006d26:	bb02      	cbnz	r2, 8006d6a <_dtoa_r+0xa62>
 8006d28:	4601      	mov	r1, r0
 8006d2a:	ee18 0a10 	vmov	r0, s16
 8006d2e:	f000 fd95 	bl	800785c <__mcmp>
 8006d32:	4602      	mov	r2, r0
 8006d34:	4629      	mov	r1, r5
 8006d36:	4620      	mov	r0, r4
 8006d38:	9207      	str	r2, [sp, #28]
 8006d3a:	f000 fb4d 	bl	80073d8 <_Bfree>
 8006d3e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006d42:	ea43 0102 	orr.w	r1, r3, r2
 8006d46:	9b04      	ldr	r3, [sp, #16]
 8006d48:	430b      	orrs	r3, r1
 8006d4a:	464d      	mov	r5, r9
 8006d4c:	d10f      	bne.n	8006d6e <_dtoa_r+0xa66>
 8006d4e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006d52:	d02a      	beq.n	8006daa <_dtoa_r+0xaa2>
 8006d54:	9b03      	ldr	r3, [sp, #12]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	dd02      	ble.n	8006d60 <_dtoa_r+0xa58>
 8006d5a:	9b02      	ldr	r3, [sp, #8]
 8006d5c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006d60:	f88b a000 	strb.w	sl, [fp]
 8006d64:	e775      	b.n	8006c52 <_dtoa_r+0x94a>
 8006d66:	4638      	mov	r0, r7
 8006d68:	e7ba      	b.n	8006ce0 <_dtoa_r+0x9d8>
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	e7e2      	b.n	8006d34 <_dtoa_r+0xa2c>
 8006d6e:	9b03      	ldr	r3, [sp, #12]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	db04      	blt.n	8006d7e <_dtoa_r+0xa76>
 8006d74:	9906      	ldr	r1, [sp, #24]
 8006d76:	430b      	orrs	r3, r1
 8006d78:	9904      	ldr	r1, [sp, #16]
 8006d7a:	430b      	orrs	r3, r1
 8006d7c:	d122      	bne.n	8006dc4 <_dtoa_r+0xabc>
 8006d7e:	2a00      	cmp	r2, #0
 8006d80:	ddee      	ble.n	8006d60 <_dtoa_r+0xa58>
 8006d82:	ee18 1a10 	vmov	r1, s16
 8006d86:	2201      	movs	r2, #1
 8006d88:	4620      	mov	r0, r4
 8006d8a:	f000 fcf7 	bl	800777c <__lshift>
 8006d8e:	4631      	mov	r1, r6
 8006d90:	ee08 0a10 	vmov	s16, r0
 8006d94:	f000 fd62 	bl	800785c <__mcmp>
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	dc03      	bgt.n	8006da4 <_dtoa_r+0xa9c>
 8006d9c:	d1e0      	bne.n	8006d60 <_dtoa_r+0xa58>
 8006d9e:	f01a 0f01 	tst.w	sl, #1
 8006da2:	d0dd      	beq.n	8006d60 <_dtoa_r+0xa58>
 8006da4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006da8:	d1d7      	bne.n	8006d5a <_dtoa_r+0xa52>
 8006daa:	2339      	movs	r3, #57	; 0x39
 8006dac:	f88b 3000 	strb.w	r3, [fp]
 8006db0:	462b      	mov	r3, r5
 8006db2:	461d      	mov	r5, r3
 8006db4:	3b01      	subs	r3, #1
 8006db6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006dba:	2a39      	cmp	r2, #57	; 0x39
 8006dbc:	d071      	beq.n	8006ea2 <_dtoa_r+0xb9a>
 8006dbe:	3201      	adds	r2, #1
 8006dc0:	701a      	strb	r2, [r3, #0]
 8006dc2:	e746      	b.n	8006c52 <_dtoa_r+0x94a>
 8006dc4:	2a00      	cmp	r2, #0
 8006dc6:	dd07      	ble.n	8006dd8 <_dtoa_r+0xad0>
 8006dc8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006dcc:	d0ed      	beq.n	8006daa <_dtoa_r+0xaa2>
 8006dce:	f10a 0301 	add.w	r3, sl, #1
 8006dd2:	f88b 3000 	strb.w	r3, [fp]
 8006dd6:	e73c      	b.n	8006c52 <_dtoa_r+0x94a>
 8006dd8:	9b05      	ldr	r3, [sp, #20]
 8006dda:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006dde:	4599      	cmp	r9, r3
 8006de0:	d047      	beq.n	8006e72 <_dtoa_r+0xb6a>
 8006de2:	ee18 1a10 	vmov	r1, s16
 8006de6:	2300      	movs	r3, #0
 8006de8:	220a      	movs	r2, #10
 8006dea:	4620      	mov	r0, r4
 8006dec:	f000 fb16 	bl	800741c <__multadd>
 8006df0:	45b8      	cmp	r8, r7
 8006df2:	ee08 0a10 	vmov	s16, r0
 8006df6:	f04f 0300 	mov.w	r3, #0
 8006dfa:	f04f 020a 	mov.w	r2, #10
 8006dfe:	4641      	mov	r1, r8
 8006e00:	4620      	mov	r0, r4
 8006e02:	d106      	bne.n	8006e12 <_dtoa_r+0xb0a>
 8006e04:	f000 fb0a 	bl	800741c <__multadd>
 8006e08:	4680      	mov	r8, r0
 8006e0a:	4607      	mov	r7, r0
 8006e0c:	f109 0901 	add.w	r9, r9, #1
 8006e10:	e772      	b.n	8006cf8 <_dtoa_r+0x9f0>
 8006e12:	f000 fb03 	bl	800741c <__multadd>
 8006e16:	4639      	mov	r1, r7
 8006e18:	4680      	mov	r8, r0
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	220a      	movs	r2, #10
 8006e1e:	4620      	mov	r0, r4
 8006e20:	f000 fafc 	bl	800741c <__multadd>
 8006e24:	4607      	mov	r7, r0
 8006e26:	e7f1      	b.n	8006e0c <_dtoa_r+0xb04>
 8006e28:	9b03      	ldr	r3, [sp, #12]
 8006e2a:	9302      	str	r3, [sp, #8]
 8006e2c:	9d01      	ldr	r5, [sp, #4]
 8006e2e:	ee18 0a10 	vmov	r0, s16
 8006e32:	4631      	mov	r1, r6
 8006e34:	f7ff f9dc 	bl	80061f0 <quorem>
 8006e38:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006e3c:	9b01      	ldr	r3, [sp, #4]
 8006e3e:	f805 ab01 	strb.w	sl, [r5], #1
 8006e42:	1aea      	subs	r2, r5, r3
 8006e44:	9b02      	ldr	r3, [sp, #8]
 8006e46:	4293      	cmp	r3, r2
 8006e48:	dd09      	ble.n	8006e5e <_dtoa_r+0xb56>
 8006e4a:	ee18 1a10 	vmov	r1, s16
 8006e4e:	2300      	movs	r3, #0
 8006e50:	220a      	movs	r2, #10
 8006e52:	4620      	mov	r0, r4
 8006e54:	f000 fae2 	bl	800741c <__multadd>
 8006e58:	ee08 0a10 	vmov	s16, r0
 8006e5c:	e7e7      	b.n	8006e2e <_dtoa_r+0xb26>
 8006e5e:	9b02      	ldr	r3, [sp, #8]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	bfc8      	it	gt
 8006e64:	461d      	movgt	r5, r3
 8006e66:	9b01      	ldr	r3, [sp, #4]
 8006e68:	bfd8      	it	le
 8006e6a:	2501      	movle	r5, #1
 8006e6c:	441d      	add	r5, r3
 8006e6e:	f04f 0800 	mov.w	r8, #0
 8006e72:	ee18 1a10 	vmov	r1, s16
 8006e76:	2201      	movs	r2, #1
 8006e78:	4620      	mov	r0, r4
 8006e7a:	f000 fc7f 	bl	800777c <__lshift>
 8006e7e:	4631      	mov	r1, r6
 8006e80:	ee08 0a10 	vmov	s16, r0
 8006e84:	f000 fcea 	bl	800785c <__mcmp>
 8006e88:	2800      	cmp	r0, #0
 8006e8a:	dc91      	bgt.n	8006db0 <_dtoa_r+0xaa8>
 8006e8c:	d102      	bne.n	8006e94 <_dtoa_r+0xb8c>
 8006e8e:	f01a 0f01 	tst.w	sl, #1
 8006e92:	d18d      	bne.n	8006db0 <_dtoa_r+0xaa8>
 8006e94:	462b      	mov	r3, r5
 8006e96:	461d      	mov	r5, r3
 8006e98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e9c:	2a30      	cmp	r2, #48	; 0x30
 8006e9e:	d0fa      	beq.n	8006e96 <_dtoa_r+0xb8e>
 8006ea0:	e6d7      	b.n	8006c52 <_dtoa_r+0x94a>
 8006ea2:	9a01      	ldr	r2, [sp, #4]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d184      	bne.n	8006db2 <_dtoa_r+0xaaa>
 8006ea8:	9b00      	ldr	r3, [sp, #0]
 8006eaa:	3301      	adds	r3, #1
 8006eac:	9300      	str	r3, [sp, #0]
 8006eae:	2331      	movs	r3, #49	; 0x31
 8006eb0:	7013      	strb	r3, [r2, #0]
 8006eb2:	e6ce      	b.n	8006c52 <_dtoa_r+0x94a>
 8006eb4:	4b09      	ldr	r3, [pc, #36]	; (8006edc <_dtoa_r+0xbd4>)
 8006eb6:	f7ff ba95 	b.w	80063e4 <_dtoa_r+0xdc>
 8006eba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	f47f aa6e 	bne.w	800639e <_dtoa_r+0x96>
 8006ec2:	4b07      	ldr	r3, [pc, #28]	; (8006ee0 <_dtoa_r+0xbd8>)
 8006ec4:	f7ff ba8e 	b.w	80063e4 <_dtoa_r+0xdc>
 8006ec8:	9b02      	ldr	r3, [sp, #8]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	dcae      	bgt.n	8006e2c <_dtoa_r+0xb24>
 8006ece:	9b06      	ldr	r3, [sp, #24]
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	f73f aea8 	bgt.w	8006c26 <_dtoa_r+0x91e>
 8006ed6:	e7a9      	b.n	8006e2c <_dtoa_r+0xb24>
 8006ed8:	0800845f 	.word	0x0800845f
 8006edc:	080083bc 	.word	0x080083bc
 8006ee0:	080083e0 	.word	0x080083e0

08006ee4 <__sflush_r>:
 8006ee4:	898a      	ldrh	r2, [r1, #12]
 8006ee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eea:	4605      	mov	r5, r0
 8006eec:	0710      	lsls	r0, r2, #28
 8006eee:	460c      	mov	r4, r1
 8006ef0:	d458      	bmi.n	8006fa4 <__sflush_r+0xc0>
 8006ef2:	684b      	ldr	r3, [r1, #4]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	dc05      	bgt.n	8006f04 <__sflush_r+0x20>
 8006ef8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	dc02      	bgt.n	8006f04 <__sflush_r+0x20>
 8006efe:	2000      	movs	r0, #0
 8006f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f06:	2e00      	cmp	r6, #0
 8006f08:	d0f9      	beq.n	8006efe <__sflush_r+0x1a>
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006f10:	682f      	ldr	r7, [r5, #0]
 8006f12:	602b      	str	r3, [r5, #0]
 8006f14:	d032      	beq.n	8006f7c <__sflush_r+0x98>
 8006f16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f18:	89a3      	ldrh	r3, [r4, #12]
 8006f1a:	075a      	lsls	r2, r3, #29
 8006f1c:	d505      	bpl.n	8006f2a <__sflush_r+0x46>
 8006f1e:	6863      	ldr	r3, [r4, #4]
 8006f20:	1ac0      	subs	r0, r0, r3
 8006f22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f24:	b10b      	cbz	r3, 8006f2a <__sflush_r+0x46>
 8006f26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f28:	1ac0      	subs	r0, r0, r3
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f30:	6a21      	ldr	r1, [r4, #32]
 8006f32:	4628      	mov	r0, r5
 8006f34:	47b0      	blx	r6
 8006f36:	1c43      	adds	r3, r0, #1
 8006f38:	89a3      	ldrh	r3, [r4, #12]
 8006f3a:	d106      	bne.n	8006f4a <__sflush_r+0x66>
 8006f3c:	6829      	ldr	r1, [r5, #0]
 8006f3e:	291d      	cmp	r1, #29
 8006f40:	d82c      	bhi.n	8006f9c <__sflush_r+0xb8>
 8006f42:	4a2a      	ldr	r2, [pc, #168]	; (8006fec <__sflush_r+0x108>)
 8006f44:	40ca      	lsrs	r2, r1
 8006f46:	07d6      	lsls	r6, r2, #31
 8006f48:	d528      	bpl.n	8006f9c <__sflush_r+0xb8>
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	6062      	str	r2, [r4, #4]
 8006f4e:	04d9      	lsls	r1, r3, #19
 8006f50:	6922      	ldr	r2, [r4, #16]
 8006f52:	6022      	str	r2, [r4, #0]
 8006f54:	d504      	bpl.n	8006f60 <__sflush_r+0x7c>
 8006f56:	1c42      	adds	r2, r0, #1
 8006f58:	d101      	bne.n	8006f5e <__sflush_r+0x7a>
 8006f5a:	682b      	ldr	r3, [r5, #0]
 8006f5c:	b903      	cbnz	r3, 8006f60 <__sflush_r+0x7c>
 8006f5e:	6560      	str	r0, [r4, #84]	; 0x54
 8006f60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f62:	602f      	str	r7, [r5, #0]
 8006f64:	2900      	cmp	r1, #0
 8006f66:	d0ca      	beq.n	8006efe <__sflush_r+0x1a>
 8006f68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f6c:	4299      	cmp	r1, r3
 8006f6e:	d002      	beq.n	8006f76 <__sflush_r+0x92>
 8006f70:	4628      	mov	r0, r5
 8006f72:	f000 fd8b 	bl	8007a8c <_free_r>
 8006f76:	2000      	movs	r0, #0
 8006f78:	6360      	str	r0, [r4, #52]	; 0x34
 8006f7a:	e7c1      	b.n	8006f00 <__sflush_r+0x1c>
 8006f7c:	6a21      	ldr	r1, [r4, #32]
 8006f7e:	2301      	movs	r3, #1
 8006f80:	4628      	mov	r0, r5
 8006f82:	47b0      	blx	r6
 8006f84:	1c41      	adds	r1, r0, #1
 8006f86:	d1c7      	bne.n	8006f18 <__sflush_r+0x34>
 8006f88:	682b      	ldr	r3, [r5, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d0c4      	beq.n	8006f18 <__sflush_r+0x34>
 8006f8e:	2b1d      	cmp	r3, #29
 8006f90:	d001      	beq.n	8006f96 <__sflush_r+0xb2>
 8006f92:	2b16      	cmp	r3, #22
 8006f94:	d101      	bne.n	8006f9a <__sflush_r+0xb6>
 8006f96:	602f      	str	r7, [r5, #0]
 8006f98:	e7b1      	b.n	8006efe <__sflush_r+0x1a>
 8006f9a:	89a3      	ldrh	r3, [r4, #12]
 8006f9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fa0:	81a3      	strh	r3, [r4, #12]
 8006fa2:	e7ad      	b.n	8006f00 <__sflush_r+0x1c>
 8006fa4:	690f      	ldr	r7, [r1, #16]
 8006fa6:	2f00      	cmp	r7, #0
 8006fa8:	d0a9      	beq.n	8006efe <__sflush_r+0x1a>
 8006faa:	0793      	lsls	r3, r2, #30
 8006fac:	680e      	ldr	r6, [r1, #0]
 8006fae:	bf08      	it	eq
 8006fb0:	694b      	ldreq	r3, [r1, #20]
 8006fb2:	600f      	str	r7, [r1, #0]
 8006fb4:	bf18      	it	ne
 8006fb6:	2300      	movne	r3, #0
 8006fb8:	eba6 0807 	sub.w	r8, r6, r7
 8006fbc:	608b      	str	r3, [r1, #8]
 8006fbe:	f1b8 0f00 	cmp.w	r8, #0
 8006fc2:	dd9c      	ble.n	8006efe <__sflush_r+0x1a>
 8006fc4:	6a21      	ldr	r1, [r4, #32]
 8006fc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006fc8:	4643      	mov	r3, r8
 8006fca:	463a      	mov	r2, r7
 8006fcc:	4628      	mov	r0, r5
 8006fce:	47b0      	blx	r6
 8006fd0:	2800      	cmp	r0, #0
 8006fd2:	dc06      	bgt.n	8006fe2 <__sflush_r+0xfe>
 8006fd4:	89a3      	ldrh	r3, [r4, #12]
 8006fd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fda:	81a3      	strh	r3, [r4, #12]
 8006fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe0:	e78e      	b.n	8006f00 <__sflush_r+0x1c>
 8006fe2:	4407      	add	r7, r0
 8006fe4:	eba8 0800 	sub.w	r8, r8, r0
 8006fe8:	e7e9      	b.n	8006fbe <__sflush_r+0xda>
 8006fea:	bf00      	nop
 8006fec:	20400001 	.word	0x20400001

08006ff0 <_fflush_r>:
 8006ff0:	b538      	push	{r3, r4, r5, lr}
 8006ff2:	690b      	ldr	r3, [r1, #16]
 8006ff4:	4605      	mov	r5, r0
 8006ff6:	460c      	mov	r4, r1
 8006ff8:	b913      	cbnz	r3, 8007000 <_fflush_r+0x10>
 8006ffa:	2500      	movs	r5, #0
 8006ffc:	4628      	mov	r0, r5
 8006ffe:	bd38      	pop	{r3, r4, r5, pc}
 8007000:	b118      	cbz	r0, 800700a <_fflush_r+0x1a>
 8007002:	6983      	ldr	r3, [r0, #24]
 8007004:	b90b      	cbnz	r3, 800700a <_fflush_r+0x1a>
 8007006:	f000 f887 	bl	8007118 <__sinit>
 800700a:	4b14      	ldr	r3, [pc, #80]	; (800705c <_fflush_r+0x6c>)
 800700c:	429c      	cmp	r4, r3
 800700e:	d11b      	bne.n	8007048 <_fflush_r+0x58>
 8007010:	686c      	ldr	r4, [r5, #4]
 8007012:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d0ef      	beq.n	8006ffa <_fflush_r+0xa>
 800701a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800701c:	07d0      	lsls	r0, r2, #31
 800701e:	d404      	bmi.n	800702a <_fflush_r+0x3a>
 8007020:	0599      	lsls	r1, r3, #22
 8007022:	d402      	bmi.n	800702a <_fflush_r+0x3a>
 8007024:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007026:	f000 f91a 	bl	800725e <__retarget_lock_acquire_recursive>
 800702a:	4628      	mov	r0, r5
 800702c:	4621      	mov	r1, r4
 800702e:	f7ff ff59 	bl	8006ee4 <__sflush_r>
 8007032:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007034:	07da      	lsls	r2, r3, #31
 8007036:	4605      	mov	r5, r0
 8007038:	d4e0      	bmi.n	8006ffc <_fflush_r+0xc>
 800703a:	89a3      	ldrh	r3, [r4, #12]
 800703c:	059b      	lsls	r3, r3, #22
 800703e:	d4dd      	bmi.n	8006ffc <_fflush_r+0xc>
 8007040:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007042:	f000 f90d 	bl	8007260 <__retarget_lock_release_recursive>
 8007046:	e7d9      	b.n	8006ffc <_fflush_r+0xc>
 8007048:	4b05      	ldr	r3, [pc, #20]	; (8007060 <_fflush_r+0x70>)
 800704a:	429c      	cmp	r4, r3
 800704c:	d101      	bne.n	8007052 <_fflush_r+0x62>
 800704e:	68ac      	ldr	r4, [r5, #8]
 8007050:	e7df      	b.n	8007012 <_fflush_r+0x22>
 8007052:	4b04      	ldr	r3, [pc, #16]	; (8007064 <_fflush_r+0x74>)
 8007054:	429c      	cmp	r4, r3
 8007056:	bf08      	it	eq
 8007058:	68ec      	ldreq	r4, [r5, #12]
 800705a:	e7da      	b.n	8007012 <_fflush_r+0x22>
 800705c:	08008490 	.word	0x08008490
 8007060:	080084b0 	.word	0x080084b0
 8007064:	08008470 	.word	0x08008470

08007068 <std>:
 8007068:	2300      	movs	r3, #0
 800706a:	b510      	push	{r4, lr}
 800706c:	4604      	mov	r4, r0
 800706e:	e9c0 3300 	strd	r3, r3, [r0]
 8007072:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007076:	6083      	str	r3, [r0, #8]
 8007078:	8181      	strh	r1, [r0, #12]
 800707a:	6643      	str	r3, [r0, #100]	; 0x64
 800707c:	81c2      	strh	r2, [r0, #14]
 800707e:	6183      	str	r3, [r0, #24]
 8007080:	4619      	mov	r1, r3
 8007082:	2208      	movs	r2, #8
 8007084:	305c      	adds	r0, #92	; 0x5c
 8007086:	f7fe fb5b 	bl	8005740 <memset>
 800708a:	4b05      	ldr	r3, [pc, #20]	; (80070a0 <std+0x38>)
 800708c:	6263      	str	r3, [r4, #36]	; 0x24
 800708e:	4b05      	ldr	r3, [pc, #20]	; (80070a4 <std+0x3c>)
 8007090:	62a3      	str	r3, [r4, #40]	; 0x28
 8007092:	4b05      	ldr	r3, [pc, #20]	; (80070a8 <std+0x40>)
 8007094:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007096:	4b05      	ldr	r3, [pc, #20]	; (80070ac <std+0x44>)
 8007098:	6224      	str	r4, [r4, #32]
 800709a:	6323      	str	r3, [r4, #48]	; 0x30
 800709c:	bd10      	pop	{r4, pc}
 800709e:	bf00      	nop
 80070a0:	08007f21 	.word	0x08007f21
 80070a4:	08007f43 	.word	0x08007f43
 80070a8:	08007f7b 	.word	0x08007f7b
 80070ac:	08007f9f 	.word	0x08007f9f

080070b0 <_cleanup_r>:
 80070b0:	4901      	ldr	r1, [pc, #4]	; (80070b8 <_cleanup_r+0x8>)
 80070b2:	f000 b8af 	b.w	8007214 <_fwalk_reent>
 80070b6:	bf00      	nop
 80070b8:	08006ff1 	.word	0x08006ff1

080070bc <__sfmoreglue>:
 80070bc:	b570      	push	{r4, r5, r6, lr}
 80070be:	2268      	movs	r2, #104	; 0x68
 80070c0:	1e4d      	subs	r5, r1, #1
 80070c2:	4355      	muls	r5, r2
 80070c4:	460e      	mov	r6, r1
 80070c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80070ca:	f000 fd4b 	bl	8007b64 <_malloc_r>
 80070ce:	4604      	mov	r4, r0
 80070d0:	b140      	cbz	r0, 80070e4 <__sfmoreglue+0x28>
 80070d2:	2100      	movs	r1, #0
 80070d4:	e9c0 1600 	strd	r1, r6, [r0]
 80070d8:	300c      	adds	r0, #12
 80070da:	60a0      	str	r0, [r4, #8]
 80070dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80070e0:	f7fe fb2e 	bl	8005740 <memset>
 80070e4:	4620      	mov	r0, r4
 80070e6:	bd70      	pop	{r4, r5, r6, pc}

080070e8 <__sfp_lock_acquire>:
 80070e8:	4801      	ldr	r0, [pc, #4]	; (80070f0 <__sfp_lock_acquire+0x8>)
 80070ea:	f000 b8b8 	b.w	800725e <__retarget_lock_acquire_recursive>
 80070ee:	bf00      	nop
 80070f0:	200003e1 	.word	0x200003e1

080070f4 <__sfp_lock_release>:
 80070f4:	4801      	ldr	r0, [pc, #4]	; (80070fc <__sfp_lock_release+0x8>)
 80070f6:	f000 b8b3 	b.w	8007260 <__retarget_lock_release_recursive>
 80070fa:	bf00      	nop
 80070fc:	200003e1 	.word	0x200003e1

08007100 <__sinit_lock_acquire>:
 8007100:	4801      	ldr	r0, [pc, #4]	; (8007108 <__sinit_lock_acquire+0x8>)
 8007102:	f000 b8ac 	b.w	800725e <__retarget_lock_acquire_recursive>
 8007106:	bf00      	nop
 8007108:	200003e2 	.word	0x200003e2

0800710c <__sinit_lock_release>:
 800710c:	4801      	ldr	r0, [pc, #4]	; (8007114 <__sinit_lock_release+0x8>)
 800710e:	f000 b8a7 	b.w	8007260 <__retarget_lock_release_recursive>
 8007112:	bf00      	nop
 8007114:	200003e2 	.word	0x200003e2

08007118 <__sinit>:
 8007118:	b510      	push	{r4, lr}
 800711a:	4604      	mov	r4, r0
 800711c:	f7ff fff0 	bl	8007100 <__sinit_lock_acquire>
 8007120:	69a3      	ldr	r3, [r4, #24]
 8007122:	b11b      	cbz	r3, 800712c <__sinit+0x14>
 8007124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007128:	f7ff bff0 	b.w	800710c <__sinit_lock_release>
 800712c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007130:	6523      	str	r3, [r4, #80]	; 0x50
 8007132:	4b13      	ldr	r3, [pc, #76]	; (8007180 <__sinit+0x68>)
 8007134:	4a13      	ldr	r2, [pc, #76]	; (8007184 <__sinit+0x6c>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	62a2      	str	r2, [r4, #40]	; 0x28
 800713a:	42a3      	cmp	r3, r4
 800713c:	bf04      	itt	eq
 800713e:	2301      	moveq	r3, #1
 8007140:	61a3      	streq	r3, [r4, #24]
 8007142:	4620      	mov	r0, r4
 8007144:	f000 f820 	bl	8007188 <__sfp>
 8007148:	6060      	str	r0, [r4, #4]
 800714a:	4620      	mov	r0, r4
 800714c:	f000 f81c 	bl	8007188 <__sfp>
 8007150:	60a0      	str	r0, [r4, #8]
 8007152:	4620      	mov	r0, r4
 8007154:	f000 f818 	bl	8007188 <__sfp>
 8007158:	2200      	movs	r2, #0
 800715a:	60e0      	str	r0, [r4, #12]
 800715c:	2104      	movs	r1, #4
 800715e:	6860      	ldr	r0, [r4, #4]
 8007160:	f7ff ff82 	bl	8007068 <std>
 8007164:	68a0      	ldr	r0, [r4, #8]
 8007166:	2201      	movs	r2, #1
 8007168:	2109      	movs	r1, #9
 800716a:	f7ff ff7d 	bl	8007068 <std>
 800716e:	68e0      	ldr	r0, [r4, #12]
 8007170:	2202      	movs	r2, #2
 8007172:	2112      	movs	r1, #18
 8007174:	f7ff ff78 	bl	8007068 <std>
 8007178:	2301      	movs	r3, #1
 800717a:	61a3      	str	r3, [r4, #24]
 800717c:	e7d2      	b.n	8007124 <__sinit+0xc>
 800717e:	bf00      	nop
 8007180:	080083a8 	.word	0x080083a8
 8007184:	080070b1 	.word	0x080070b1

08007188 <__sfp>:
 8007188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800718a:	4607      	mov	r7, r0
 800718c:	f7ff ffac 	bl	80070e8 <__sfp_lock_acquire>
 8007190:	4b1e      	ldr	r3, [pc, #120]	; (800720c <__sfp+0x84>)
 8007192:	681e      	ldr	r6, [r3, #0]
 8007194:	69b3      	ldr	r3, [r6, #24]
 8007196:	b913      	cbnz	r3, 800719e <__sfp+0x16>
 8007198:	4630      	mov	r0, r6
 800719a:	f7ff ffbd 	bl	8007118 <__sinit>
 800719e:	3648      	adds	r6, #72	; 0x48
 80071a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80071a4:	3b01      	subs	r3, #1
 80071a6:	d503      	bpl.n	80071b0 <__sfp+0x28>
 80071a8:	6833      	ldr	r3, [r6, #0]
 80071aa:	b30b      	cbz	r3, 80071f0 <__sfp+0x68>
 80071ac:	6836      	ldr	r6, [r6, #0]
 80071ae:	e7f7      	b.n	80071a0 <__sfp+0x18>
 80071b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80071b4:	b9d5      	cbnz	r5, 80071ec <__sfp+0x64>
 80071b6:	4b16      	ldr	r3, [pc, #88]	; (8007210 <__sfp+0x88>)
 80071b8:	60e3      	str	r3, [r4, #12]
 80071ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80071be:	6665      	str	r5, [r4, #100]	; 0x64
 80071c0:	f000 f84c 	bl	800725c <__retarget_lock_init_recursive>
 80071c4:	f7ff ff96 	bl	80070f4 <__sfp_lock_release>
 80071c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80071cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80071d0:	6025      	str	r5, [r4, #0]
 80071d2:	61a5      	str	r5, [r4, #24]
 80071d4:	2208      	movs	r2, #8
 80071d6:	4629      	mov	r1, r5
 80071d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80071dc:	f7fe fab0 	bl	8005740 <memset>
 80071e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80071e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80071e8:	4620      	mov	r0, r4
 80071ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071ec:	3468      	adds	r4, #104	; 0x68
 80071ee:	e7d9      	b.n	80071a4 <__sfp+0x1c>
 80071f0:	2104      	movs	r1, #4
 80071f2:	4638      	mov	r0, r7
 80071f4:	f7ff ff62 	bl	80070bc <__sfmoreglue>
 80071f8:	4604      	mov	r4, r0
 80071fa:	6030      	str	r0, [r6, #0]
 80071fc:	2800      	cmp	r0, #0
 80071fe:	d1d5      	bne.n	80071ac <__sfp+0x24>
 8007200:	f7ff ff78 	bl	80070f4 <__sfp_lock_release>
 8007204:	230c      	movs	r3, #12
 8007206:	603b      	str	r3, [r7, #0]
 8007208:	e7ee      	b.n	80071e8 <__sfp+0x60>
 800720a:	bf00      	nop
 800720c:	080083a8 	.word	0x080083a8
 8007210:	ffff0001 	.word	0xffff0001

08007214 <_fwalk_reent>:
 8007214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007218:	4606      	mov	r6, r0
 800721a:	4688      	mov	r8, r1
 800721c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007220:	2700      	movs	r7, #0
 8007222:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007226:	f1b9 0901 	subs.w	r9, r9, #1
 800722a:	d505      	bpl.n	8007238 <_fwalk_reent+0x24>
 800722c:	6824      	ldr	r4, [r4, #0]
 800722e:	2c00      	cmp	r4, #0
 8007230:	d1f7      	bne.n	8007222 <_fwalk_reent+0xe>
 8007232:	4638      	mov	r0, r7
 8007234:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007238:	89ab      	ldrh	r3, [r5, #12]
 800723a:	2b01      	cmp	r3, #1
 800723c:	d907      	bls.n	800724e <_fwalk_reent+0x3a>
 800723e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007242:	3301      	adds	r3, #1
 8007244:	d003      	beq.n	800724e <_fwalk_reent+0x3a>
 8007246:	4629      	mov	r1, r5
 8007248:	4630      	mov	r0, r6
 800724a:	47c0      	blx	r8
 800724c:	4307      	orrs	r7, r0
 800724e:	3568      	adds	r5, #104	; 0x68
 8007250:	e7e9      	b.n	8007226 <_fwalk_reent+0x12>
	...

08007254 <_localeconv_r>:
 8007254:	4800      	ldr	r0, [pc, #0]	; (8007258 <_localeconv_r+0x4>)
 8007256:	4770      	bx	lr
 8007258:	20000170 	.word	0x20000170

0800725c <__retarget_lock_init_recursive>:
 800725c:	4770      	bx	lr

0800725e <__retarget_lock_acquire_recursive>:
 800725e:	4770      	bx	lr

08007260 <__retarget_lock_release_recursive>:
 8007260:	4770      	bx	lr

08007262 <__swhatbuf_r>:
 8007262:	b570      	push	{r4, r5, r6, lr}
 8007264:	460e      	mov	r6, r1
 8007266:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800726a:	2900      	cmp	r1, #0
 800726c:	b096      	sub	sp, #88	; 0x58
 800726e:	4614      	mov	r4, r2
 8007270:	461d      	mov	r5, r3
 8007272:	da08      	bge.n	8007286 <__swhatbuf_r+0x24>
 8007274:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007278:	2200      	movs	r2, #0
 800727a:	602a      	str	r2, [r5, #0]
 800727c:	061a      	lsls	r2, r3, #24
 800727e:	d410      	bmi.n	80072a2 <__swhatbuf_r+0x40>
 8007280:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007284:	e00e      	b.n	80072a4 <__swhatbuf_r+0x42>
 8007286:	466a      	mov	r2, sp
 8007288:	f000 ffa0 	bl	80081cc <_fstat_r>
 800728c:	2800      	cmp	r0, #0
 800728e:	dbf1      	blt.n	8007274 <__swhatbuf_r+0x12>
 8007290:	9a01      	ldr	r2, [sp, #4]
 8007292:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007296:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800729a:	425a      	negs	r2, r3
 800729c:	415a      	adcs	r2, r3
 800729e:	602a      	str	r2, [r5, #0]
 80072a0:	e7ee      	b.n	8007280 <__swhatbuf_r+0x1e>
 80072a2:	2340      	movs	r3, #64	; 0x40
 80072a4:	2000      	movs	r0, #0
 80072a6:	6023      	str	r3, [r4, #0]
 80072a8:	b016      	add	sp, #88	; 0x58
 80072aa:	bd70      	pop	{r4, r5, r6, pc}

080072ac <__smakebuf_r>:
 80072ac:	898b      	ldrh	r3, [r1, #12]
 80072ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80072b0:	079d      	lsls	r5, r3, #30
 80072b2:	4606      	mov	r6, r0
 80072b4:	460c      	mov	r4, r1
 80072b6:	d507      	bpl.n	80072c8 <__smakebuf_r+0x1c>
 80072b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80072bc:	6023      	str	r3, [r4, #0]
 80072be:	6123      	str	r3, [r4, #16]
 80072c0:	2301      	movs	r3, #1
 80072c2:	6163      	str	r3, [r4, #20]
 80072c4:	b002      	add	sp, #8
 80072c6:	bd70      	pop	{r4, r5, r6, pc}
 80072c8:	ab01      	add	r3, sp, #4
 80072ca:	466a      	mov	r2, sp
 80072cc:	f7ff ffc9 	bl	8007262 <__swhatbuf_r>
 80072d0:	9900      	ldr	r1, [sp, #0]
 80072d2:	4605      	mov	r5, r0
 80072d4:	4630      	mov	r0, r6
 80072d6:	f000 fc45 	bl	8007b64 <_malloc_r>
 80072da:	b948      	cbnz	r0, 80072f0 <__smakebuf_r+0x44>
 80072dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072e0:	059a      	lsls	r2, r3, #22
 80072e2:	d4ef      	bmi.n	80072c4 <__smakebuf_r+0x18>
 80072e4:	f023 0303 	bic.w	r3, r3, #3
 80072e8:	f043 0302 	orr.w	r3, r3, #2
 80072ec:	81a3      	strh	r3, [r4, #12]
 80072ee:	e7e3      	b.n	80072b8 <__smakebuf_r+0xc>
 80072f0:	4b0d      	ldr	r3, [pc, #52]	; (8007328 <__smakebuf_r+0x7c>)
 80072f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80072f4:	89a3      	ldrh	r3, [r4, #12]
 80072f6:	6020      	str	r0, [r4, #0]
 80072f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072fc:	81a3      	strh	r3, [r4, #12]
 80072fe:	9b00      	ldr	r3, [sp, #0]
 8007300:	6163      	str	r3, [r4, #20]
 8007302:	9b01      	ldr	r3, [sp, #4]
 8007304:	6120      	str	r0, [r4, #16]
 8007306:	b15b      	cbz	r3, 8007320 <__smakebuf_r+0x74>
 8007308:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800730c:	4630      	mov	r0, r6
 800730e:	f000 ff6f 	bl	80081f0 <_isatty_r>
 8007312:	b128      	cbz	r0, 8007320 <__smakebuf_r+0x74>
 8007314:	89a3      	ldrh	r3, [r4, #12]
 8007316:	f023 0303 	bic.w	r3, r3, #3
 800731a:	f043 0301 	orr.w	r3, r3, #1
 800731e:	81a3      	strh	r3, [r4, #12]
 8007320:	89a0      	ldrh	r0, [r4, #12]
 8007322:	4305      	orrs	r5, r0
 8007324:	81a5      	strh	r5, [r4, #12]
 8007326:	e7cd      	b.n	80072c4 <__smakebuf_r+0x18>
 8007328:	080070b1 	.word	0x080070b1

0800732c <malloc>:
 800732c:	4b02      	ldr	r3, [pc, #8]	; (8007338 <malloc+0xc>)
 800732e:	4601      	mov	r1, r0
 8007330:	6818      	ldr	r0, [r3, #0]
 8007332:	f000 bc17 	b.w	8007b64 <_malloc_r>
 8007336:	bf00      	nop
 8007338:	2000001c 	.word	0x2000001c

0800733c <memcpy>:
 800733c:	440a      	add	r2, r1
 800733e:	4291      	cmp	r1, r2
 8007340:	f100 33ff 	add.w	r3, r0, #4294967295
 8007344:	d100      	bne.n	8007348 <memcpy+0xc>
 8007346:	4770      	bx	lr
 8007348:	b510      	push	{r4, lr}
 800734a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800734e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007352:	4291      	cmp	r1, r2
 8007354:	d1f9      	bne.n	800734a <memcpy+0xe>
 8007356:	bd10      	pop	{r4, pc}

08007358 <_Balloc>:
 8007358:	b570      	push	{r4, r5, r6, lr}
 800735a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800735c:	4604      	mov	r4, r0
 800735e:	460d      	mov	r5, r1
 8007360:	b976      	cbnz	r6, 8007380 <_Balloc+0x28>
 8007362:	2010      	movs	r0, #16
 8007364:	f7ff ffe2 	bl	800732c <malloc>
 8007368:	4602      	mov	r2, r0
 800736a:	6260      	str	r0, [r4, #36]	; 0x24
 800736c:	b920      	cbnz	r0, 8007378 <_Balloc+0x20>
 800736e:	4b18      	ldr	r3, [pc, #96]	; (80073d0 <_Balloc+0x78>)
 8007370:	4818      	ldr	r0, [pc, #96]	; (80073d4 <_Balloc+0x7c>)
 8007372:	2166      	movs	r1, #102	; 0x66
 8007374:	f000 feea 	bl	800814c <__assert_func>
 8007378:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800737c:	6006      	str	r6, [r0, #0]
 800737e:	60c6      	str	r6, [r0, #12]
 8007380:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007382:	68f3      	ldr	r3, [r6, #12]
 8007384:	b183      	cbz	r3, 80073a8 <_Balloc+0x50>
 8007386:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800738e:	b9b8      	cbnz	r0, 80073c0 <_Balloc+0x68>
 8007390:	2101      	movs	r1, #1
 8007392:	fa01 f605 	lsl.w	r6, r1, r5
 8007396:	1d72      	adds	r2, r6, #5
 8007398:	0092      	lsls	r2, r2, #2
 800739a:	4620      	mov	r0, r4
 800739c:	f000 fb60 	bl	8007a60 <_calloc_r>
 80073a0:	b160      	cbz	r0, 80073bc <_Balloc+0x64>
 80073a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80073a6:	e00e      	b.n	80073c6 <_Balloc+0x6e>
 80073a8:	2221      	movs	r2, #33	; 0x21
 80073aa:	2104      	movs	r1, #4
 80073ac:	4620      	mov	r0, r4
 80073ae:	f000 fb57 	bl	8007a60 <_calloc_r>
 80073b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073b4:	60f0      	str	r0, [r6, #12]
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d1e4      	bne.n	8007386 <_Balloc+0x2e>
 80073bc:	2000      	movs	r0, #0
 80073be:	bd70      	pop	{r4, r5, r6, pc}
 80073c0:	6802      	ldr	r2, [r0, #0]
 80073c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80073c6:	2300      	movs	r3, #0
 80073c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80073cc:	e7f7      	b.n	80073be <_Balloc+0x66>
 80073ce:	bf00      	nop
 80073d0:	080083ed 	.word	0x080083ed
 80073d4:	080084d0 	.word	0x080084d0

080073d8 <_Bfree>:
 80073d8:	b570      	push	{r4, r5, r6, lr}
 80073da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80073dc:	4605      	mov	r5, r0
 80073de:	460c      	mov	r4, r1
 80073e0:	b976      	cbnz	r6, 8007400 <_Bfree+0x28>
 80073e2:	2010      	movs	r0, #16
 80073e4:	f7ff ffa2 	bl	800732c <malloc>
 80073e8:	4602      	mov	r2, r0
 80073ea:	6268      	str	r0, [r5, #36]	; 0x24
 80073ec:	b920      	cbnz	r0, 80073f8 <_Bfree+0x20>
 80073ee:	4b09      	ldr	r3, [pc, #36]	; (8007414 <_Bfree+0x3c>)
 80073f0:	4809      	ldr	r0, [pc, #36]	; (8007418 <_Bfree+0x40>)
 80073f2:	218a      	movs	r1, #138	; 0x8a
 80073f4:	f000 feaa 	bl	800814c <__assert_func>
 80073f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80073fc:	6006      	str	r6, [r0, #0]
 80073fe:	60c6      	str	r6, [r0, #12]
 8007400:	b13c      	cbz	r4, 8007412 <_Bfree+0x3a>
 8007402:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007404:	6862      	ldr	r2, [r4, #4]
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800740c:	6021      	str	r1, [r4, #0]
 800740e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007412:	bd70      	pop	{r4, r5, r6, pc}
 8007414:	080083ed 	.word	0x080083ed
 8007418:	080084d0 	.word	0x080084d0

0800741c <__multadd>:
 800741c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007420:	690d      	ldr	r5, [r1, #16]
 8007422:	4607      	mov	r7, r0
 8007424:	460c      	mov	r4, r1
 8007426:	461e      	mov	r6, r3
 8007428:	f101 0c14 	add.w	ip, r1, #20
 800742c:	2000      	movs	r0, #0
 800742e:	f8dc 3000 	ldr.w	r3, [ip]
 8007432:	b299      	uxth	r1, r3
 8007434:	fb02 6101 	mla	r1, r2, r1, r6
 8007438:	0c1e      	lsrs	r6, r3, #16
 800743a:	0c0b      	lsrs	r3, r1, #16
 800743c:	fb02 3306 	mla	r3, r2, r6, r3
 8007440:	b289      	uxth	r1, r1
 8007442:	3001      	adds	r0, #1
 8007444:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007448:	4285      	cmp	r5, r0
 800744a:	f84c 1b04 	str.w	r1, [ip], #4
 800744e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007452:	dcec      	bgt.n	800742e <__multadd+0x12>
 8007454:	b30e      	cbz	r6, 800749a <__multadd+0x7e>
 8007456:	68a3      	ldr	r3, [r4, #8]
 8007458:	42ab      	cmp	r3, r5
 800745a:	dc19      	bgt.n	8007490 <__multadd+0x74>
 800745c:	6861      	ldr	r1, [r4, #4]
 800745e:	4638      	mov	r0, r7
 8007460:	3101      	adds	r1, #1
 8007462:	f7ff ff79 	bl	8007358 <_Balloc>
 8007466:	4680      	mov	r8, r0
 8007468:	b928      	cbnz	r0, 8007476 <__multadd+0x5a>
 800746a:	4602      	mov	r2, r0
 800746c:	4b0c      	ldr	r3, [pc, #48]	; (80074a0 <__multadd+0x84>)
 800746e:	480d      	ldr	r0, [pc, #52]	; (80074a4 <__multadd+0x88>)
 8007470:	21b5      	movs	r1, #181	; 0xb5
 8007472:	f000 fe6b 	bl	800814c <__assert_func>
 8007476:	6922      	ldr	r2, [r4, #16]
 8007478:	3202      	adds	r2, #2
 800747a:	f104 010c 	add.w	r1, r4, #12
 800747e:	0092      	lsls	r2, r2, #2
 8007480:	300c      	adds	r0, #12
 8007482:	f7ff ff5b 	bl	800733c <memcpy>
 8007486:	4621      	mov	r1, r4
 8007488:	4638      	mov	r0, r7
 800748a:	f7ff ffa5 	bl	80073d8 <_Bfree>
 800748e:	4644      	mov	r4, r8
 8007490:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007494:	3501      	adds	r5, #1
 8007496:	615e      	str	r6, [r3, #20]
 8007498:	6125      	str	r5, [r4, #16]
 800749a:	4620      	mov	r0, r4
 800749c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074a0:	0800845f 	.word	0x0800845f
 80074a4:	080084d0 	.word	0x080084d0

080074a8 <__hi0bits>:
 80074a8:	0c03      	lsrs	r3, r0, #16
 80074aa:	041b      	lsls	r3, r3, #16
 80074ac:	b9d3      	cbnz	r3, 80074e4 <__hi0bits+0x3c>
 80074ae:	0400      	lsls	r0, r0, #16
 80074b0:	2310      	movs	r3, #16
 80074b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80074b6:	bf04      	itt	eq
 80074b8:	0200      	lsleq	r0, r0, #8
 80074ba:	3308      	addeq	r3, #8
 80074bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80074c0:	bf04      	itt	eq
 80074c2:	0100      	lsleq	r0, r0, #4
 80074c4:	3304      	addeq	r3, #4
 80074c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80074ca:	bf04      	itt	eq
 80074cc:	0080      	lsleq	r0, r0, #2
 80074ce:	3302      	addeq	r3, #2
 80074d0:	2800      	cmp	r0, #0
 80074d2:	db05      	blt.n	80074e0 <__hi0bits+0x38>
 80074d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80074d8:	f103 0301 	add.w	r3, r3, #1
 80074dc:	bf08      	it	eq
 80074de:	2320      	moveq	r3, #32
 80074e0:	4618      	mov	r0, r3
 80074e2:	4770      	bx	lr
 80074e4:	2300      	movs	r3, #0
 80074e6:	e7e4      	b.n	80074b2 <__hi0bits+0xa>

080074e8 <__lo0bits>:
 80074e8:	6803      	ldr	r3, [r0, #0]
 80074ea:	f013 0207 	ands.w	r2, r3, #7
 80074ee:	4601      	mov	r1, r0
 80074f0:	d00b      	beq.n	800750a <__lo0bits+0x22>
 80074f2:	07da      	lsls	r2, r3, #31
 80074f4:	d423      	bmi.n	800753e <__lo0bits+0x56>
 80074f6:	0798      	lsls	r0, r3, #30
 80074f8:	bf49      	itett	mi
 80074fa:	085b      	lsrmi	r3, r3, #1
 80074fc:	089b      	lsrpl	r3, r3, #2
 80074fe:	2001      	movmi	r0, #1
 8007500:	600b      	strmi	r3, [r1, #0]
 8007502:	bf5c      	itt	pl
 8007504:	600b      	strpl	r3, [r1, #0]
 8007506:	2002      	movpl	r0, #2
 8007508:	4770      	bx	lr
 800750a:	b298      	uxth	r0, r3
 800750c:	b9a8      	cbnz	r0, 800753a <__lo0bits+0x52>
 800750e:	0c1b      	lsrs	r3, r3, #16
 8007510:	2010      	movs	r0, #16
 8007512:	b2da      	uxtb	r2, r3
 8007514:	b90a      	cbnz	r2, 800751a <__lo0bits+0x32>
 8007516:	3008      	adds	r0, #8
 8007518:	0a1b      	lsrs	r3, r3, #8
 800751a:	071a      	lsls	r2, r3, #28
 800751c:	bf04      	itt	eq
 800751e:	091b      	lsreq	r3, r3, #4
 8007520:	3004      	addeq	r0, #4
 8007522:	079a      	lsls	r2, r3, #30
 8007524:	bf04      	itt	eq
 8007526:	089b      	lsreq	r3, r3, #2
 8007528:	3002      	addeq	r0, #2
 800752a:	07da      	lsls	r2, r3, #31
 800752c:	d403      	bmi.n	8007536 <__lo0bits+0x4e>
 800752e:	085b      	lsrs	r3, r3, #1
 8007530:	f100 0001 	add.w	r0, r0, #1
 8007534:	d005      	beq.n	8007542 <__lo0bits+0x5a>
 8007536:	600b      	str	r3, [r1, #0]
 8007538:	4770      	bx	lr
 800753a:	4610      	mov	r0, r2
 800753c:	e7e9      	b.n	8007512 <__lo0bits+0x2a>
 800753e:	2000      	movs	r0, #0
 8007540:	4770      	bx	lr
 8007542:	2020      	movs	r0, #32
 8007544:	4770      	bx	lr
	...

08007548 <__i2b>:
 8007548:	b510      	push	{r4, lr}
 800754a:	460c      	mov	r4, r1
 800754c:	2101      	movs	r1, #1
 800754e:	f7ff ff03 	bl	8007358 <_Balloc>
 8007552:	4602      	mov	r2, r0
 8007554:	b928      	cbnz	r0, 8007562 <__i2b+0x1a>
 8007556:	4b05      	ldr	r3, [pc, #20]	; (800756c <__i2b+0x24>)
 8007558:	4805      	ldr	r0, [pc, #20]	; (8007570 <__i2b+0x28>)
 800755a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800755e:	f000 fdf5 	bl	800814c <__assert_func>
 8007562:	2301      	movs	r3, #1
 8007564:	6144      	str	r4, [r0, #20]
 8007566:	6103      	str	r3, [r0, #16]
 8007568:	bd10      	pop	{r4, pc}
 800756a:	bf00      	nop
 800756c:	0800845f 	.word	0x0800845f
 8007570:	080084d0 	.word	0x080084d0

08007574 <__multiply>:
 8007574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007578:	4691      	mov	r9, r2
 800757a:	690a      	ldr	r2, [r1, #16]
 800757c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007580:	429a      	cmp	r2, r3
 8007582:	bfb8      	it	lt
 8007584:	460b      	movlt	r3, r1
 8007586:	460c      	mov	r4, r1
 8007588:	bfbc      	itt	lt
 800758a:	464c      	movlt	r4, r9
 800758c:	4699      	movlt	r9, r3
 800758e:	6927      	ldr	r7, [r4, #16]
 8007590:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007594:	68a3      	ldr	r3, [r4, #8]
 8007596:	6861      	ldr	r1, [r4, #4]
 8007598:	eb07 060a 	add.w	r6, r7, sl
 800759c:	42b3      	cmp	r3, r6
 800759e:	b085      	sub	sp, #20
 80075a0:	bfb8      	it	lt
 80075a2:	3101      	addlt	r1, #1
 80075a4:	f7ff fed8 	bl	8007358 <_Balloc>
 80075a8:	b930      	cbnz	r0, 80075b8 <__multiply+0x44>
 80075aa:	4602      	mov	r2, r0
 80075ac:	4b44      	ldr	r3, [pc, #272]	; (80076c0 <__multiply+0x14c>)
 80075ae:	4845      	ldr	r0, [pc, #276]	; (80076c4 <__multiply+0x150>)
 80075b0:	f240 115d 	movw	r1, #349	; 0x15d
 80075b4:	f000 fdca 	bl	800814c <__assert_func>
 80075b8:	f100 0514 	add.w	r5, r0, #20
 80075bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80075c0:	462b      	mov	r3, r5
 80075c2:	2200      	movs	r2, #0
 80075c4:	4543      	cmp	r3, r8
 80075c6:	d321      	bcc.n	800760c <__multiply+0x98>
 80075c8:	f104 0314 	add.w	r3, r4, #20
 80075cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80075d0:	f109 0314 	add.w	r3, r9, #20
 80075d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80075d8:	9202      	str	r2, [sp, #8]
 80075da:	1b3a      	subs	r2, r7, r4
 80075dc:	3a15      	subs	r2, #21
 80075de:	f022 0203 	bic.w	r2, r2, #3
 80075e2:	3204      	adds	r2, #4
 80075e4:	f104 0115 	add.w	r1, r4, #21
 80075e8:	428f      	cmp	r7, r1
 80075ea:	bf38      	it	cc
 80075ec:	2204      	movcc	r2, #4
 80075ee:	9201      	str	r2, [sp, #4]
 80075f0:	9a02      	ldr	r2, [sp, #8]
 80075f2:	9303      	str	r3, [sp, #12]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d80c      	bhi.n	8007612 <__multiply+0x9e>
 80075f8:	2e00      	cmp	r6, #0
 80075fa:	dd03      	ble.n	8007604 <__multiply+0x90>
 80075fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007600:	2b00      	cmp	r3, #0
 8007602:	d05a      	beq.n	80076ba <__multiply+0x146>
 8007604:	6106      	str	r6, [r0, #16]
 8007606:	b005      	add	sp, #20
 8007608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800760c:	f843 2b04 	str.w	r2, [r3], #4
 8007610:	e7d8      	b.n	80075c4 <__multiply+0x50>
 8007612:	f8b3 a000 	ldrh.w	sl, [r3]
 8007616:	f1ba 0f00 	cmp.w	sl, #0
 800761a:	d024      	beq.n	8007666 <__multiply+0xf2>
 800761c:	f104 0e14 	add.w	lr, r4, #20
 8007620:	46a9      	mov	r9, r5
 8007622:	f04f 0c00 	mov.w	ip, #0
 8007626:	f85e 2b04 	ldr.w	r2, [lr], #4
 800762a:	f8d9 1000 	ldr.w	r1, [r9]
 800762e:	fa1f fb82 	uxth.w	fp, r2
 8007632:	b289      	uxth	r1, r1
 8007634:	fb0a 110b 	mla	r1, sl, fp, r1
 8007638:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800763c:	f8d9 2000 	ldr.w	r2, [r9]
 8007640:	4461      	add	r1, ip
 8007642:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007646:	fb0a c20b 	mla	r2, sl, fp, ip
 800764a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800764e:	b289      	uxth	r1, r1
 8007650:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007654:	4577      	cmp	r7, lr
 8007656:	f849 1b04 	str.w	r1, [r9], #4
 800765a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800765e:	d8e2      	bhi.n	8007626 <__multiply+0xb2>
 8007660:	9a01      	ldr	r2, [sp, #4]
 8007662:	f845 c002 	str.w	ip, [r5, r2]
 8007666:	9a03      	ldr	r2, [sp, #12]
 8007668:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800766c:	3304      	adds	r3, #4
 800766e:	f1b9 0f00 	cmp.w	r9, #0
 8007672:	d020      	beq.n	80076b6 <__multiply+0x142>
 8007674:	6829      	ldr	r1, [r5, #0]
 8007676:	f104 0c14 	add.w	ip, r4, #20
 800767a:	46ae      	mov	lr, r5
 800767c:	f04f 0a00 	mov.w	sl, #0
 8007680:	f8bc b000 	ldrh.w	fp, [ip]
 8007684:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007688:	fb09 220b 	mla	r2, r9, fp, r2
 800768c:	4492      	add	sl, r2
 800768e:	b289      	uxth	r1, r1
 8007690:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007694:	f84e 1b04 	str.w	r1, [lr], #4
 8007698:	f85c 2b04 	ldr.w	r2, [ip], #4
 800769c:	f8be 1000 	ldrh.w	r1, [lr]
 80076a0:	0c12      	lsrs	r2, r2, #16
 80076a2:	fb09 1102 	mla	r1, r9, r2, r1
 80076a6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80076aa:	4567      	cmp	r7, ip
 80076ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80076b0:	d8e6      	bhi.n	8007680 <__multiply+0x10c>
 80076b2:	9a01      	ldr	r2, [sp, #4]
 80076b4:	50a9      	str	r1, [r5, r2]
 80076b6:	3504      	adds	r5, #4
 80076b8:	e79a      	b.n	80075f0 <__multiply+0x7c>
 80076ba:	3e01      	subs	r6, #1
 80076bc:	e79c      	b.n	80075f8 <__multiply+0x84>
 80076be:	bf00      	nop
 80076c0:	0800845f 	.word	0x0800845f
 80076c4:	080084d0 	.word	0x080084d0

080076c8 <__pow5mult>:
 80076c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076cc:	4615      	mov	r5, r2
 80076ce:	f012 0203 	ands.w	r2, r2, #3
 80076d2:	4606      	mov	r6, r0
 80076d4:	460f      	mov	r7, r1
 80076d6:	d007      	beq.n	80076e8 <__pow5mult+0x20>
 80076d8:	4c25      	ldr	r4, [pc, #148]	; (8007770 <__pow5mult+0xa8>)
 80076da:	3a01      	subs	r2, #1
 80076dc:	2300      	movs	r3, #0
 80076de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80076e2:	f7ff fe9b 	bl	800741c <__multadd>
 80076e6:	4607      	mov	r7, r0
 80076e8:	10ad      	asrs	r5, r5, #2
 80076ea:	d03d      	beq.n	8007768 <__pow5mult+0xa0>
 80076ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80076ee:	b97c      	cbnz	r4, 8007710 <__pow5mult+0x48>
 80076f0:	2010      	movs	r0, #16
 80076f2:	f7ff fe1b 	bl	800732c <malloc>
 80076f6:	4602      	mov	r2, r0
 80076f8:	6270      	str	r0, [r6, #36]	; 0x24
 80076fa:	b928      	cbnz	r0, 8007708 <__pow5mult+0x40>
 80076fc:	4b1d      	ldr	r3, [pc, #116]	; (8007774 <__pow5mult+0xac>)
 80076fe:	481e      	ldr	r0, [pc, #120]	; (8007778 <__pow5mult+0xb0>)
 8007700:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007704:	f000 fd22 	bl	800814c <__assert_func>
 8007708:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800770c:	6004      	str	r4, [r0, #0]
 800770e:	60c4      	str	r4, [r0, #12]
 8007710:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007714:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007718:	b94c      	cbnz	r4, 800772e <__pow5mult+0x66>
 800771a:	f240 2171 	movw	r1, #625	; 0x271
 800771e:	4630      	mov	r0, r6
 8007720:	f7ff ff12 	bl	8007548 <__i2b>
 8007724:	2300      	movs	r3, #0
 8007726:	f8c8 0008 	str.w	r0, [r8, #8]
 800772a:	4604      	mov	r4, r0
 800772c:	6003      	str	r3, [r0, #0]
 800772e:	f04f 0900 	mov.w	r9, #0
 8007732:	07eb      	lsls	r3, r5, #31
 8007734:	d50a      	bpl.n	800774c <__pow5mult+0x84>
 8007736:	4639      	mov	r1, r7
 8007738:	4622      	mov	r2, r4
 800773a:	4630      	mov	r0, r6
 800773c:	f7ff ff1a 	bl	8007574 <__multiply>
 8007740:	4639      	mov	r1, r7
 8007742:	4680      	mov	r8, r0
 8007744:	4630      	mov	r0, r6
 8007746:	f7ff fe47 	bl	80073d8 <_Bfree>
 800774a:	4647      	mov	r7, r8
 800774c:	106d      	asrs	r5, r5, #1
 800774e:	d00b      	beq.n	8007768 <__pow5mult+0xa0>
 8007750:	6820      	ldr	r0, [r4, #0]
 8007752:	b938      	cbnz	r0, 8007764 <__pow5mult+0x9c>
 8007754:	4622      	mov	r2, r4
 8007756:	4621      	mov	r1, r4
 8007758:	4630      	mov	r0, r6
 800775a:	f7ff ff0b 	bl	8007574 <__multiply>
 800775e:	6020      	str	r0, [r4, #0]
 8007760:	f8c0 9000 	str.w	r9, [r0]
 8007764:	4604      	mov	r4, r0
 8007766:	e7e4      	b.n	8007732 <__pow5mult+0x6a>
 8007768:	4638      	mov	r0, r7
 800776a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800776e:	bf00      	nop
 8007770:	08008620 	.word	0x08008620
 8007774:	080083ed 	.word	0x080083ed
 8007778:	080084d0 	.word	0x080084d0

0800777c <__lshift>:
 800777c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007780:	460c      	mov	r4, r1
 8007782:	6849      	ldr	r1, [r1, #4]
 8007784:	6923      	ldr	r3, [r4, #16]
 8007786:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800778a:	68a3      	ldr	r3, [r4, #8]
 800778c:	4607      	mov	r7, r0
 800778e:	4691      	mov	r9, r2
 8007790:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007794:	f108 0601 	add.w	r6, r8, #1
 8007798:	42b3      	cmp	r3, r6
 800779a:	db0b      	blt.n	80077b4 <__lshift+0x38>
 800779c:	4638      	mov	r0, r7
 800779e:	f7ff fddb 	bl	8007358 <_Balloc>
 80077a2:	4605      	mov	r5, r0
 80077a4:	b948      	cbnz	r0, 80077ba <__lshift+0x3e>
 80077a6:	4602      	mov	r2, r0
 80077a8:	4b2a      	ldr	r3, [pc, #168]	; (8007854 <__lshift+0xd8>)
 80077aa:	482b      	ldr	r0, [pc, #172]	; (8007858 <__lshift+0xdc>)
 80077ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 80077b0:	f000 fccc 	bl	800814c <__assert_func>
 80077b4:	3101      	adds	r1, #1
 80077b6:	005b      	lsls	r3, r3, #1
 80077b8:	e7ee      	b.n	8007798 <__lshift+0x1c>
 80077ba:	2300      	movs	r3, #0
 80077bc:	f100 0114 	add.w	r1, r0, #20
 80077c0:	f100 0210 	add.w	r2, r0, #16
 80077c4:	4618      	mov	r0, r3
 80077c6:	4553      	cmp	r3, sl
 80077c8:	db37      	blt.n	800783a <__lshift+0xbe>
 80077ca:	6920      	ldr	r0, [r4, #16]
 80077cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80077d0:	f104 0314 	add.w	r3, r4, #20
 80077d4:	f019 091f 	ands.w	r9, r9, #31
 80077d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80077dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80077e0:	d02f      	beq.n	8007842 <__lshift+0xc6>
 80077e2:	f1c9 0e20 	rsb	lr, r9, #32
 80077e6:	468a      	mov	sl, r1
 80077e8:	f04f 0c00 	mov.w	ip, #0
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	fa02 f209 	lsl.w	r2, r2, r9
 80077f2:	ea42 020c 	orr.w	r2, r2, ip
 80077f6:	f84a 2b04 	str.w	r2, [sl], #4
 80077fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80077fe:	4298      	cmp	r0, r3
 8007800:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007804:	d8f2      	bhi.n	80077ec <__lshift+0x70>
 8007806:	1b03      	subs	r3, r0, r4
 8007808:	3b15      	subs	r3, #21
 800780a:	f023 0303 	bic.w	r3, r3, #3
 800780e:	3304      	adds	r3, #4
 8007810:	f104 0215 	add.w	r2, r4, #21
 8007814:	4290      	cmp	r0, r2
 8007816:	bf38      	it	cc
 8007818:	2304      	movcc	r3, #4
 800781a:	f841 c003 	str.w	ip, [r1, r3]
 800781e:	f1bc 0f00 	cmp.w	ip, #0
 8007822:	d001      	beq.n	8007828 <__lshift+0xac>
 8007824:	f108 0602 	add.w	r6, r8, #2
 8007828:	3e01      	subs	r6, #1
 800782a:	4638      	mov	r0, r7
 800782c:	612e      	str	r6, [r5, #16]
 800782e:	4621      	mov	r1, r4
 8007830:	f7ff fdd2 	bl	80073d8 <_Bfree>
 8007834:	4628      	mov	r0, r5
 8007836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800783a:	f842 0f04 	str.w	r0, [r2, #4]!
 800783e:	3301      	adds	r3, #1
 8007840:	e7c1      	b.n	80077c6 <__lshift+0x4a>
 8007842:	3904      	subs	r1, #4
 8007844:	f853 2b04 	ldr.w	r2, [r3], #4
 8007848:	f841 2f04 	str.w	r2, [r1, #4]!
 800784c:	4298      	cmp	r0, r3
 800784e:	d8f9      	bhi.n	8007844 <__lshift+0xc8>
 8007850:	e7ea      	b.n	8007828 <__lshift+0xac>
 8007852:	bf00      	nop
 8007854:	0800845f 	.word	0x0800845f
 8007858:	080084d0 	.word	0x080084d0

0800785c <__mcmp>:
 800785c:	b530      	push	{r4, r5, lr}
 800785e:	6902      	ldr	r2, [r0, #16]
 8007860:	690c      	ldr	r4, [r1, #16]
 8007862:	1b12      	subs	r2, r2, r4
 8007864:	d10e      	bne.n	8007884 <__mcmp+0x28>
 8007866:	f100 0314 	add.w	r3, r0, #20
 800786a:	3114      	adds	r1, #20
 800786c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007870:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007874:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007878:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800787c:	42a5      	cmp	r5, r4
 800787e:	d003      	beq.n	8007888 <__mcmp+0x2c>
 8007880:	d305      	bcc.n	800788e <__mcmp+0x32>
 8007882:	2201      	movs	r2, #1
 8007884:	4610      	mov	r0, r2
 8007886:	bd30      	pop	{r4, r5, pc}
 8007888:	4283      	cmp	r3, r0
 800788a:	d3f3      	bcc.n	8007874 <__mcmp+0x18>
 800788c:	e7fa      	b.n	8007884 <__mcmp+0x28>
 800788e:	f04f 32ff 	mov.w	r2, #4294967295
 8007892:	e7f7      	b.n	8007884 <__mcmp+0x28>

08007894 <__mdiff>:
 8007894:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007898:	460c      	mov	r4, r1
 800789a:	4606      	mov	r6, r0
 800789c:	4611      	mov	r1, r2
 800789e:	4620      	mov	r0, r4
 80078a0:	4690      	mov	r8, r2
 80078a2:	f7ff ffdb 	bl	800785c <__mcmp>
 80078a6:	1e05      	subs	r5, r0, #0
 80078a8:	d110      	bne.n	80078cc <__mdiff+0x38>
 80078aa:	4629      	mov	r1, r5
 80078ac:	4630      	mov	r0, r6
 80078ae:	f7ff fd53 	bl	8007358 <_Balloc>
 80078b2:	b930      	cbnz	r0, 80078c2 <__mdiff+0x2e>
 80078b4:	4b3a      	ldr	r3, [pc, #232]	; (80079a0 <__mdiff+0x10c>)
 80078b6:	4602      	mov	r2, r0
 80078b8:	f240 2132 	movw	r1, #562	; 0x232
 80078bc:	4839      	ldr	r0, [pc, #228]	; (80079a4 <__mdiff+0x110>)
 80078be:	f000 fc45 	bl	800814c <__assert_func>
 80078c2:	2301      	movs	r3, #1
 80078c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80078c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078cc:	bfa4      	itt	ge
 80078ce:	4643      	movge	r3, r8
 80078d0:	46a0      	movge	r8, r4
 80078d2:	4630      	mov	r0, r6
 80078d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80078d8:	bfa6      	itte	ge
 80078da:	461c      	movge	r4, r3
 80078dc:	2500      	movge	r5, #0
 80078de:	2501      	movlt	r5, #1
 80078e0:	f7ff fd3a 	bl	8007358 <_Balloc>
 80078e4:	b920      	cbnz	r0, 80078f0 <__mdiff+0x5c>
 80078e6:	4b2e      	ldr	r3, [pc, #184]	; (80079a0 <__mdiff+0x10c>)
 80078e8:	4602      	mov	r2, r0
 80078ea:	f44f 7110 	mov.w	r1, #576	; 0x240
 80078ee:	e7e5      	b.n	80078bc <__mdiff+0x28>
 80078f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80078f4:	6926      	ldr	r6, [r4, #16]
 80078f6:	60c5      	str	r5, [r0, #12]
 80078f8:	f104 0914 	add.w	r9, r4, #20
 80078fc:	f108 0514 	add.w	r5, r8, #20
 8007900:	f100 0e14 	add.w	lr, r0, #20
 8007904:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007908:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800790c:	f108 0210 	add.w	r2, r8, #16
 8007910:	46f2      	mov	sl, lr
 8007912:	2100      	movs	r1, #0
 8007914:	f859 3b04 	ldr.w	r3, [r9], #4
 8007918:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800791c:	fa1f f883 	uxth.w	r8, r3
 8007920:	fa11 f18b 	uxtah	r1, r1, fp
 8007924:	0c1b      	lsrs	r3, r3, #16
 8007926:	eba1 0808 	sub.w	r8, r1, r8
 800792a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800792e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007932:	fa1f f888 	uxth.w	r8, r8
 8007936:	1419      	asrs	r1, r3, #16
 8007938:	454e      	cmp	r6, r9
 800793a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800793e:	f84a 3b04 	str.w	r3, [sl], #4
 8007942:	d8e7      	bhi.n	8007914 <__mdiff+0x80>
 8007944:	1b33      	subs	r3, r6, r4
 8007946:	3b15      	subs	r3, #21
 8007948:	f023 0303 	bic.w	r3, r3, #3
 800794c:	3304      	adds	r3, #4
 800794e:	3415      	adds	r4, #21
 8007950:	42a6      	cmp	r6, r4
 8007952:	bf38      	it	cc
 8007954:	2304      	movcc	r3, #4
 8007956:	441d      	add	r5, r3
 8007958:	4473      	add	r3, lr
 800795a:	469e      	mov	lr, r3
 800795c:	462e      	mov	r6, r5
 800795e:	4566      	cmp	r6, ip
 8007960:	d30e      	bcc.n	8007980 <__mdiff+0xec>
 8007962:	f10c 0203 	add.w	r2, ip, #3
 8007966:	1b52      	subs	r2, r2, r5
 8007968:	f022 0203 	bic.w	r2, r2, #3
 800796c:	3d03      	subs	r5, #3
 800796e:	45ac      	cmp	ip, r5
 8007970:	bf38      	it	cc
 8007972:	2200      	movcc	r2, #0
 8007974:	441a      	add	r2, r3
 8007976:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800797a:	b17b      	cbz	r3, 800799c <__mdiff+0x108>
 800797c:	6107      	str	r7, [r0, #16]
 800797e:	e7a3      	b.n	80078c8 <__mdiff+0x34>
 8007980:	f856 8b04 	ldr.w	r8, [r6], #4
 8007984:	fa11 f288 	uxtah	r2, r1, r8
 8007988:	1414      	asrs	r4, r2, #16
 800798a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800798e:	b292      	uxth	r2, r2
 8007990:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007994:	f84e 2b04 	str.w	r2, [lr], #4
 8007998:	1421      	asrs	r1, r4, #16
 800799a:	e7e0      	b.n	800795e <__mdiff+0xca>
 800799c:	3f01      	subs	r7, #1
 800799e:	e7ea      	b.n	8007976 <__mdiff+0xe2>
 80079a0:	0800845f 	.word	0x0800845f
 80079a4:	080084d0 	.word	0x080084d0

080079a8 <__d2b>:
 80079a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80079ac:	4689      	mov	r9, r1
 80079ae:	2101      	movs	r1, #1
 80079b0:	ec57 6b10 	vmov	r6, r7, d0
 80079b4:	4690      	mov	r8, r2
 80079b6:	f7ff fccf 	bl	8007358 <_Balloc>
 80079ba:	4604      	mov	r4, r0
 80079bc:	b930      	cbnz	r0, 80079cc <__d2b+0x24>
 80079be:	4602      	mov	r2, r0
 80079c0:	4b25      	ldr	r3, [pc, #148]	; (8007a58 <__d2b+0xb0>)
 80079c2:	4826      	ldr	r0, [pc, #152]	; (8007a5c <__d2b+0xb4>)
 80079c4:	f240 310a 	movw	r1, #778	; 0x30a
 80079c8:	f000 fbc0 	bl	800814c <__assert_func>
 80079cc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80079d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80079d4:	bb35      	cbnz	r5, 8007a24 <__d2b+0x7c>
 80079d6:	2e00      	cmp	r6, #0
 80079d8:	9301      	str	r3, [sp, #4]
 80079da:	d028      	beq.n	8007a2e <__d2b+0x86>
 80079dc:	4668      	mov	r0, sp
 80079de:	9600      	str	r6, [sp, #0]
 80079e0:	f7ff fd82 	bl	80074e8 <__lo0bits>
 80079e4:	9900      	ldr	r1, [sp, #0]
 80079e6:	b300      	cbz	r0, 8007a2a <__d2b+0x82>
 80079e8:	9a01      	ldr	r2, [sp, #4]
 80079ea:	f1c0 0320 	rsb	r3, r0, #32
 80079ee:	fa02 f303 	lsl.w	r3, r2, r3
 80079f2:	430b      	orrs	r3, r1
 80079f4:	40c2      	lsrs	r2, r0
 80079f6:	6163      	str	r3, [r4, #20]
 80079f8:	9201      	str	r2, [sp, #4]
 80079fa:	9b01      	ldr	r3, [sp, #4]
 80079fc:	61a3      	str	r3, [r4, #24]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	bf14      	ite	ne
 8007a02:	2202      	movne	r2, #2
 8007a04:	2201      	moveq	r2, #1
 8007a06:	6122      	str	r2, [r4, #16]
 8007a08:	b1d5      	cbz	r5, 8007a40 <__d2b+0x98>
 8007a0a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007a0e:	4405      	add	r5, r0
 8007a10:	f8c9 5000 	str.w	r5, [r9]
 8007a14:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007a18:	f8c8 0000 	str.w	r0, [r8]
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	b003      	add	sp, #12
 8007a20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a28:	e7d5      	b.n	80079d6 <__d2b+0x2e>
 8007a2a:	6161      	str	r1, [r4, #20]
 8007a2c:	e7e5      	b.n	80079fa <__d2b+0x52>
 8007a2e:	a801      	add	r0, sp, #4
 8007a30:	f7ff fd5a 	bl	80074e8 <__lo0bits>
 8007a34:	9b01      	ldr	r3, [sp, #4]
 8007a36:	6163      	str	r3, [r4, #20]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	6122      	str	r2, [r4, #16]
 8007a3c:	3020      	adds	r0, #32
 8007a3e:	e7e3      	b.n	8007a08 <__d2b+0x60>
 8007a40:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007a44:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007a48:	f8c9 0000 	str.w	r0, [r9]
 8007a4c:	6918      	ldr	r0, [r3, #16]
 8007a4e:	f7ff fd2b 	bl	80074a8 <__hi0bits>
 8007a52:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007a56:	e7df      	b.n	8007a18 <__d2b+0x70>
 8007a58:	0800845f 	.word	0x0800845f
 8007a5c:	080084d0 	.word	0x080084d0

08007a60 <_calloc_r>:
 8007a60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a62:	fba1 2402 	umull	r2, r4, r1, r2
 8007a66:	b94c      	cbnz	r4, 8007a7c <_calloc_r+0x1c>
 8007a68:	4611      	mov	r1, r2
 8007a6a:	9201      	str	r2, [sp, #4]
 8007a6c:	f000 f87a 	bl	8007b64 <_malloc_r>
 8007a70:	9a01      	ldr	r2, [sp, #4]
 8007a72:	4605      	mov	r5, r0
 8007a74:	b930      	cbnz	r0, 8007a84 <_calloc_r+0x24>
 8007a76:	4628      	mov	r0, r5
 8007a78:	b003      	add	sp, #12
 8007a7a:	bd30      	pop	{r4, r5, pc}
 8007a7c:	220c      	movs	r2, #12
 8007a7e:	6002      	str	r2, [r0, #0]
 8007a80:	2500      	movs	r5, #0
 8007a82:	e7f8      	b.n	8007a76 <_calloc_r+0x16>
 8007a84:	4621      	mov	r1, r4
 8007a86:	f7fd fe5b 	bl	8005740 <memset>
 8007a8a:	e7f4      	b.n	8007a76 <_calloc_r+0x16>

08007a8c <_free_r>:
 8007a8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a8e:	2900      	cmp	r1, #0
 8007a90:	d044      	beq.n	8007b1c <_free_r+0x90>
 8007a92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a96:	9001      	str	r0, [sp, #4]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f1a1 0404 	sub.w	r4, r1, #4
 8007a9e:	bfb8      	it	lt
 8007aa0:	18e4      	addlt	r4, r4, r3
 8007aa2:	f000 fbd9 	bl	8008258 <__malloc_lock>
 8007aa6:	4a1e      	ldr	r2, [pc, #120]	; (8007b20 <_free_r+0x94>)
 8007aa8:	9801      	ldr	r0, [sp, #4]
 8007aaa:	6813      	ldr	r3, [r2, #0]
 8007aac:	b933      	cbnz	r3, 8007abc <_free_r+0x30>
 8007aae:	6063      	str	r3, [r4, #4]
 8007ab0:	6014      	str	r4, [r2, #0]
 8007ab2:	b003      	add	sp, #12
 8007ab4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ab8:	f000 bbd4 	b.w	8008264 <__malloc_unlock>
 8007abc:	42a3      	cmp	r3, r4
 8007abe:	d908      	bls.n	8007ad2 <_free_r+0x46>
 8007ac0:	6825      	ldr	r5, [r4, #0]
 8007ac2:	1961      	adds	r1, r4, r5
 8007ac4:	428b      	cmp	r3, r1
 8007ac6:	bf01      	itttt	eq
 8007ac8:	6819      	ldreq	r1, [r3, #0]
 8007aca:	685b      	ldreq	r3, [r3, #4]
 8007acc:	1949      	addeq	r1, r1, r5
 8007ace:	6021      	streq	r1, [r4, #0]
 8007ad0:	e7ed      	b.n	8007aae <_free_r+0x22>
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	b10b      	cbz	r3, 8007adc <_free_r+0x50>
 8007ad8:	42a3      	cmp	r3, r4
 8007ada:	d9fa      	bls.n	8007ad2 <_free_r+0x46>
 8007adc:	6811      	ldr	r1, [r2, #0]
 8007ade:	1855      	adds	r5, r2, r1
 8007ae0:	42a5      	cmp	r5, r4
 8007ae2:	d10b      	bne.n	8007afc <_free_r+0x70>
 8007ae4:	6824      	ldr	r4, [r4, #0]
 8007ae6:	4421      	add	r1, r4
 8007ae8:	1854      	adds	r4, r2, r1
 8007aea:	42a3      	cmp	r3, r4
 8007aec:	6011      	str	r1, [r2, #0]
 8007aee:	d1e0      	bne.n	8007ab2 <_free_r+0x26>
 8007af0:	681c      	ldr	r4, [r3, #0]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	6053      	str	r3, [r2, #4]
 8007af6:	4421      	add	r1, r4
 8007af8:	6011      	str	r1, [r2, #0]
 8007afa:	e7da      	b.n	8007ab2 <_free_r+0x26>
 8007afc:	d902      	bls.n	8007b04 <_free_r+0x78>
 8007afe:	230c      	movs	r3, #12
 8007b00:	6003      	str	r3, [r0, #0]
 8007b02:	e7d6      	b.n	8007ab2 <_free_r+0x26>
 8007b04:	6825      	ldr	r5, [r4, #0]
 8007b06:	1961      	adds	r1, r4, r5
 8007b08:	428b      	cmp	r3, r1
 8007b0a:	bf04      	itt	eq
 8007b0c:	6819      	ldreq	r1, [r3, #0]
 8007b0e:	685b      	ldreq	r3, [r3, #4]
 8007b10:	6063      	str	r3, [r4, #4]
 8007b12:	bf04      	itt	eq
 8007b14:	1949      	addeq	r1, r1, r5
 8007b16:	6021      	streq	r1, [r4, #0]
 8007b18:	6054      	str	r4, [r2, #4]
 8007b1a:	e7ca      	b.n	8007ab2 <_free_r+0x26>
 8007b1c:	b003      	add	sp, #12
 8007b1e:	bd30      	pop	{r4, r5, pc}
 8007b20:	200003e4 	.word	0x200003e4

08007b24 <sbrk_aligned>:
 8007b24:	b570      	push	{r4, r5, r6, lr}
 8007b26:	4e0e      	ldr	r6, [pc, #56]	; (8007b60 <sbrk_aligned+0x3c>)
 8007b28:	460c      	mov	r4, r1
 8007b2a:	6831      	ldr	r1, [r6, #0]
 8007b2c:	4605      	mov	r5, r0
 8007b2e:	b911      	cbnz	r1, 8007b36 <sbrk_aligned+0x12>
 8007b30:	f000 f9e6 	bl	8007f00 <_sbrk_r>
 8007b34:	6030      	str	r0, [r6, #0]
 8007b36:	4621      	mov	r1, r4
 8007b38:	4628      	mov	r0, r5
 8007b3a:	f000 f9e1 	bl	8007f00 <_sbrk_r>
 8007b3e:	1c43      	adds	r3, r0, #1
 8007b40:	d00a      	beq.n	8007b58 <sbrk_aligned+0x34>
 8007b42:	1cc4      	adds	r4, r0, #3
 8007b44:	f024 0403 	bic.w	r4, r4, #3
 8007b48:	42a0      	cmp	r0, r4
 8007b4a:	d007      	beq.n	8007b5c <sbrk_aligned+0x38>
 8007b4c:	1a21      	subs	r1, r4, r0
 8007b4e:	4628      	mov	r0, r5
 8007b50:	f000 f9d6 	bl	8007f00 <_sbrk_r>
 8007b54:	3001      	adds	r0, #1
 8007b56:	d101      	bne.n	8007b5c <sbrk_aligned+0x38>
 8007b58:	f04f 34ff 	mov.w	r4, #4294967295
 8007b5c:	4620      	mov	r0, r4
 8007b5e:	bd70      	pop	{r4, r5, r6, pc}
 8007b60:	200003e8 	.word	0x200003e8

08007b64 <_malloc_r>:
 8007b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b68:	1ccd      	adds	r5, r1, #3
 8007b6a:	f025 0503 	bic.w	r5, r5, #3
 8007b6e:	3508      	adds	r5, #8
 8007b70:	2d0c      	cmp	r5, #12
 8007b72:	bf38      	it	cc
 8007b74:	250c      	movcc	r5, #12
 8007b76:	2d00      	cmp	r5, #0
 8007b78:	4607      	mov	r7, r0
 8007b7a:	db01      	blt.n	8007b80 <_malloc_r+0x1c>
 8007b7c:	42a9      	cmp	r1, r5
 8007b7e:	d905      	bls.n	8007b8c <_malloc_r+0x28>
 8007b80:	230c      	movs	r3, #12
 8007b82:	603b      	str	r3, [r7, #0]
 8007b84:	2600      	movs	r6, #0
 8007b86:	4630      	mov	r0, r6
 8007b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b8c:	4e2e      	ldr	r6, [pc, #184]	; (8007c48 <_malloc_r+0xe4>)
 8007b8e:	f000 fb63 	bl	8008258 <__malloc_lock>
 8007b92:	6833      	ldr	r3, [r6, #0]
 8007b94:	461c      	mov	r4, r3
 8007b96:	bb34      	cbnz	r4, 8007be6 <_malloc_r+0x82>
 8007b98:	4629      	mov	r1, r5
 8007b9a:	4638      	mov	r0, r7
 8007b9c:	f7ff ffc2 	bl	8007b24 <sbrk_aligned>
 8007ba0:	1c43      	adds	r3, r0, #1
 8007ba2:	4604      	mov	r4, r0
 8007ba4:	d14d      	bne.n	8007c42 <_malloc_r+0xde>
 8007ba6:	6834      	ldr	r4, [r6, #0]
 8007ba8:	4626      	mov	r6, r4
 8007baa:	2e00      	cmp	r6, #0
 8007bac:	d140      	bne.n	8007c30 <_malloc_r+0xcc>
 8007bae:	6823      	ldr	r3, [r4, #0]
 8007bb0:	4631      	mov	r1, r6
 8007bb2:	4638      	mov	r0, r7
 8007bb4:	eb04 0803 	add.w	r8, r4, r3
 8007bb8:	f000 f9a2 	bl	8007f00 <_sbrk_r>
 8007bbc:	4580      	cmp	r8, r0
 8007bbe:	d13a      	bne.n	8007c36 <_malloc_r+0xd2>
 8007bc0:	6821      	ldr	r1, [r4, #0]
 8007bc2:	3503      	adds	r5, #3
 8007bc4:	1a6d      	subs	r5, r5, r1
 8007bc6:	f025 0503 	bic.w	r5, r5, #3
 8007bca:	3508      	adds	r5, #8
 8007bcc:	2d0c      	cmp	r5, #12
 8007bce:	bf38      	it	cc
 8007bd0:	250c      	movcc	r5, #12
 8007bd2:	4629      	mov	r1, r5
 8007bd4:	4638      	mov	r0, r7
 8007bd6:	f7ff ffa5 	bl	8007b24 <sbrk_aligned>
 8007bda:	3001      	adds	r0, #1
 8007bdc:	d02b      	beq.n	8007c36 <_malloc_r+0xd2>
 8007bde:	6823      	ldr	r3, [r4, #0]
 8007be0:	442b      	add	r3, r5
 8007be2:	6023      	str	r3, [r4, #0]
 8007be4:	e00e      	b.n	8007c04 <_malloc_r+0xa0>
 8007be6:	6822      	ldr	r2, [r4, #0]
 8007be8:	1b52      	subs	r2, r2, r5
 8007bea:	d41e      	bmi.n	8007c2a <_malloc_r+0xc6>
 8007bec:	2a0b      	cmp	r2, #11
 8007bee:	d916      	bls.n	8007c1e <_malloc_r+0xba>
 8007bf0:	1961      	adds	r1, r4, r5
 8007bf2:	42a3      	cmp	r3, r4
 8007bf4:	6025      	str	r5, [r4, #0]
 8007bf6:	bf18      	it	ne
 8007bf8:	6059      	strne	r1, [r3, #4]
 8007bfa:	6863      	ldr	r3, [r4, #4]
 8007bfc:	bf08      	it	eq
 8007bfe:	6031      	streq	r1, [r6, #0]
 8007c00:	5162      	str	r2, [r4, r5]
 8007c02:	604b      	str	r3, [r1, #4]
 8007c04:	4638      	mov	r0, r7
 8007c06:	f104 060b 	add.w	r6, r4, #11
 8007c0a:	f000 fb2b 	bl	8008264 <__malloc_unlock>
 8007c0e:	f026 0607 	bic.w	r6, r6, #7
 8007c12:	1d23      	adds	r3, r4, #4
 8007c14:	1af2      	subs	r2, r6, r3
 8007c16:	d0b6      	beq.n	8007b86 <_malloc_r+0x22>
 8007c18:	1b9b      	subs	r3, r3, r6
 8007c1a:	50a3      	str	r3, [r4, r2]
 8007c1c:	e7b3      	b.n	8007b86 <_malloc_r+0x22>
 8007c1e:	6862      	ldr	r2, [r4, #4]
 8007c20:	42a3      	cmp	r3, r4
 8007c22:	bf0c      	ite	eq
 8007c24:	6032      	streq	r2, [r6, #0]
 8007c26:	605a      	strne	r2, [r3, #4]
 8007c28:	e7ec      	b.n	8007c04 <_malloc_r+0xa0>
 8007c2a:	4623      	mov	r3, r4
 8007c2c:	6864      	ldr	r4, [r4, #4]
 8007c2e:	e7b2      	b.n	8007b96 <_malloc_r+0x32>
 8007c30:	4634      	mov	r4, r6
 8007c32:	6876      	ldr	r6, [r6, #4]
 8007c34:	e7b9      	b.n	8007baa <_malloc_r+0x46>
 8007c36:	230c      	movs	r3, #12
 8007c38:	603b      	str	r3, [r7, #0]
 8007c3a:	4638      	mov	r0, r7
 8007c3c:	f000 fb12 	bl	8008264 <__malloc_unlock>
 8007c40:	e7a1      	b.n	8007b86 <_malloc_r+0x22>
 8007c42:	6025      	str	r5, [r4, #0]
 8007c44:	e7de      	b.n	8007c04 <_malloc_r+0xa0>
 8007c46:	bf00      	nop
 8007c48:	200003e4 	.word	0x200003e4

08007c4c <__sfputc_r>:
 8007c4c:	6893      	ldr	r3, [r2, #8]
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	b410      	push	{r4}
 8007c54:	6093      	str	r3, [r2, #8]
 8007c56:	da08      	bge.n	8007c6a <__sfputc_r+0x1e>
 8007c58:	6994      	ldr	r4, [r2, #24]
 8007c5a:	42a3      	cmp	r3, r4
 8007c5c:	db01      	blt.n	8007c62 <__sfputc_r+0x16>
 8007c5e:	290a      	cmp	r1, #10
 8007c60:	d103      	bne.n	8007c6a <__sfputc_r+0x1e>
 8007c62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c66:	f000 b99f 	b.w	8007fa8 <__swbuf_r>
 8007c6a:	6813      	ldr	r3, [r2, #0]
 8007c6c:	1c58      	adds	r0, r3, #1
 8007c6e:	6010      	str	r0, [r2, #0]
 8007c70:	7019      	strb	r1, [r3, #0]
 8007c72:	4608      	mov	r0, r1
 8007c74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c78:	4770      	bx	lr

08007c7a <__sfputs_r>:
 8007c7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c7c:	4606      	mov	r6, r0
 8007c7e:	460f      	mov	r7, r1
 8007c80:	4614      	mov	r4, r2
 8007c82:	18d5      	adds	r5, r2, r3
 8007c84:	42ac      	cmp	r4, r5
 8007c86:	d101      	bne.n	8007c8c <__sfputs_r+0x12>
 8007c88:	2000      	movs	r0, #0
 8007c8a:	e007      	b.n	8007c9c <__sfputs_r+0x22>
 8007c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c90:	463a      	mov	r2, r7
 8007c92:	4630      	mov	r0, r6
 8007c94:	f7ff ffda 	bl	8007c4c <__sfputc_r>
 8007c98:	1c43      	adds	r3, r0, #1
 8007c9a:	d1f3      	bne.n	8007c84 <__sfputs_r+0xa>
 8007c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007ca0 <_vfiprintf_r>:
 8007ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca4:	460d      	mov	r5, r1
 8007ca6:	b09d      	sub	sp, #116	; 0x74
 8007ca8:	4614      	mov	r4, r2
 8007caa:	4698      	mov	r8, r3
 8007cac:	4606      	mov	r6, r0
 8007cae:	b118      	cbz	r0, 8007cb8 <_vfiprintf_r+0x18>
 8007cb0:	6983      	ldr	r3, [r0, #24]
 8007cb2:	b90b      	cbnz	r3, 8007cb8 <_vfiprintf_r+0x18>
 8007cb4:	f7ff fa30 	bl	8007118 <__sinit>
 8007cb8:	4b89      	ldr	r3, [pc, #548]	; (8007ee0 <_vfiprintf_r+0x240>)
 8007cba:	429d      	cmp	r5, r3
 8007cbc:	d11b      	bne.n	8007cf6 <_vfiprintf_r+0x56>
 8007cbe:	6875      	ldr	r5, [r6, #4]
 8007cc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cc2:	07d9      	lsls	r1, r3, #31
 8007cc4:	d405      	bmi.n	8007cd2 <_vfiprintf_r+0x32>
 8007cc6:	89ab      	ldrh	r3, [r5, #12]
 8007cc8:	059a      	lsls	r2, r3, #22
 8007cca:	d402      	bmi.n	8007cd2 <_vfiprintf_r+0x32>
 8007ccc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cce:	f7ff fac6 	bl	800725e <__retarget_lock_acquire_recursive>
 8007cd2:	89ab      	ldrh	r3, [r5, #12]
 8007cd4:	071b      	lsls	r3, r3, #28
 8007cd6:	d501      	bpl.n	8007cdc <_vfiprintf_r+0x3c>
 8007cd8:	692b      	ldr	r3, [r5, #16]
 8007cda:	b9eb      	cbnz	r3, 8007d18 <_vfiprintf_r+0x78>
 8007cdc:	4629      	mov	r1, r5
 8007cde:	4630      	mov	r0, r6
 8007ce0:	f000 f9c6 	bl	8008070 <__swsetup_r>
 8007ce4:	b1c0      	cbz	r0, 8007d18 <_vfiprintf_r+0x78>
 8007ce6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ce8:	07dc      	lsls	r4, r3, #31
 8007cea:	d50e      	bpl.n	8007d0a <_vfiprintf_r+0x6a>
 8007cec:	f04f 30ff 	mov.w	r0, #4294967295
 8007cf0:	b01d      	add	sp, #116	; 0x74
 8007cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cf6:	4b7b      	ldr	r3, [pc, #492]	; (8007ee4 <_vfiprintf_r+0x244>)
 8007cf8:	429d      	cmp	r5, r3
 8007cfa:	d101      	bne.n	8007d00 <_vfiprintf_r+0x60>
 8007cfc:	68b5      	ldr	r5, [r6, #8]
 8007cfe:	e7df      	b.n	8007cc0 <_vfiprintf_r+0x20>
 8007d00:	4b79      	ldr	r3, [pc, #484]	; (8007ee8 <_vfiprintf_r+0x248>)
 8007d02:	429d      	cmp	r5, r3
 8007d04:	bf08      	it	eq
 8007d06:	68f5      	ldreq	r5, [r6, #12]
 8007d08:	e7da      	b.n	8007cc0 <_vfiprintf_r+0x20>
 8007d0a:	89ab      	ldrh	r3, [r5, #12]
 8007d0c:	0598      	lsls	r0, r3, #22
 8007d0e:	d4ed      	bmi.n	8007cec <_vfiprintf_r+0x4c>
 8007d10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d12:	f7ff faa5 	bl	8007260 <__retarget_lock_release_recursive>
 8007d16:	e7e9      	b.n	8007cec <_vfiprintf_r+0x4c>
 8007d18:	2300      	movs	r3, #0
 8007d1a:	9309      	str	r3, [sp, #36]	; 0x24
 8007d1c:	2320      	movs	r3, #32
 8007d1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d22:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d26:	2330      	movs	r3, #48	; 0x30
 8007d28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007eec <_vfiprintf_r+0x24c>
 8007d2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d30:	f04f 0901 	mov.w	r9, #1
 8007d34:	4623      	mov	r3, r4
 8007d36:	469a      	mov	sl, r3
 8007d38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d3c:	b10a      	cbz	r2, 8007d42 <_vfiprintf_r+0xa2>
 8007d3e:	2a25      	cmp	r2, #37	; 0x25
 8007d40:	d1f9      	bne.n	8007d36 <_vfiprintf_r+0x96>
 8007d42:	ebba 0b04 	subs.w	fp, sl, r4
 8007d46:	d00b      	beq.n	8007d60 <_vfiprintf_r+0xc0>
 8007d48:	465b      	mov	r3, fp
 8007d4a:	4622      	mov	r2, r4
 8007d4c:	4629      	mov	r1, r5
 8007d4e:	4630      	mov	r0, r6
 8007d50:	f7ff ff93 	bl	8007c7a <__sfputs_r>
 8007d54:	3001      	adds	r0, #1
 8007d56:	f000 80aa 	beq.w	8007eae <_vfiprintf_r+0x20e>
 8007d5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d5c:	445a      	add	r2, fp
 8007d5e:	9209      	str	r2, [sp, #36]	; 0x24
 8007d60:	f89a 3000 	ldrb.w	r3, [sl]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	f000 80a2 	beq.w	8007eae <_vfiprintf_r+0x20e>
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8007d70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d74:	f10a 0a01 	add.w	sl, sl, #1
 8007d78:	9304      	str	r3, [sp, #16]
 8007d7a:	9307      	str	r3, [sp, #28]
 8007d7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d80:	931a      	str	r3, [sp, #104]	; 0x68
 8007d82:	4654      	mov	r4, sl
 8007d84:	2205      	movs	r2, #5
 8007d86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d8a:	4858      	ldr	r0, [pc, #352]	; (8007eec <_vfiprintf_r+0x24c>)
 8007d8c:	f7f8 fa50 	bl	8000230 <memchr>
 8007d90:	9a04      	ldr	r2, [sp, #16]
 8007d92:	b9d8      	cbnz	r0, 8007dcc <_vfiprintf_r+0x12c>
 8007d94:	06d1      	lsls	r1, r2, #27
 8007d96:	bf44      	itt	mi
 8007d98:	2320      	movmi	r3, #32
 8007d9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d9e:	0713      	lsls	r3, r2, #28
 8007da0:	bf44      	itt	mi
 8007da2:	232b      	movmi	r3, #43	; 0x2b
 8007da4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007da8:	f89a 3000 	ldrb.w	r3, [sl]
 8007dac:	2b2a      	cmp	r3, #42	; 0x2a
 8007dae:	d015      	beq.n	8007ddc <_vfiprintf_r+0x13c>
 8007db0:	9a07      	ldr	r2, [sp, #28]
 8007db2:	4654      	mov	r4, sl
 8007db4:	2000      	movs	r0, #0
 8007db6:	f04f 0c0a 	mov.w	ip, #10
 8007dba:	4621      	mov	r1, r4
 8007dbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dc0:	3b30      	subs	r3, #48	; 0x30
 8007dc2:	2b09      	cmp	r3, #9
 8007dc4:	d94e      	bls.n	8007e64 <_vfiprintf_r+0x1c4>
 8007dc6:	b1b0      	cbz	r0, 8007df6 <_vfiprintf_r+0x156>
 8007dc8:	9207      	str	r2, [sp, #28]
 8007dca:	e014      	b.n	8007df6 <_vfiprintf_r+0x156>
 8007dcc:	eba0 0308 	sub.w	r3, r0, r8
 8007dd0:	fa09 f303 	lsl.w	r3, r9, r3
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	9304      	str	r3, [sp, #16]
 8007dd8:	46a2      	mov	sl, r4
 8007dda:	e7d2      	b.n	8007d82 <_vfiprintf_r+0xe2>
 8007ddc:	9b03      	ldr	r3, [sp, #12]
 8007dde:	1d19      	adds	r1, r3, #4
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	9103      	str	r1, [sp, #12]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	bfbb      	ittet	lt
 8007de8:	425b      	neglt	r3, r3
 8007dea:	f042 0202 	orrlt.w	r2, r2, #2
 8007dee:	9307      	strge	r3, [sp, #28]
 8007df0:	9307      	strlt	r3, [sp, #28]
 8007df2:	bfb8      	it	lt
 8007df4:	9204      	strlt	r2, [sp, #16]
 8007df6:	7823      	ldrb	r3, [r4, #0]
 8007df8:	2b2e      	cmp	r3, #46	; 0x2e
 8007dfa:	d10c      	bne.n	8007e16 <_vfiprintf_r+0x176>
 8007dfc:	7863      	ldrb	r3, [r4, #1]
 8007dfe:	2b2a      	cmp	r3, #42	; 0x2a
 8007e00:	d135      	bne.n	8007e6e <_vfiprintf_r+0x1ce>
 8007e02:	9b03      	ldr	r3, [sp, #12]
 8007e04:	1d1a      	adds	r2, r3, #4
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	9203      	str	r2, [sp, #12]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	bfb8      	it	lt
 8007e0e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e12:	3402      	adds	r4, #2
 8007e14:	9305      	str	r3, [sp, #20]
 8007e16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007efc <_vfiprintf_r+0x25c>
 8007e1a:	7821      	ldrb	r1, [r4, #0]
 8007e1c:	2203      	movs	r2, #3
 8007e1e:	4650      	mov	r0, sl
 8007e20:	f7f8 fa06 	bl	8000230 <memchr>
 8007e24:	b140      	cbz	r0, 8007e38 <_vfiprintf_r+0x198>
 8007e26:	2340      	movs	r3, #64	; 0x40
 8007e28:	eba0 000a 	sub.w	r0, r0, sl
 8007e2c:	fa03 f000 	lsl.w	r0, r3, r0
 8007e30:	9b04      	ldr	r3, [sp, #16]
 8007e32:	4303      	orrs	r3, r0
 8007e34:	3401      	adds	r4, #1
 8007e36:	9304      	str	r3, [sp, #16]
 8007e38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e3c:	482c      	ldr	r0, [pc, #176]	; (8007ef0 <_vfiprintf_r+0x250>)
 8007e3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e42:	2206      	movs	r2, #6
 8007e44:	f7f8 f9f4 	bl	8000230 <memchr>
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	d03f      	beq.n	8007ecc <_vfiprintf_r+0x22c>
 8007e4c:	4b29      	ldr	r3, [pc, #164]	; (8007ef4 <_vfiprintf_r+0x254>)
 8007e4e:	bb1b      	cbnz	r3, 8007e98 <_vfiprintf_r+0x1f8>
 8007e50:	9b03      	ldr	r3, [sp, #12]
 8007e52:	3307      	adds	r3, #7
 8007e54:	f023 0307 	bic.w	r3, r3, #7
 8007e58:	3308      	adds	r3, #8
 8007e5a:	9303      	str	r3, [sp, #12]
 8007e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e5e:	443b      	add	r3, r7
 8007e60:	9309      	str	r3, [sp, #36]	; 0x24
 8007e62:	e767      	b.n	8007d34 <_vfiprintf_r+0x94>
 8007e64:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e68:	460c      	mov	r4, r1
 8007e6a:	2001      	movs	r0, #1
 8007e6c:	e7a5      	b.n	8007dba <_vfiprintf_r+0x11a>
 8007e6e:	2300      	movs	r3, #0
 8007e70:	3401      	adds	r4, #1
 8007e72:	9305      	str	r3, [sp, #20]
 8007e74:	4619      	mov	r1, r3
 8007e76:	f04f 0c0a 	mov.w	ip, #10
 8007e7a:	4620      	mov	r0, r4
 8007e7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e80:	3a30      	subs	r2, #48	; 0x30
 8007e82:	2a09      	cmp	r2, #9
 8007e84:	d903      	bls.n	8007e8e <_vfiprintf_r+0x1ee>
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d0c5      	beq.n	8007e16 <_vfiprintf_r+0x176>
 8007e8a:	9105      	str	r1, [sp, #20]
 8007e8c:	e7c3      	b.n	8007e16 <_vfiprintf_r+0x176>
 8007e8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e92:	4604      	mov	r4, r0
 8007e94:	2301      	movs	r3, #1
 8007e96:	e7f0      	b.n	8007e7a <_vfiprintf_r+0x1da>
 8007e98:	ab03      	add	r3, sp, #12
 8007e9a:	9300      	str	r3, [sp, #0]
 8007e9c:	462a      	mov	r2, r5
 8007e9e:	4b16      	ldr	r3, [pc, #88]	; (8007ef8 <_vfiprintf_r+0x258>)
 8007ea0:	a904      	add	r1, sp, #16
 8007ea2:	4630      	mov	r0, r6
 8007ea4:	f7fd fcf4 	bl	8005890 <_printf_float>
 8007ea8:	4607      	mov	r7, r0
 8007eaa:	1c78      	adds	r0, r7, #1
 8007eac:	d1d6      	bne.n	8007e5c <_vfiprintf_r+0x1bc>
 8007eae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007eb0:	07d9      	lsls	r1, r3, #31
 8007eb2:	d405      	bmi.n	8007ec0 <_vfiprintf_r+0x220>
 8007eb4:	89ab      	ldrh	r3, [r5, #12]
 8007eb6:	059a      	lsls	r2, r3, #22
 8007eb8:	d402      	bmi.n	8007ec0 <_vfiprintf_r+0x220>
 8007eba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ebc:	f7ff f9d0 	bl	8007260 <__retarget_lock_release_recursive>
 8007ec0:	89ab      	ldrh	r3, [r5, #12]
 8007ec2:	065b      	lsls	r3, r3, #25
 8007ec4:	f53f af12 	bmi.w	8007cec <_vfiprintf_r+0x4c>
 8007ec8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007eca:	e711      	b.n	8007cf0 <_vfiprintf_r+0x50>
 8007ecc:	ab03      	add	r3, sp, #12
 8007ece:	9300      	str	r3, [sp, #0]
 8007ed0:	462a      	mov	r2, r5
 8007ed2:	4b09      	ldr	r3, [pc, #36]	; (8007ef8 <_vfiprintf_r+0x258>)
 8007ed4:	a904      	add	r1, sp, #16
 8007ed6:	4630      	mov	r0, r6
 8007ed8:	f7fd ff7e 	bl	8005dd8 <_printf_i>
 8007edc:	e7e4      	b.n	8007ea8 <_vfiprintf_r+0x208>
 8007ede:	bf00      	nop
 8007ee0:	08008490 	.word	0x08008490
 8007ee4:	080084b0 	.word	0x080084b0
 8007ee8:	08008470 	.word	0x08008470
 8007eec:	0800862c 	.word	0x0800862c
 8007ef0:	08008636 	.word	0x08008636
 8007ef4:	08005891 	.word	0x08005891
 8007ef8:	08007c7b 	.word	0x08007c7b
 8007efc:	08008632 	.word	0x08008632

08007f00 <_sbrk_r>:
 8007f00:	b538      	push	{r3, r4, r5, lr}
 8007f02:	4d06      	ldr	r5, [pc, #24]	; (8007f1c <_sbrk_r+0x1c>)
 8007f04:	2300      	movs	r3, #0
 8007f06:	4604      	mov	r4, r0
 8007f08:	4608      	mov	r0, r1
 8007f0a:	602b      	str	r3, [r5, #0]
 8007f0c:	f7f9 fe12 	bl	8001b34 <_sbrk>
 8007f10:	1c43      	adds	r3, r0, #1
 8007f12:	d102      	bne.n	8007f1a <_sbrk_r+0x1a>
 8007f14:	682b      	ldr	r3, [r5, #0]
 8007f16:	b103      	cbz	r3, 8007f1a <_sbrk_r+0x1a>
 8007f18:	6023      	str	r3, [r4, #0]
 8007f1a:	bd38      	pop	{r3, r4, r5, pc}
 8007f1c:	200003ec 	.word	0x200003ec

08007f20 <__sread>:
 8007f20:	b510      	push	{r4, lr}
 8007f22:	460c      	mov	r4, r1
 8007f24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f28:	f000 f9a2 	bl	8008270 <_read_r>
 8007f2c:	2800      	cmp	r0, #0
 8007f2e:	bfab      	itete	ge
 8007f30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007f32:	89a3      	ldrhlt	r3, [r4, #12]
 8007f34:	181b      	addge	r3, r3, r0
 8007f36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007f3a:	bfac      	ite	ge
 8007f3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007f3e:	81a3      	strhlt	r3, [r4, #12]
 8007f40:	bd10      	pop	{r4, pc}

08007f42 <__swrite>:
 8007f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f46:	461f      	mov	r7, r3
 8007f48:	898b      	ldrh	r3, [r1, #12]
 8007f4a:	05db      	lsls	r3, r3, #23
 8007f4c:	4605      	mov	r5, r0
 8007f4e:	460c      	mov	r4, r1
 8007f50:	4616      	mov	r6, r2
 8007f52:	d505      	bpl.n	8007f60 <__swrite+0x1e>
 8007f54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f58:	2302      	movs	r3, #2
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f000 f958 	bl	8008210 <_lseek_r>
 8007f60:	89a3      	ldrh	r3, [r4, #12]
 8007f62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f6a:	81a3      	strh	r3, [r4, #12]
 8007f6c:	4632      	mov	r2, r6
 8007f6e:	463b      	mov	r3, r7
 8007f70:	4628      	mov	r0, r5
 8007f72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f76:	f000 b869 	b.w	800804c <_write_r>

08007f7a <__sseek>:
 8007f7a:	b510      	push	{r4, lr}
 8007f7c:	460c      	mov	r4, r1
 8007f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f82:	f000 f945 	bl	8008210 <_lseek_r>
 8007f86:	1c43      	adds	r3, r0, #1
 8007f88:	89a3      	ldrh	r3, [r4, #12]
 8007f8a:	bf15      	itete	ne
 8007f8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f96:	81a3      	strheq	r3, [r4, #12]
 8007f98:	bf18      	it	ne
 8007f9a:	81a3      	strhne	r3, [r4, #12]
 8007f9c:	bd10      	pop	{r4, pc}

08007f9e <__sclose>:
 8007f9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fa2:	f000 b8f1 	b.w	8008188 <_close_r>
	...

08007fa8 <__swbuf_r>:
 8007fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007faa:	460e      	mov	r6, r1
 8007fac:	4614      	mov	r4, r2
 8007fae:	4605      	mov	r5, r0
 8007fb0:	b118      	cbz	r0, 8007fba <__swbuf_r+0x12>
 8007fb2:	6983      	ldr	r3, [r0, #24]
 8007fb4:	b90b      	cbnz	r3, 8007fba <__swbuf_r+0x12>
 8007fb6:	f7ff f8af 	bl	8007118 <__sinit>
 8007fba:	4b21      	ldr	r3, [pc, #132]	; (8008040 <__swbuf_r+0x98>)
 8007fbc:	429c      	cmp	r4, r3
 8007fbe:	d12b      	bne.n	8008018 <__swbuf_r+0x70>
 8007fc0:	686c      	ldr	r4, [r5, #4]
 8007fc2:	69a3      	ldr	r3, [r4, #24]
 8007fc4:	60a3      	str	r3, [r4, #8]
 8007fc6:	89a3      	ldrh	r3, [r4, #12]
 8007fc8:	071a      	lsls	r2, r3, #28
 8007fca:	d52f      	bpl.n	800802c <__swbuf_r+0x84>
 8007fcc:	6923      	ldr	r3, [r4, #16]
 8007fce:	b36b      	cbz	r3, 800802c <__swbuf_r+0x84>
 8007fd0:	6923      	ldr	r3, [r4, #16]
 8007fd2:	6820      	ldr	r0, [r4, #0]
 8007fd4:	1ac0      	subs	r0, r0, r3
 8007fd6:	6963      	ldr	r3, [r4, #20]
 8007fd8:	b2f6      	uxtb	r6, r6
 8007fda:	4283      	cmp	r3, r0
 8007fdc:	4637      	mov	r7, r6
 8007fde:	dc04      	bgt.n	8007fea <__swbuf_r+0x42>
 8007fe0:	4621      	mov	r1, r4
 8007fe2:	4628      	mov	r0, r5
 8007fe4:	f7ff f804 	bl	8006ff0 <_fflush_r>
 8007fe8:	bb30      	cbnz	r0, 8008038 <__swbuf_r+0x90>
 8007fea:	68a3      	ldr	r3, [r4, #8]
 8007fec:	3b01      	subs	r3, #1
 8007fee:	60a3      	str	r3, [r4, #8]
 8007ff0:	6823      	ldr	r3, [r4, #0]
 8007ff2:	1c5a      	adds	r2, r3, #1
 8007ff4:	6022      	str	r2, [r4, #0]
 8007ff6:	701e      	strb	r6, [r3, #0]
 8007ff8:	6963      	ldr	r3, [r4, #20]
 8007ffa:	3001      	adds	r0, #1
 8007ffc:	4283      	cmp	r3, r0
 8007ffe:	d004      	beq.n	800800a <__swbuf_r+0x62>
 8008000:	89a3      	ldrh	r3, [r4, #12]
 8008002:	07db      	lsls	r3, r3, #31
 8008004:	d506      	bpl.n	8008014 <__swbuf_r+0x6c>
 8008006:	2e0a      	cmp	r6, #10
 8008008:	d104      	bne.n	8008014 <__swbuf_r+0x6c>
 800800a:	4621      	mov	r1, r4
 800800c:	4628      	mov	r0, r5
 800800e:	f7fe ffef 	bl	8006ff0 <_fflush_r>
 8008012:	b988      	cbnz	r0, 8008038 <__swbuf_r+0x90>
 8008014:	4638      	mov	r0, r7
 8008016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008018:	4b0a      	ldr	r3, [pc, #40]	; (8008044 <__swbuf_r+0x9c>)
 800801a:	429c      	cmp	r4, r3
 800801c:	d101      	bne.n	8008022 <__swbuf_r+0x7a>
 800801e:	68ac      	ldr	r4, [r5, #8]
 8008020:	e7cf      	b.n	8007fc2 <__swbuf_r+0x1a>
 8008022:	4b09      	ldr	r3, [pc, #36]	; (8008048 <__swbuf_r+0xa0>)
 8008024:	429c      	cmp	r4, r3
 8008026:	bf08      	it	eq
 8008028:	68ec      	ldreq	r4, [r5, #12]
 800802a:	e7ca      	b.n	8007fc2 <__swbuf_r+0x1a>
 800802c:	4621      	mov	r1, r4
 800802e:	4628      	mov	r0, r5
 8008030:	f000 f81e 	bl	8008070 <__swsetup_r>
 8008034:	2800      	cmp	r0, #0
 8008036:	d0cb      	beq.n	8007fd0 <__swbuf_r+0x28>
 8008038:	f04f 37ff 	mov.w	r7, #4294967295
 800803c:	e7ea      	b.n	8008014 <__swbuf_r+0x6c>
 800803e:	bf00      	nop
 8008040:	08008490 	.word	0x08008490
 8008044:	080084b0 	.word	0x080084b0
 8008048:	08008470 	.word	0x08008470

0800804c <_write_r>:
 800804c:	b538      	push	{r3, r4, r5, lr}
 800804e:	4d07      	ldr	r5, [pc, #28]	; (800806c <_write_r+0x20>)
 8008050:	4604      	mov	r4, r0
 8008052:	4608      	mov	r0, r1
 8008054:	4611      	mov	r1, r2
 8008056:	2200      	movs	r2, #0
 8008058:	602a      	str	r2, [r5, #0]
 800805a:	461a      	mov	r2, r3
 800805c:	f7f9 fd19 	bl	8001a92 <_write>
 8008060:	1c43      	adds	r3, r0, #1
 8008062:	d102      	bne.n	800806a <_write_r+0x1e>
 8008064:	682b      	ldr	r3, [r5, #0]
 8008066:	b103      	cbz	r3, 800806a <_write_r+0x1e>
 8008068:	6023      	str	r3, [r4, #0]
 800806a:	bd38      	pop	{r3, r4, r5, pc}
 800806c:	200003ec 	.word	0x200003ec

08008070 <__swsetup_r>:
 8008070:	4b32      	ldr	r3, [pc, #200]	; (800813c <__swsetup_r+0xcc>)
 8008072:	b570      	push	{r4, r5, r6, lr}
 8008074:	681d      	ldr	r5, [r3, #0]
 8008076:	4606      	mov	r6, r0
 8008078:	460c      	mov	r4, r1
 800807a:	b125      	cbz	r5, 8008086 <__swsetup_r+0x16>
 800807c:	69ab      	ldr	r3, [r5, #24]
 800807e:	b913      	cbnz	r3, 8008086 <__swsetup_r+0x16>
 8008080:	4628      	mov	r0, r5
 8008082:	f7ff f849 	bl	8007118 <__sinit>
 8008086:	4b2e      	ldr	r3, [pc, #184]	; (8008140 <__swsetup_r+0xd0>)
 8008088:	429c      	cmp	r4, r3
 800808a:	d10f      	bne.n	80080ac <__swsetup_r+0x3c>
 800808c:	686c      	ldr	r4, [r5, #4]
 800808e:	89a3      	ldrh	r3, [r4, #12]
 8008090:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008094:	0719      	lsls	r1, r3, #28
 8008096:	d42c      	bmi.n	80080f2 <__swsetup_r+0x82>
 8008098:	06dd      	lsls	r5, r3, #27
 800809a:	d411      	bmi.n	80080c0 <__swsetup_r+0x50>
 800809c:	2309      	movs	r3, #9
 800809e:	6033      	str	r3, [r6, #0]
 80080a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80080a4:	81a3      	strh	r3, [r4, #12]
 80080a6:	f04f 30ff 	mov.w	r0, #4294967295
 80080aa:	e03e      	b.n	800812a <__swsetup_r+0xba>
 80080ac:	4b25      	ldr	r3, [pc, #148]	; (8008144 <__swsetup_r+0xd4>)
 80080ae:	429c      	cmp	r4, r3
 80080b0:	d101      	bne.n	80080b6 <__swsetup_r+0x46>
 80080b2:	68ac      	ldr	r4, [r5, #8]
 80080b4:	e7eb      	b.n	800808e <__swsetup_r+0x1e>
 80080b6:	4b24      	ldr	r3, [pc, #144]	; (8008148 <__swsetup_r+0xd8>)
 80080b8:	429c      	cmp	r4, r3
 80080ba:	bf08      	it	eq
 80080bc:	68ec      	ldreq	r4, [r5, #12]
 80080be:	e7e6      	b.n	800808e <__swsetup_r+0x1e>
 80080c0:	0758      	lsls	r0, r3, #29
 80080c2:	d512      	bpl.n	80080ea <__swsetup_r+0x7a>
 80080c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080c6:	b141      	cbz	r1, 80080da <__swsetup_r+0x6a>
 80080c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080cc:	4299      	cmp	r1, r3
 80080ce:	d002      	beq.n	80080d6 <__swsetup_r+0x66>
 80080d0:	4630      	mov	r0, r6
 80080d2:	f7ff fcdb 	bl	8007a8c <_free_r>
 80080d6:	2300      	movs	r3, #0
 80080d8:	6363      	str	r3, [r4, #52]	; 0x34
 80080da:	89a3      	ldrh	r3, [r4, #12]
 80080dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80080e0:	81a3      	strh	r3, [r4, #12]
 80080e2:	2300      	movs	r3, #0
 80080e4:	6063      	str	r3, [r4, #4]
 80080e6:	6923      	ldr	r3, [r4, #16]
 80080e8:	6023      	str	r3, [r4, #0]
 80080ea:	89a3      	ldrh	r3, [r4, #12]
 80080ec:	f043 0308 	orr.w	r3, r3, #8
 80080f0:	81a3      	strh	r3, [r4, #12]
 80080f2:	6923      	ldr	r3, [r4, #16]
 80080f4:	b94b      	cbnz	r3, 800810a <__swsetup_r+0x9a>
 80080f6:	89a3      	ldrh	r3, [r4, #12]
 80080f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80080fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008100:	d003      	beq.n	800810a <__swsetup_r+0x9a>
 8008102:	4621      	mov	r1, r4
 8008104:	4630      	mov	r0, r6
 8008106:	f7ff f8d1 	bl	80072ac <__smakebuf_r>
 800810a:	89a0      	ldrh	r0, [r4, #12]
 800810c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008110:	f010 0301 	ands.w	r3, r0, #1
 8008114:	d00a      	beq.n	800812c <__swsetup_r+0xbc>
 8008116:	2300      	movs	r3, #0
 8008118:	60a3      	str	r3, [r4, #8]
 800811a:	6963      	ldr	r3, [r4, #20]
 800811c:	425b      	negs	r3, r3
 800811e:	61a3      	str	r3, [r4, #24]
 8008120:	6923      	ldr	r3, [r4, #16]
 8008122:	b943      	cbnz	r3, 8008136 <__swsetup_r+0xc6>
 8008124:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008128:	d1ba      	bne.n	80080a0 <__swsetup_r+0x30>
 800812a:	bd70      	pop	{r4, r5, r6, pc}
 800812c:	0781      	lsls	r1, r0, #30
 800812e:	bf58      	it	pl
 8008130:	6963      	ldrpl	r3, [r4, #20]
 8008132:	60a3      	str	r3, [r4, #8]
 8008134:	e7f4      	b.n	8008120 <__swsetup_r+0xb0>
 8008136:	2000      	movs	r0, #0
 8008138:	e7f7      	b.n	800812a <__swsetup_r+0xba>
 800813a:	bf00      	nop
 800813c:	2000001c 	.word	0x2000001c
 8008140:	08008490 	.word	0x08008490
 8008144:	080084b0 	.word	0x080084b0
 8008148:	08008470 	.word	0x08008470

0800814c <__assert_func>:
 800814c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800814e:	4614      	mov	r4, r2
 8008150:	461a      	mov	r2, r3
 8008152:	4b09      	ldr	r3, [pc, #36]	; (8008178 <__assert_func+0x2c>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4605      	mov	r5, r0
 8008158:	68d8      	ldr	r0, [r3, #12]
 800815a:	b14c      	cbz	r4, 8008170 <__assert_func+0x24>
 800815c:	4b07      	ldr	r3, [pc, #28]	; (800817c <__assert_func+0x30>)
 800815e:	9100      	str	r1, [sp, #0]
 8008160:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008164:	4906      	ldr	r1, [pc, #24]	; (8008180 <__assert_func+0x34>)
 8008166:	462b      	mov	r3, r5
 8008168:	f000 f81e 	bl	80081a8 <fiprintf>
 800816c:	f000 f89f 	bl	80082ae <abort>
 8008170:	4b04      	ldr	r3, [pc, #16]	; (8008184 <__assert_func+0x38>)
 8008172:	461c      	mov	r4, r3
 8008174:	e7f3      	b.n	800815e <__assert_func+0x12>
 8008176:	bf00      	nop
 8008178:	2000001c 	.word	0x2000001c
 800817c:	0800863d 	.word	0x0800863d
 8008180:	0800864a 	.word	0x0800864a
 8008184:	08008678 	.word	0x08008678

08008188 <_close_r>:
 8008188:	b538      	push	{r3, r4, r5, lr}
 800818a:	4d06      	ldr	r5, [pc, #24]	; (80081a4 <_close_r+0x1c>)
 800818c:	2300      	movs	r3, #0
 800818e:	4604      	mov	r4, r0
 8008190:	4608      	mov	r0, r1
 8008192:	602b      	str	r3, [r5, #0]
 8008194:	f7f9 fc99 	bl	8001aca <_close>
 8008198:	1c43      	adds	r3, r0, #1
 800819a:	d102      	bne.n	80081a2 <_close_r+0x1a>
 800819c:	682b      	ldr	r3, [r5, #0]
 800819e:	b103      	cbz	r3, 80081a2 <_close_r+0x1a>
 80081a0:	6023      	str	r3, [r4, #0]
 80081a2:	bd38      	pop	{r3, r4, r5, pc}
 80081a4:	200003ec 	.word	0x200003ec

080081a8 <fiprintf>:
 80081a8:	b40e      	push	{r1, r2, r3}
 80081aa:	b503      	push	{r0, r1, lr}
 80081ac:	4601      	mov	r1, r0
 80081ae:	ab03      	add	r3, sp, #12
 80081b0:	4805      	ldr	r0, [pc, #20]	; (80081c8 <fiprintf+0x20>)
 80081b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80081b6:	6800      	ldr	r0, [r0, #0]
 80081b8:	9301      	str	r3, [sp, #4]
 80081ba:	f7ff fd71 	bl	8007ca0 <_vfiprintf_r>
 80081be:	b002      	add	sp, #8
 80081c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80081c4:	b003      	add	sp, #12
 80081c6:	4770      	bx	lr
 80081c8:	2000001c 	.word	0x2000001c

080081cc <_fstat_r>:
 80081cc:	b538      	push	{r3, r4, r5, lr}
 80081ce:	4d07      	ldr	r5, [pc, #28]	; (80081ec <_fstat_r+0x20>)
 80081d0:	2300      	movs	r3, #0
 80081d2:	4604      	mov	r4, r0
 80081d4:	4608      	mov	r0, r1
 80081d6:	4611      	mov	r1, r2
 80081d8:	602b      	str	r3, [r5, #0]
 80081da:	f7f9 fc82 	bl	8001ae2 <_fstat>
 80081de:	1c43      	adds	r3, r0, #1
 80081e0:	d102      	bne.n	80081e8 <_fstat_r+0x1c>
 80081e2:	682b      	ldr	r3, [r5, #0]
 80081e4:	b103      	cbz	r3, 80081e8 <_fstat_r+0x1c>
 80081e6:	6023      	str	r3, [r4, #0]
 80081e8:	bd38      	pop	{r3, r4, r5, pc}
 80081ea:	bf00      	nop
 80081ec:	200003ec 	.word	0x200003ec

080081f0 <_isatty_r>:
 80081f0:	b538      	push	{r3, r4, r5, lr}
 80081f2:	4d06      	ldr	r5, [pc, #24]	; (800820c <_isatty_r+0x1c>)
 80081f4:	2300      	movs	r3, #0
 80081f6:	4604      	mov	r4, r0
 80081f8:	4608      	mov	r0, r1
 80081fa:	602b      	str	r3, [r5, #0]
 80081fc:	f7f9 fc81 	bl	8001b02 <_isatty>
 8008200:	1c43      	adds	r3, r0, #1
 8008202:	d102      	bne.n	800820a <_isatty_r+0x1a>
 8008204:	682b      	ldr	r3, [r5, #0]
 8008206:	b103      	cbz	r3, 800820a <_isatty_r+0x1a>
 8008208:	6023      	str	r3, [r4, #0]
 800820a:	bd38      	pop	{r3, r4, r5, pc}
 800820c:	200003ec 	.word	0x200003ec

08008210 <_lseek_r>:
 8008210:	b538      	push	{r3, r4, r5, lr}
 8008212:	4d07      	ldr	r5, [pc, #28]	; (8008230 <_lseek_r+0x20>)
 8008214:	4604      	mov	r4, r0
 8008216:	4608      	mov	r0, r1
 8008218:	4611      	mov	r1, r2
 800821a:	2200      	movs	r2, #0
 800821c:	602a      	str	r2, [r5, #0]
 800821e:	461a      	mov	r2, r3
 8008220:	f7f9 fc7a 	bl	8001b18 <_lseek>
 8008224:	1c43      	adds	r3, r0, #1
 8008226:	d102      	bne.n	800822e <_lseek_r+0x1e>
 8008228:	682b      	ldr	r3, [r5, #0]
 800822a:	b103      	cbz	r3, 800822e <_lseek_r+0x1e>
 800822c:	6023      	str	r3, [r4, #0]
 800822e:	bd38      	pop	{r3, r4, r5, pc}
 8008230:	200003ec 	.word	0x200003ec

08008234 <__ascii_mbtowc>:
 8008234:	b082      	sub	sp, #8
 8008236:	b901      	cbnz	r1, 800823a <__ascii_mbtowc+0x6>
 8008238:	a901      	add	r1, sp, #4
 800823a:	b142      	cbz	r2, 800824e <__ascii_mbtowc+0x1a>
 800823c:	b14b      	cbz	r3, 8008252 <__ascii_mbtowc+0x1e>
 800823e:	7813      	ldrb	r3, [r2, #0]
 8008240:	600b      	str	r3, [r1, #0]
 8008242:	7812      	ldrb	r2, [r2, #0]
 8008244:	1e10      	subs	r0, r2, #0
 8008246:	bf18      	it	ne
 8008248:	2001      	movne	r0, #1
 800824a:	b002      	add	sp, #8
 800824c:	4770      	bx	lr
 800824e:	4610      	mov	r0, r2
 8008250:	e7fb      	b.n	800824a <__ascii_mbtowc+0x16>
 8008252:	f06f 0001 	mvn.w	r0, #1
 8008256:	e7f8      	b.n	800824a <__ascii_mbtowc+0x16>

08008258 <__malloc_lock>:
 8008258:	4801      	ldr	r0, [pc, #4]	; (8008260 <__malloc_lock+0x8>)
 800825a:	f7ff b800 	b.w	800725e <__retarget_lock_acquire_recursive>
 800825e:	bf00      	nop
 8008260:	200003e0 	.word	0x200003e0

08008264 <__malloc_unlock>:
 8008264:	4801      	ldr	r0, [pc, #4]	; (800826c <__malloc_unlock+0x8>)
 8008266:	f7fe bffb 	b.w	8007260 <__retarget_lock_release_recursive>
 800826a:	bf00      	nop
 800826c:	200003e0 	.word	0x200003e0

08008270 <_read_r>:
 8008270:	b538      	push	{r3, r4, r5, lr}
 8008272:	4d07      	ldr	r5, [pc, #28]	; (8008290 <_read_r+0x20>)
 8008274:	4604      	mov	r4, r0
 8008276:	4608      	mov	r0, r1
 8008278:	4611      	mov	r1, r2
 800827a:	2200      	movs	r2, #0
 800827c:	602a      	str	r2, [r5, #0]
 800827e:	461a      	mov	r2, r3
 8008280:	f7f9 fbea 	bl	8001a58 <_read>
 8008284:	1c43      	adds	r3, r0, #1
 8008286:	d102      	bne.n	800828e <_read_r+0x1e>
 8008288:	682b      	ldr	r3, [r5, #0]
 800828a:	b103      	cbz	r3, 800828e <_read_r+0x1e>
 800828c:	6023      	str	r3, [r4, #0]
 800828e:	bd38      	pop	{r3, r4, r5, pc}
 8008290:	200003ec 	.word	0x200003ec

08008294 <__ascii_wctomb>:
 8008294:	b149      	cbz	r1, 80082aa <__ascii_wctomb+0x16>
 8008296:	2aff      	cmp	r2, #255	; 0xff
 8008298:	bf85      	ittet	hi
 800829a:	238a      	movhi	r3, #138	; 0x8a
 800829c:	6003      	strhi	r3, [r0, #0]
 800829e:	700a      	strbls	r2, [r1, #0]
 80082a0:	f04f 30ff 	movhi.w	r0, #4294967295
 80082a4:	bf98      	it	ls
 80082a6:	2001      	movls	r0, #1
 80082a8:	4770      	bx	lr
 80082aa:	4608      	mov	r0, r1
 80082ac:	4770      	bx	lr

080082ae <abort>:
 80082ae:	b508      	push	{r3, lr}
 80082b0:	2006      	movs	r0, #6
 80082b2:	f000 f82b 	bl	800830c <raise>
 80082b6:	2001      	movs	r0, #1
 80082b8:	f7f9 fbc4 	bl	8001a44 <_exit>

080082bc <_raise_r>:
 80082bc:	291f      	cmp	r1, #31
 80082be:	b538      	push	{r3, r4, r5, lr}
 80082c0:	4604      	mov	r4, r0
 80082c2:	460d      	mov	r5, r1
 80082c4:	d904      	bls.n	80082d0 <_raise_r+0x14>
 80082c6:	2316      	movs	r3, #22
 80082c8:	6003      	str	r3, [r0, #0]
 80082ca:	f04f 30ff 	mov.w	r0, #4294967295
 80082ce:	bd38      	pop	{r3, r4, r5, pc}
 80082d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80082d2:	b112      	cbz	r2, 80082da <_raise_r+0x1e>
 80082d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80082d8:	b94b      	cbnz	r3, 80082ee <_raise_r+0x32>
 80082da:	4620      	mov	r0, r4
 80082dc:	f000 f830 	bl	8008340 <_getpid_r>
 80082e0:	462a      	mov	r2, r5
 80082e2:	4601      	mov	r1, r0
 80082e4:	4620      	mov	r0, r4
 80082e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082ea:	f000 b817 	b.w	800831c <_kill_r>
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d00a      	beq.n	8008308 <_raise_r+0x4c>
 80082f2:	1c59      	adds	r1, r3, #1
 80082f4:	d103      	bne.n	80082fe <_raise_r+0x42>
 80082f6:	2316      	movs	r3, #22
 80082f8:	6003      	str	r3, [r0, #0]
 80082fa:	2001      	movs	r0, #1
 80082fc:	e7e7      	b.n	80082ce <_raise_r+0x12>
 80082fe:	2400      	movs	r4, #0
 8008300:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008304:	4628      	mov	r0, r5
 8008306:	4798      	blx	r3
 8008308:	2000      	movs	r0, #0
 800830a:	e7e0      	b.n	80082ce <_raise_r+0x12>

0800830c <raise>:
 800830c:	4b02      	ldr	r3, [pc, #8]	; (8008318 <raise+0xc>)
 800830e:	4601      	mov	r1, r0
 8008310:	6818      	ldr	r0, [r3, #0]
 8008312:	f7ff bfd3 	b.w	80082bc <_raise_r>
 8008316:	bf00      	nop
 8008318:	2000001c 	.word	0x2000001c

0800831c <_kill_r>:
 800831c:	b538      	push	{r3, r4, r5, lr}
 800831e:	4d07      	ldr	r5, [pc, #28]	; (800833c <_kill_r+0x20>)
 8008320:	2300      	movs	r3, #0
 8008322:	4604      	mov	r4, r0
 8008324:	4608      	mov	r0, r1
 8008326:	4611      	mov	r1, r2
 8008328:	602b      	str	r3, [r5, #0]
 800832a:	f7f9 fb7b 	bl	8001a24 <_kill>
 800832e:	1c43      	adds	r3, r0, #1
 8008330:	d102      	bne.n	8008338 <_kill_r+0x1c>
 8008332:	682b      	ldr	r3, [r5, #0]
 8008334:	b103      	cbz	r3, 8008338 <_kill_r+0x1c>
 8008336:	6023      	str	r3, [r4, #0]
 8008338:	bd38      	pop	{r3, r4, r5, pc}
 800833a:	bf00      	nop
 800833c:	200003ec 	.word	0x200003ec

08008340 <_getpid_r>:
 8008340:	f7f9 bb68 	b.w	8001a14 <_getpid>

08008344 <_init>:
 8008344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008346:	bf00      	nop
 8008348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800834a:	bc08      	pop	{r3}
 800834c:	469e      	mov	lr, r3
 800834e:	4770      	bx	lr

08008350 <_fini>:
 8008350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008352:	bf00      	nop
 8008354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008356:	bc08      	pop	{r3}
 8008358:	469e      	mov	lr, r3
 800835a:	4770      	bx	lr
